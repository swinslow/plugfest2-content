
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	e8 07 00 20 ad 15 00 00 29 40 00 00 dd 15 00 00     ... ....)@......
  10:	dd 15 00 00 dd 15 00 00 dd 15 00 00 00 00 00 00     ................
	...
  2c:	fd 13 00 00 dd 15 00 00 00 00 00 00 b5 13 00 00     ................
  3c:	11 40 00 00                                         .@..

00000040 <_irq_vector_table>:
  40:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  50:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  60:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  70:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  80:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  90:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  a0:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  b0:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  c0:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  d0:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  e0:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
  f0:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b978 	b.w	408 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	460e      	mov	r6, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	d14c      	bne.n	1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     140:	428a      	cmp	r2, r1
     142:	4694      	mov	ip, r2
     144:	d967      	bls.n	216 <CONFIG_IDLE_STACK_SIZE+0xd6>
     146:	fab2 f282 	clz	r2, r2
     14a:	b152      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14c:	fa01 f302 	lsl.w	r3, r1, r2
     150:	f1c2 0120 	rsb	r1, r2, #32
     154:	fa20 f101 	lsr.w	r1, r0, r1
     158:	fa0c fc02 	lsl.w	ip, ip, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 481c 	mov.w	r8, ip, lsr #16
     166:	0c21      	lsrs	r1, r4, #16
     168:	fbbe f6f8 	udiv	r6, lr, r8
     16c:	fa1f f78c 	uxth.w	r7, ip
     170:	fb08 e316 	mls	r3, r8, r6, lr
     174:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     178:	fb06 f107 	mul.w	r1, r6, r7
     17c:	4299      	cmp	r1, r3
     17e:	d90a      	bls.n	196 <CONFIG_IDLE_STACK_SIZE+0x56>
     180:	eb1c 0303 	adds.w	r3, ip, r3
     184:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
     188:	f080 811e 	bcs.w	3c8 <CONFIG_IDLE_STACK_SIZE+0x288>
     18c:	4299      	cmp	r1, r3
     18e:	f240 811b 	bls.w	3c8 <CONFIG_IDLE_STACK_SIZE+0x288>
     192:	3e02      	subs	r6, #2
     194:	4463      	add	r3, ip
     196:	1a5b      	subs	r3, r3, r1
     198:	b2a4      	uxth	r4, r4
     19a:	fbb3 f0f8 	udiv	r0, r3, r8
     19e:	fb08 3310 	mls	r3, r8, r0, r3
     1a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a6:	fb00 f707 	mul.w	r7, r0, r7
     1aa:	42a7      	cmp	r7, r4
     1ac:	d90a      	bls.n	1c4 <CONFIG_IDLE_STACK_SIZE+0x84>
     1ae:	eb1c 0404 	adds.w	r4, ip, r4
     1b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b6:	f080 8109 	bcs.w	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     1ba:	42a7      	cmp	r7, r4
     1bc:	f240 8106 	bls.w	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     1c0:	4464      	add	r4, ip
     1c2:	3802      	subs	r0, #2
     1c4:	1be4      	subs	r4, r4, r7
     1c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1ca:	2100      	movs	r1, #0
     1cc:	b11d      	cbz	r5, 1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     1ce:	40d4      	lsrs	r4, r2
     1d0:	2300      	movs	r3, #0
     1d2:	e9c5 4300 	strd	r4, r3, [r5]
     1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1da:	428b      	cmp	r3, r1
     1dc:	d908      	bls.n	1f0 <CONFIG_IDLE_STACK_SIZE+0xb0>
     1de:	2d00      	cmp	r5, #0
     1e0:	f000 80ef 	beq.w	3c2 <CONFIG_IDLE_STACK_SIZE+0x282>
     1e4:	2100      	movs	r1, #0
     1e6:	e9c5 0600 	strd	r0, r6, [r5]
     1ea:	4608      	mov	r0, r1
     1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1f0:	fab3 f183 	clz	r1, r3
     1f4:	2900      	cmp	r1, #0
     1f6:	d149      	bne.n	28c <CONFIG_IDLE_STACK_SIZE+0x14c>
     1f8:	42b3      	cmp	r3, r6
     1fa:	d302      	bcc.n	202 <CONFIG_IDLE_STACK_SIZE+0xc2>
     1fc:	4282      	cmp	r2, r0
     1fe:	f200 80ff 	bhi.w	400 <CONFIG_FLASH_SIZE>
     202:	1a84      	subs	r4, r0, r2
     204:	eb66 0303 	sbc.w	r3, r6, r3
     208:	2001      	movs	r0, #1
     20a:	469e      	mov	lr, r3
     20c:	2d00      	cmp	r5, #0
     20e:	d0e2      	beq.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     210:	e9c5 4e00 	strd	r4, lr, [r5]
     214:	e7df      	b.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     216:	b902      	cbnz	r2, 21a <CONFIG_IDLE_STACK_SIZE+0xda>
     218:	deff      	udf	#255	; 0xff
     21a:	fab2 f282 	clz	r2, r2
     21e:	2a00      	cmp	r2, #0
     220:	f040 808e 	bne.w	340 <CONFIG_IDLE_STACK_SIZE+0x200>
     224:	eba1 060c 	sub.w	r6, r1, ip
     228:	ea4f 471c 	mov.w	r7, ip, lsr #16
     22c:	fa1f f38c 	uxth.w	r3, ip
     230:	2101      	movs	r1, #1
     232:	fbb6 fef7 	udiv	lr, r6, r7
     236:	fb07 601e 	mls	r0, r7, lr, r6
     23a:	0c26      	lsrs	r6, r4, #16
     23c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     240:	fb03 f00e 	mul.w	r0, r3, lr
     244:	42b0      	cmp	r0, r6
     246:	d908      	bls.n	25a <CONFIG_IDLE_STACK_SIZE+0x11a>
     248:	eb1c 0606 	adds.w	r6, ip, r6
     24c:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
     250:	d202      	bcs.n	258 <CONFIG_IDLE_STACK_SIZE+0x118>
     252:	42b0      	cmp	r0, r6
     254:	f200 80d0 	bhi.w	3f8 <CONFIG_IDLE_STACK_SIZE+0x2b8>
     258:	46c6      	mov	lr, r8
     25a:	1a36      	subs	r6, r6, r0
     25c:	b2a4      	uxth	r4, r4
     25e:	fbb6 f0f7 	udiv	r0, r6, r7
     262:	fb07 6610 	mls	r6, r7, r0, r6
     266:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     26a:	fb00 f303 	mul.w	r3, r0, r3
     26e:	42a3      	cmp	r3, r4
     270:	d908      	bls.n	284 <CONFIG_IDLE_STACK_SIZE+0x144>
     272:	eb1c 0404 	adds.w	r4, ip, r4
     276:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
     27a:	d202      	bcs.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     27c:	42a3      	cmp	r3, r4
     27e:	f200 80b8 	bhi.w	3f2 <CONFIG_IDLE_STACK_SIZE+0x2b2>
     282:	4630      	mov	r0, r6
     284:	1ae4      	subs	r4, r4, r3
     286:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     28a:	e79f      	b.n	1cc <CONFIG_IDLE_STACK_SIZE+0x8c>
     28c:	f1c1 0720 	rsb	r7, r1, #32
     290:	fa22 f407 	lsr.w	r4, r2, r7
     294:	408b      	lsls	r3, r1
     296:	4323      	orrs	r3, r4
     298:	fa06 fc01 	lsl.w	ip, r6, r1
     29c:	fa26 f407 	lsr.w	r4, r6, r7
     2a0:	fa20 f607 	lsr.w	r6, r0, r7
     2a4:	ea46 060c 	orr.w	r6, r6, ip
     2a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
     2ac:	fa00 f801 	lsl.w	r8, r0, r1
     2b0:	fbb4 fef9 	udiv	lr, r4, r9
     2b4:	0c30      	lsrs	r0, r6, #16
     2b6:	fa1f fc83 	uxth.w	ip, r3
     2ba:	fb09 441e 	mls	r4, r9, lr, r4
     2be:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     2c2:	fb0e f00c 	mul.w	r0, lr, ip
     2c6:	42a0      	cmp	r0, r4
     2c8:	fa02 f201 	lsl.w	r2, r2, r1
     2cc:	d90a      	bls.n	2e4 <CONFIG_IDLE_STACK_SIZE+0x1a4>
     2ce:	191c      	adds	r4, r3, r4
     2d0:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
     2d4:	f080 808b 	bcs.w	3ee <CONFIG_IDLE_STACK_SIZE+0x2ae>
     2d8:	42a0      	cmp	r0, r4
     2da:	f240 8088 	bls.w	3ee <CONFIG_IDLE_STACK_SIZE+0x2ae>
     2de:	f1ae 0e02 	sub.w	lr, lr, #2
     2e2:	441c      	add	r4, r3
     2e4:	1a24      	subs	r4, r4, r0
     2e6:	b2b6      	uxth	r6, r6
     2e8:	fbb4 f0f9 	udiv	r0, r4, r9
     2ec:	fb09 4410 	mls	r4, r9, r0, r4
     2f0:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     2f4:	fb00 fc0c 	mul.w	ip, r0, ip
     2f8:	45a4      	cmp	ip, r4
     2fa:	d907      	bls.n	30c <CONFIG_IDLE_STACK_SIZE+0x1cc>
     2fc:	191c      	adds	r4, r3, r4
     2fe:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
     302:	d270      	bcs.n	3e6 <CONFIG_IDLE_STACK_SIZE+0x2a6>
     304:	45a4      	cmp	ip, r4
     306:	d96e      	bls.n	3e6 <CONFIG_IDLE_STACK_SIZE+0x2a6>
     308:	3802      	subs	r0, #2
     30a:	441c      	add	r4, r3
     30c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     310:	fba0 e602 	umull	lr, r6, r0, r2
     314:	eba4 040c 	sub.w	r4, r4, ip
     318:	42b4      	cmp	r4, r6
     31a:	46f4      	mov	ip, lr
     31c:	46b1      	mov	r9, r6
     31e:	d359      	bcc.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     320:	d056      	beq.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     322:	2d00      	cmp	r5, #0
     324:	d06e      	beq.n	404 <CONFIG_FLASH_SIZE+0x4>
     326:	ebb8 030c 	subs.w	r3, r8, ip
     32a:	eb64 0409 	sbc.w	r4, r4, r9
     32e:	40cb      	lsrs	r3, r1
     330:	fa04 f707 	lsl.w	r7, r4, r7
     334:	431f      	orrs	r7, r3
     336:	40cc      	lsrs	r4, r1
     338:	e9c5 7400 	strd	r7, r4, [r5]
     33c:	2100      	movs	r1, #0
     33e:	e74a      	b.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     340:	f1c2 0020 	rsb	r0, r2, #32
     344:	fa24 f100 	lsr.w	r1, r4, r0
     348:	fa0c fc02 	lsl.w	ip, ip, r2
     34c:	fa06 f302 	lsl.w	r3, r6, r2
     350:	fa26 f000 	lsr.w	r0, r6, r0
     354:	ea4f 471c 	mov.w	r7, ip, lsr #16
     358:	ea41 0603 	orr.w	r6, r1, r3
     35c:	fbb0 f1f7 	udiv	r1, r0, r7
     360:	fa1f f38c 	uxth.w	r3, ip
     364:	fb07 0e11 	mls	lr, r7, r1, r0
     368:	0c30      	lsrs	r0, r6, #16
     36a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     36e:	fb01 fe03 	mul.w	lr, r1, r3
     372:	4586      	cmp	lr, r0
     374:	fa04 f402 	lsl.w	r4, r4, r2
     378:	d908      	bls.n	38c <CONFIG_IDLE_STACK_SIZE+0x24c>
     37a:	eb1c 0000 	adds.w	r0, ip, r0
     37e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     382:	d232      	bcs.n	3ea <CONFIG_IDLE_STACK_SIZE+0x2aa>
     384:	4586      	cmp	lr, r0
     386:	d930      	bls.n	3ea <CONFIG_IDLE_STACK_SIZE+0x2aa>
     388:	3902      	subs	r1, #2
     38a:	4460      	add	r0, ip
     38c:	eba0 000e 	sub.w	r0, r0, lr
     390:	b2b6      	uxth	r6, r6
     392:	fbb0 fef7 	udiv	lr, r0, r7
     396:	fb07 001e 	mls	r0, r7, lr, r0
     39a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     39e:	fb0e f003 	mul.w	r0, lr, r3
     3a2:	42b0      	cmp	r0, r6
     3a4:	d909      	bls.n	3ba <CONFIG_IDLE_STACK_SIZE+0x27a>
     3a6:	eb1c 0606 	adds.w	r6, ip, r6
     3aa:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
     3ae:	d218      	bcs.n	3e2 <CONFIG_IDLE_STACK_SIZE+0x2a2>
     3b0:	42b0      	cmp	r0, r6
     3b2:	d916      	bls.n	3e2 <CONFIG_IDLE_STACK_SIZE+0x2a2>
     3b4:	f1ae 0e02 	sub.w	lr, lr, #2
     3b8:	4466      	add	r6, ip
     3ba:	1a36      	subs	r6, r6, r0
     3bc:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     3c0:	e737      	b.n	232 <CONFIG_IDLE_STACK_SIZE+0xf2>
     3c2:	4629      	mov	r1, r5
     3c4:	4628      	mov	r0, r5
     3c6:	e706      	b.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     3c8:	4606      	mov	r6, r0
     3ca:	e6e4      	b.n	196 <CONFIG_IDLE_STACK_SIZE+0x56>
     3cc:	4618      	mov	r0, r3
     3ce:	e6f9      	b.n	1c4 <CONFIG_IDLE_STACK_SIZE+0x84>
     3d0:	45f0      	cmp	r8, lr
     3d2:	d2a6      	bcs.n	322 <CONFIG_IDLE_STACK_SIZE+0x1e2>
     3d4:	ebbe 0c02 	subs.w	ip, lr, r2
     3d8:	eb66 0303 	sbc.w	r3, r6, r3
     3dc:	3801      	subs	r0, #1
     3de:	4699      	mov	r9, r3
     3e0:	e79f      	b.n	322 <CONFIG_IDLE_STACK_SIZE+0x1e2>
     3e2:	46c6      	mov	lr, r8
     3e4:	e7e9      	b.n	3ba <CONFIG_IDLE_STACK_SIZE+0x27a>
     3e6:	4630      	mov	r0, r6
     3e8:	e790      	b.n	30c <CONFIG_IDLE_STACK_SIZE+0x1cc>
     3ea:	4641      	mov	r1, r8
     3ec:	e7ce      	b.n	38c <CONFIG_IDLE_STACK_SIZE+0x24c>
     3ee:	46d6      	mov	lr, sl
     3f0:	e778      	b.n	2e4 <CONFIG_IDLE_STACK_SIZE+0x1a4>
     3f2:	4464      	add	r4, ip
     3f4:	3802      	subs	r0, #2
     3f6:	e745      	b.n	284 <CONFIG_IDLE_STACK_SIZE+0x144>
     3f8:	f1ae 0e02 	sub.w	lr, lr, #2
     3fc:	4466      	add	r6, ip
     3fe:	e72c      	b.n	25a <CONFIG_IDLE_STACK_SIZE+0x11a>
     400:	4608      	mov	r0, r1
     402:	e703      	b.n	20c <CONFIG_IDLE_STACK_SIZE+0xcc>
     404:	4629      	mov	r1, r5
     406:	e6e6      	b.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>

00000408 <__aeabi_idiv0>:
     408:	4770      	bx	lr
     40a:	bf00      	nop

0000040c <main>:
#include <zephyr.h>
#include <sys/printk.h>

void main(void)
{
	printk("Hello World! %s\n", CONFIG_BOARD);
     40c:	4901      	ldr	r1, [pc, #4]	; (414 <main+0x8>)
     40e:	4802      	ldr	r0, [pc, #8]	; (418 <main+0xc>)
     410:	f003 bc48 	b.w	3ca4 <printk>
     414:	000049f4 	.word	0x000049f4
     418:	00004a02 	.word	0x00004a02

0000041c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     41c:	680b      	ldr	r3, [r1, #0]
     41e:	3301      	adds	r3, #1
     420:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     422:	4b01      	ldr	r3, [pc, #4]	; (428 <char_out+0xc>)
     424:	681b      	ldr	r3, [r3, #0]
     426:	4718      	bx	r3
     428:	20000000 	.word	0x20000000

0000042c <__printk_hook_install>:
	_char_out = fn;
     42c:	4b01      	ldr	r3, [pc, #4]	; (434 <__printk_hook_install+0x8>)
     42e:	6018      	str	r0, [r3, #0]
}
     430:	4770      	bx	lr
     432:	bf00      	nop
     434:	20000000 	.word	0x20000000

00000438 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     438:	b507      	push	{r0, r1, r2, lr}
     43a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     43c:	2100      	movs	r1, #0
{
     43e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     440:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     442:	4803      	ldr	r0, [pc, #12]	; (450 <vprintk+0x18>)
     444:	a901      	add	r1, sp, #4
     446:	f000 f8e5 	bl	614 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     44a:	b003      	add	sp, #12
     44c:	f85d fb04 	ldr.w	pc, [sp], #4
     450:	0000041d 	.word	0x0000041d

00000454 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     458:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     45c:	f019 0808 	ands.w	r8, r9, #8
{
     460:	4604      	mov	r4, r0
     462:	4693      	mov	fp, r2
	if (processing) {
     464:	d00d      	beq.n	482 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     466:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     468:	bf0c      	ite	eq
     46a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     46e:	f049 0920 	orrne.w	r9, r9, #32
     472:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     476:	f38b 8811 	msr	BASEPRI, fp
     47a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     47e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     482:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     486:	2902      	cmp	r1, #2
     488:	d107      	bne.n	49a <process_event+0x46>
			evt = process_recheck(mgr);
     48a:	4620      	mov	r0, r4
     48c:	f003 fc17 	bl	3cbe <process_recheck>
		if (evt == EVT_NOP) {
     490:	2800      	cmp	r0, #0
     492:	d0f0      	beq.n	476 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     494:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     496:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     498:	d14e      	bne.n	538 <process_event+0xe4>
			res = mgr->last_res;
     49a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     49c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     49e:	2f00      	cmp	r7, #0
     4a0:	da15      	bge.n	4ce <process_event+0x7a>
		*clients = mgr->clients;
     4a2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4a4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     4a8:	e9c4 8800 	strd	r8, r8, [r4]
     4ac:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     4b0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     4b2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     4b4:	8b21      	ldrh	r1, [r4, #24]
     4b6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     4ba:	45ca      	cmp	sl, r9
     4bc:	d002      	beq.n	4c4 <process_event+0x70>
		if (do_monitors
     4be:	68a3      	ldr	r3, [r4, #8]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d15a      	bne.n	57a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     4c4:	b90d      	cbnz	r5, 4ca <process_event+0x76>
		    || (transit != NULL)) {
     4c6:	2e00      	cmp	r6, #0
     4c8:	d071      	beq.n	5ae <process_event+0x15a>
     4ca:	2300      	movs	r3, #0
     4cc:	e056      	b.n	57c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4ce:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     4d2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     4d4:	2a01      	cmp	r2, #1
     4d6:	d81e      	bhi.n	516 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4d8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     4dc:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     4de:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4e0:	b289      	uxth	r1, r1
     4e2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     4e6:	d10a      	bne.n	4fe <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     4e8:	b13d      	cbz	r5, 4fa <process_event+0xa6>
     4ea:	8b63      	ldrh	r3, [r4, #26]
     4ec:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     4ee:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     4f0:	3301      	adds	r3, #1
     4f2:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     4f4:	2a00      	cmp	r2, #0
     4f6:	d1fa      	bne.n	4ee <process_event+0x9a>
     4f8:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4fa:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     4fe:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     500:	4620      	mov	r0, r4
     502:	f003 fbdc 	bl	3cbe <process_recheck>
     506:	4606      	mov	r6, r0
     508:	2800      	cmp	r0, #0
     50a:	d0d3      	beq.n	4b4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     50c:	8b23      	ldrh	r3, [r4, #24]
     50e:	f043 0320 	orr.w	r3, r3, #32
     512:	8323      	strh	r3, [r4, #24]
     514:	e7cd      	b.n	4b2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     516:	2b04      	cmp	r3, #4
     518:	d10c      	bne.n	534 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     51a:	f021 0107 	bic.w	r1, r1, #7
     51e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     520:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     522:	4620      	mov	r0, r4
     524:	f003 fbcb 	bl	3cbe <process_recheck>
     528:	4605      	mov	r5, r0
     52a:	2800      	cmp	r0, #0
     52c:	d0c1      	beq.n	4b2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     52e:	f041 0120 	orr.w	r1, r1, #32
     532:	8321      	strh	r1, [r4, #24]
     534:	2500      	movs	r5, #0
     536:	e7bc      	b.n	4b2 <process_event+0x5e>
		} else if (evt == EVT_START) {
     538:	2803      	cmp	r0, #3
     53a:	d109      	bne.n	550 <process_event+0xfc>
			transit = mgr->transitions->start;
     53c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     53e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     542:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     544:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     548:	8323      	strh	r3, [r4, #24]
}
     54a:	2500      	movs	r5, #0
		res = 0;
     54c:	462f      	mov	r7, r5
     54e:	e7b1      	b.n	4b4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     550:	2804      	cmp	r0, #4
     552:	d106      	bne.n	562 <process_event+0x10e>
			transit = mgr->transitions->stop;
     554:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     556:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     55a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     55c:	f043 0304 	orr.w	r3, r3, #4
     560:	e7f2      	b.n	548 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     562:	2805      	cmp	r0, #5
     564:	d106      	bne.n	574 <process_event+0x120>
			transit = mgr->transitions->reset;
     566:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     568:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     56c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     56e:	f043 0305 	orr.w	r3, r3, #5
     572:	e7e9      	b.n	548 <process_event+0xf4>
     574:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     576:	462e      	mov	r6, r5
     578:	e7e8      	b.n	54c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     57a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     57c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     580:	8321      	strh	r1, [r4, #24]
     582:	f38b 8811 	msr	BASEPRI, fp
     586:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     58a:	b9fb      	cbnz	r3, 5cc <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     58c:	bb85      	cbnz	r5, 5f0 <process_event+0x19c>
			if (transit != NULL) {
     58e:	b116      	cbz	r6, 596 <process_event+0x142>
				transit(mgr, transition_complete);
     590:	491f      	ldr	r1, [pc, #124]	; (610 <process_event+0x1bc>)
     592:	4620      	mov	r0, r4
     594:	47b0      	blx	r6
	__asm__ volatile(
     596:	f04f 0320 	mov.w	r3, #32
     59a:	f3ef 8b11 	mrs	fp, BASEPRI
     59e:	f383 8811 	msr	BASEPRI, r3
     5a2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     5a6:	8b23      	ldrh	r3, [r4, #24]
     5a8:	f023 0308 	bic.w	r3, r3, #8
     5ac:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     5ae:	8b23      	ldrh	r3, [r4, #24]
     5b0:	06da      	lsls	r2, r3, #27
     5b2:	d525      	bpl.n	600 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     5b4:	f023 0310 	bic.w	r3, r3, #16
     5b8:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     5ba:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     5bc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     5c0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     5c4:	2900      	cmp	r1, #0
     5c6:	f47f af5e 	bne.w	486 <process_event+0x32>
out:
     5ca:	e754      	b.n	476 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     5cc:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5ce:	2900      	cmp	r1, #0
     5d0:	d0dc      	beq.n	58c <process_event+0x138>
	return node->next;
     5d2:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     5d6:	f8d1 b004 	ldr.w	fp, [r1, #4]
     5da:	463b      	mov	r3, r7
     5dc:	4652      	mov	r2, sl
     5de:	4620      	mov	r0, r4
     5e0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5e2:	f1b9 0f00 	cmp.w	r9, #0
     5e6:	d0d1      	beq.n	58c <process_event+0x138>
     5e8:	4649      	mov	r1, r9
     5ea:	f8d9 9000 	ldr.w	r9, [r9]
     5ee:	e7f2      	b.n	5d6 <process_event+0x182>
     5f0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     5f2:	463b      	mov	r3, r7
     5f4:	4652      	mov	r2, sl
     5f6:	4620      	mov	r0, r4
     5f8:	682d      	ldr	r5, [r5, #0]
     5fa:	f003 fb7c 	bl	3cf6 <notify_one>
     5fe:	e7c5      	b.n	58c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     600:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     604:	bf1e      	ittt	ne
     606:	f023 0320 	bicne.w	r3, r3, #32
     60a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     60c:	2102      	movne	r1, #2
     60e:	e7d5      	b.n	5bc <process_event+0x168>
     610:	00003d23 	.word	0x00003d23

00000614 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     618:	b091      	sub	sp, #68	; 0x44
     61a:	468b      	mov	fp, r1
     61c:	9002      	str	r0, [sp, #8]
     61e:	4692      	mov	sl, r2
     620:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     622:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     624:	f89a 0000 	ldrb.w	r0, [sl]
     628:	b908      	cbnz	r0, 62e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     62a:	4628      	mov	r0, r5
     62c:	e35d      	b.n	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
		if (*fp != '%') {
     62e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     630:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     634:	d007      	beq.n	646 <cbvprintf+0x32>
			OUTC('%');
     636:	9b02      	ldr	r3, [sp, #8]
     638:	4659      	mov	r1, fp
     63a:	4798      	blx	r3
     63c:	2800      	cmp	r0, #0
     63e:	f2c0 8354 	blt.w	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
     642:	3501      	adds	r5, #1
			break;
     644:	e212      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
		} state = {
     646:	2218      	movs	r2, #24
     648:	2100      	movs	r1, #0
     64a:	a80a      	add	r0, sp, #40	; 0x28
     64c:	f003 fd3a 	bl	40c4 <memset>
	if (*sp == '%') {
     650:	f89a 3001 	ldrb.w	r3, [sl, #1]
     654:	2b25      	cmp	r3, #37	; 0x25
     656:	d078      	beq.n	74a <cbvprintf+0x136>
     658:	2200      	movs	r2, #0
     65a:	4610      	mov	r0, r2
     65c:	4696      	mov	lr, r2
     65e:	4694      	mov	ip, r2
     660:	4616      	mov	r6, r2
     662:	4639      	mov	r1, r7
		switch (*sp) {
     664:	f817 3b01 	ldrb.w	r3, [r7], #1
     668:	2b2b      	cmp	r3, #43	; 0x2b
     66a:	f000 809d 	beq.w	7a8 <cbvprintf+0x194>
     66e:	f200 8094 	bhi.w	79a <cbvprintf+0x186>
     672:	2b20      	cmp	r3, #32
     674:	f000 809b 	beq.w	7ae <cbvprintf+0x19a>
     678:	2b23      	cmp	r3, #35	; 0x23
     67a:	f000 809b 	beq.w	7b4 <cbvprintf+0x1a0>
     67e:	b12e      	cbz	r6, 68c <cbvprintf+0x78>
     680:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     684:	f046 0604 	orr.w	r6, r6, #4
     688:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     68c:	f1bc 0f00 	cmp.w	ip, #0
     690:	d005      	beq.n	69e <cbvprintf+0x8a>
     692:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     696:	f046 0608 	orr.w	r6, r6, #8
     69a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     69e:	f1be 0f00 	cmp.w	lr, #0
     6a2:	d005      	beq.n	6b0 <cbvprintf+0x9c>
     6a4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     6a8:	f046 0610 	orr.w	r6, r6, #16
     6ac:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     6b0:	b128      	cbz	r0, 6be <cbvprintf+0xaa>
     6b2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6b6:	f040 0020 	orr.w	r0, r0, #32
     6ba:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6be:	b12a      	cbz	r2, 6cc <cbvprintf+0xb8>
     6c0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     6c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     6c8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     6cc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     6d0:	f002 0044 	and.w	r0, r2, #68	; 0x44
     6d4:	2844      	cmp	r0, #68	; 0x44
     6d6:	d103      	bne.n	6e0 <cbvprintf+0xcc>
		conv->flag_zero = false;
     6d8:	f36f 1286 	bfc	r2, #6, #1
     6dc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     6e0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     6e4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     6e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     6ea:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     6ee:	d17b      	bne.n	7e8 <cbvprintf+0x1d4>
		conv->width_star = true;
     6f0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     6f4:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     6f8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     6fa:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     6fe:	781a      	ldrb	r2, [r3, #0]
     700:	2a2e      	cmp	r2, #46	; 0x2e
     702:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     706:	bf0c      	ite	eq
     708:	2101      	moveq	r1, #1
     70a:	2100      	movne	r1, #0
     70c:	f361 0241 	bfi	r2, r1, #1, #1
     710:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     714:	d174      	bne.n	800 <CONFIG_ISR_STACK_SIZE>
	if (*sp == '*') {
     716:	785a      	ldrb	r2, [r3, #1]
     718:	2a2a      	cmp	r2, #42	; 0x2a
     71a:	d06a      	beq.n	7f2 <cbvprintf+0x1de>
	++sp;
     71c:	3301      	adds	r3, #1
	size_t val = 0;
     71e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     720:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     722:	4618      	mov	r0, r3
     724:	f810 2b01 	ldrb.w	r2, [r0], #1
     728:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     72c:	2f09      	cmp	r7, #9
     72e:	f240 808e 	bls.w	84e <CONFIG_ISR_STACK_SIZE+0x4e>
	conv->unsupported |= ((conv->prec_value < 0)
     732:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     736:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     738:	f3c2 0040 	ubfx	r0, r2, #1, #1
     73c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     740:	f361 0241 	bfi	r2, r1, #1, #1
     744:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     748:	e05a      	b.n	800 <CONFIG_ISR_STACK_SIZE>
		conv->specifier = *sp++;
     74a:	f10a 0702 	add.w	r7, sl, #2
     74e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     752:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     756:	07d9      	lsls	r1, r3, #31
     758:	f140 8149 	bpl.w	9ee <CONFIG_ISR_STACK_SIZE+0x1ee>
			width = va_arg(ap, int);
     75c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     760:	f1b9 0f00 	cmp.w	r9, #0
     764:	da07      	bge.n	776 <cbvprintf+0x162>
				conv->flag_dash = true;
     766:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     76a:	f042 0204 	orr.w	r2, r2, #4
     76e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     772:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     776:	075a      	lsls	r2, r3, #29
     778:	f140 8142 	bpl.w	a00 <CONFIG_ISR_STACK_SIZE+0x200>
			int arg = va_arg(ap, int);
     77c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     780:	f1b8 0f00 	cmp.w	r8, #0
     784:	f280 8141 	bge.w	a0a <CONFIG_ISR_STACK_SIZE+0x20a>
				conv->prec_present = false;
     788:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     78c:	f36f 0341 	bfc	r3, #1, #1
     790:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     794:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     798:	e137      	b.n	a0a <CONFIG_ISR_STACK_SIZE+0x20a>
		switch (*sp) {
     79a:	2b2d      	cmp	r3, #45	; 0x2d
     79c:	d00c      	beq.n	7b8 <cbvprintf+0x1a4>
     79e:	2b30      	cmp	r3, #48	; 0x30
     7a0:	f47f af6d 	bne.w	67e <cbvprintf+0x6a>
			conv->flag_zero = true;
     7a4:	2201      	movs	r2, #1
	} while (loop);
     7a6:	e75c      	b.n	662 <cbvprintf+0x4e>
			conv->flag_plus = true;
     7a8:	f04f 0c01 	mov.w	ip, #1
     7ac:	e759      	b.n	662 <cbvprintf+0x4e>
			conv->flag_space = true;
     7ae:	f04f 0e01 	mov.w	lr, #1
     7b2:	e756      	b.n	662 <cbvprintf+0x4e>
			conv->flag_hash = true;
     7b4:	2001      	movs	r0, #1
     7b6:	e754      	b.n	662 <cbvprintf+0x4e>
		switch (*sp) {
     7b8:	2601      	movs	r6, #1
     7ba:	e752      	b.n	662 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     7bc:	fb0c 0202 	mla	r2, ip, r2, r0
     7c0:	3a30      	subs	r2, #48	; 0x30
     7c2:	4633      	mov	r3, r6
     7c4:	461e      	mov	r6, r3
     7c6:	f816 0b01 	ldrb.w	r0, [r6], #1
     7ca:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7ce:	2f09      	cmp	r7, #9
     7d0:	d9f4      	bls.n	7bc <cbvprintf+0x1a8>
	if (sp != wp) {
     7d2:	4299      	cmp	r1, r3
     7d4:	d093      	beq.n	6fe <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     7d6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     7da:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     7dc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     7de:	f362 0141 	bfi	r1, r2, #1, #1
     7e2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     7e6:	e78a      	b.n	6fe <cbvprintf+0xea>
     7e8:	460b      	mov	r3, r1
	size_t val = 0;
     7ea:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     7ec:	f04f 0c0a 	mov.w	ip, #10
     7f0:	e7e8      	b.n	7c4 <cbvprintf+0x1b0>
		conv->prec_star = true;
     7f2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7f6:	f042 0204 	orr.w	r2, r2, #4
     7fa:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     7fe:	3302      	adds	r3, #2
	switch (*sp) {
     800:	461f      	mov	r7, r3
     802:	f817 2b01 	ldrb.w	r2, [r7], #1
     806:	2a6c      	cmp	r2, #108	; 0x6c
     808:	d041      	beq.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
     80a:	d825      	bhi.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     80c:	2a68      	cmp	r2, #104	; 0x68
     80e:	d02b      	beq.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     810:	2a6a      	cmp	r2, #106	; 0x6a
     812:	d046      	beq.n	8a2 <CONFIG_ISR_STACK_SIZE+0xa2>
     814:	2a4c      	cmp	r2, #76	; 0x4c
     816:	d04c      	beq.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
     818:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     81a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     81e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     822:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     826:	2a78      	cmp	r2, #120	; 0x78
     828:	f200 80d9 	bhi.w	9de <CONFIG_ISR_STACK_SIZE+0x1de>
     82c:	2a57      	cmp	r2, #87	; 0x57
     82e:	d84d      	bhi.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
     830:	2a41      	cmp	r2, #65	; 0x41
     832:	d003      	beq.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     834:	3a45      	subs	r2, #69	; 0x45
     836:	2a02      	cmp	r2, #2
     838:	f200 80d1 	bhi.w	9de <CONFIG_ISR_STACK_SIZE+0x1de>
		conv->specifier_cat = SPECIFIER_FP;
     83c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     840:	2204      	movs	r2, #4
     842:	f362 0302 	bfi	r3, r2, #0, #3
     846:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     84a:	2301      	movs	r3, #1
			break;
     84c:	e09e      	b.n	98c <CONFIG_ISR_STACK_SIZE+0x18c>
		val = 10U * val + *sp++ - '0';
     84e:	fb06 2101 	mla	r1, r6, r1, r2
     852:	3930      	subs	r1, #48	; 0x30
     854:	4603      	mov	r3, r0
     856:	e764      	b.n	722 <cbvprintf+0x10e>
	switch (*sp) {
     858:	2a74      	cmp	r2, #116	; 0x74
     85a:	d026      	beq.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
     85c:	2a7a      	cmp	r2, #122	; 0x7a
     85e:	d1db      	bne.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
		conv->length_mod = LENGTH_Z;
     860:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     864:	2206      	movs	r2, #6
     866:	e00d      	b.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
		if (*++sp == 'h') {
     868:	785a      	ldrb	r2, [r3, #1]
     86a:	2a68      	cmp	r2, #104	; 0x68
     86c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     870:	d106      	bne.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
			conv->length_mod = LENGTH_HH;
     872:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     874:	f361 02c6 	bfi	r2, r1, #3, #4
     878:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     87c:	1c9f      	adds	r7, r3, #2
     87e:	e7cc      	b.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
			conv->length_mod = LENGTH_H;
     880:	4613      	mov	r3, r2
     882:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     884:	f362 03c6 	bfi	r3, r2, #3, #4
     888:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     88c:	e7c5      	b.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
		if (*++sp == 'l') {
     88e:	785a      	ldrb	r2, [r3, #1]
     890:	2a6c      	cmp	r2, #108	; 0x6c
     892:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     896:	d101      	bne.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
			conv->length_mod = LENGTH_LL;
     898:	2104      	movs	r1, #4
     89a:	e7eb      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
			conv->length_mod = LENGTH_L;
     89c:	4613      	mov	r3, r2
     89e:	2203      	movs	r2, #3
     8a0:	e7f0      	b.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
		conv->length_mod = LENGTH_J;
     8a2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8a6:	2205      	movs	r2, #5
     8a8:	e7ec      	b.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
		conv->length_mod = LENGTH_T;
     8aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8ae:	2207      	movs	r2, #7
     8b0:	e7e8      	b.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
		conv->unsupported = true;
     8b2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     8b6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     8ba:	f023 0302 	bic.w	r3, r3, #2
     8be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     8c2:	f043 0302 	orr.w	r3, r3, #2
     8c6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     8ca:	e7a6      	b.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     8cc:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     8d0:	2920      	cmp	r1, #32
     8d2:	f200 8084 	bhi.w	9de <CONFIG_ISR_STACK_SIZE+0x1de>
     8d6:	a001      	add	r0, pc, #4	; (adr r0, 8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
     8d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     8dc:	000009a1 	.word	0x000009a1
     8e0:	000009df 	.word	0x000009df
     8e4:	000009df 	.word	0x000009df
     8e8:	000009df 	.word	0x000009df
     8ec:	000009df 	.word	0x000009df
     8f0:	000009df 	.word	0x000009df
     8f4:	000009df 	.word	0x000009df
     8f8:	000009df 	.word	0x000009df
     8fc:	000009df 	.word	0x000009df
     900:	0000083d 	.word	0x0000083d
     904:	000009df 	.word	0x000009df
     908:	000009a1 	.word	0x000009a1
     90c:	00000961 	.word	0x00000961
     910:	0000083d 	.word	0x0000083d
     914:	0000083d 	.word	0x0000083d
     918:	0000083d 	.word	0x0000083d
     91c:	000009df 	.word	0x000009df
     920:	00000961 	.word	0x00000961
     924:	000009df 	.word	0x000009df
     928:	000009df 	.word	0x000009df
     92c:	000009df 	.word	0x000009df
     930:	000009df 	.word	0x000009df
     934:	000009a9 	.word	0x000009a9
     938:	000009a1 	.word	0x000009a1
     93c:	000009c5 	.word	0x000009c5
     940:	000009df 	.word	0x000009df
     944:	000009df 	.word	0x000009df
     948:	000009c5 	.word	0x000009c5
     94c:	000009df 	.word	0x000009df
     950:	000009a1 	.word	0x000009a1
     954:	000009df 	.word	0x000009df
     958:	000009df 	.word	0x000009df
     95c:	000009a1 	.word	0x000009a1
		conv->specifier_cat = SPECIFIER_SINT;
     960:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     964:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     966:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     96a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     96e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     970:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     974:	bf02      	ittt	eq
     976:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     97a:	f041 0101 	orreq.w	r1, r1, #1
     97e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     982:	2a63      	cmp	r2, #99	; 0x63
     984:	d131      	bne.n	9ea <CONFIG_ISR_STACK_SIZE+0x1ea>
			unsupported = (conv->length_mod != LENGTH_NONE);
     986:	3b00      	subs	r3, #0
     988:	bf18      	it	ne
     98a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     98c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     990:	f3c2 0140 	ubfx	r1, r2, #1, #1
     994:	430b      	orrs	r3, r1
     996:	f363 0241 	bfi	r2, r3, #1, #1
     99a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     99e:	e6d8      	b.n	752 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     9a0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     9a4:	2002      	movs	r0, #2
     9a6:	e7de      	b.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
		conv->specifier_cat = SPECIFIER_PTR;
     9a8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9ac:	f003 0378 	and.w	r3, r3, #120	; 0x78
     9b0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     9b4:	2103      	movs	r1, #3
     9b6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9ba:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     9bc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9c0:	4143      	adcs	r3, r0
     9c2:	e7e3      	b.n	98c <CONFIG_ISR_STACK_SIZE+0x18c>
		conv->specifier_cat = SPECIFIER_PTR;
     9c4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     9c8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     9ca:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     9ce:	f361 0202 	bfi	r2, r1, #0, #3
     9d2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     9d6:	bf14      	ite	ne
     9d8:	2301      	movne	r3, #1
     9da:	2300      	moveq	r3, #0
     9dc:	e7d6      	b.n	98c <CONFIG_ISR_STACK_SIZE+0x18c>
		conv->invalid = true;
     9de:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9e2:	f043 0301 	orr.w	r3, r3, #1
     9e6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     9ea:	2300      	movs	r3, #0
     9ec:	e7ce      	b.n	98c <CONFIG_ISR_STACK_SIZE+0x18c>
		} else if (conv->width_present) {
     9ee:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     9f2:	2a00      	cmp	r2, #0
			width = conv->width_value;
     9f4:	bfb4      	ite	lt
     9f6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     9fa:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     9fe:	e6ba      	b.n	776 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     a00:	079b      	lsls	r3, r3, #30
     a02:	f57f aec7 	bpl.w	794 <cbvprintf+0x180>
			precision = conv->prec_value;
     a06:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     a0a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     a0e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a10:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     a14:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     a18:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a1c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a1e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a22:	d138      	bne.n	a96 <CONFIG_ISR_STACK_SIZE+0x296>
			switch (length_mod) {
     a24:	1ecb      	subs	r3, r1, #3
     a26:	2b04      	cmp	r3, #4
     a28:	d822      	bhi.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
     a2a:	e8df f003 	tbb	[pc, r3]
     a2e:	0903      	.short	0x0903
     a30:	2109      	.short	0x2109
     a32:	21          	.byte	0x21
     a33:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     a34:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     a38:	17da      	asrs	r2, r3, #31
     a3a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     a3e:	e006      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
					(sint_value_type)va_arg(ap, intmax_t);
     a40:	3407      	adds	r4, #7
     a42:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     a46:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     a4a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     a4e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a52:	f013 0603 	ands.w	r6, r3, #3
     a56:	d054      	beq.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
			OUTS(sp, fp);
     a58:	9802      	ldr	r0, [sp, #8]
     a5a:	463b      	mov	r3, r7
     a5c:	4652      	mov	r2, sl
     a5e:	4659      	mov	r1, fp
     a60:	f003 fa28 	bl	3eb4 <outs>
     a64:	2800      	cmp	r0, #0
     a66:	f2c0 8140 	blt.w	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
     a6a:	4405      	add	r5, r0
			continue;
     a6c:	46ba      	mov	sl, r7
     a6e:	e5d9      	b.n	624 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a70:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     a74:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a76:	ea4f 72e3 	mov.w	r2, r3, asr #31
     a7a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a7e:	d105      	bne.n	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
				value->uint = (unsigned char)value->uint;
     a80:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     a84:	930a      	str	r3, [sp, #40]	; 0x28
     a86:	2300      	movs	r3, #0
     a88:	930b      	str	r3, [sp, #44]	; 0x2c
     a8a:	e7e0      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
			} else if (length_mod == LENGTH_H) {
     a8c:	2902      	cmp	r1, #2
     a8e:	d1de      	bne.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
				value->sint = (short)value->sint;
     a90:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     a94:	e7d0      	b.n	a38 <CONFIG_ISR_STACK_SIZE+0x238>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a96:	2b02      	cmp	r3, #2
     a98:	d123      	bne.n	ae2 <CONFIG_ISR_STACK_SIZE+0x2e2>
			switch (length_mod) {
     a9a:	1ecb      	subs	r3, r1, #3
     a9c:	2b04      	cmp	r3, #4
     a9e:	d813      	bhi.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     aa0:	e8df f003 	tbb	[pc, r3]
     aa4:	120a0a03 	.word	0x120a0a03
     aa8:	12          	.byte	0x12
     aa9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     aaa:	6822      	ldr	r2, [r4, #0]
     aac:	920a      	str	r2, [sp, #40]	; 0x28
     aae:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     ab0:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     ab2:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     ab4:	4604      	mov	r4, r0
     ab6:	e7ca      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
					(uint_value_type)va_arg(ap,
     ab8:	1de0      	adds	r0, r4, #7
     aba:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     abe:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     ac2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     ac6:	e7f5      	b.n	ab4 <CONFIG_ISR_STACK_SIZE+0x2b4>
					(uint_value_type)va_arg(ap, size_t);
     ac8:	f854 3b04 	ldr.w	r3, [r4], #4
     acc:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ace:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     ad0:	f04f 0300 	mov.w	r3, #0
     ad4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     ad6:	d0d3      	beq.n	a80 <CONFIG_ISR_STACK_SIZE+0x280>
			} else if (length_mod == LENGTH_H) {
     ad8:	2902      	cmp	r1, #2
     ada:	d1b8      	bne.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
				value->uint = (unsigned short)value->uint;
     adc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     ae0:	e7d0      	b.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
		} else if (specifier_cat == SPECIFIER_FP) {
     ae2:	2b04      	cmp	r3, #4
     ae4:	d107      	bne.n	af6 <CONFIG_ISR_STACK_SIZE+0x2f6>
					(sint_value_type)va_arg(ap, long long);
     ae6:	3407      	adds	r4, #7
     ae8:	f024 0407 	bic.w	r4, r4, #7
     aec:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
     af0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     af4:	e7ab      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
		} else if (specifier_cat == SPECIFIER_PTR) {
     af6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     af8:	bf04      	itt	eq
     afa:	f854 3b04 	ldreq.w	r3, [r4], #4
     afe:	930a      	streq	r3, [sp, #40]	; 0x28
     b00:	e7a5      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
		switch (conv->specifier) {
     b02:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     b06:	2878      	cmp	r0, #120	; 0x78
     b08:	d8b0      	bhi.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
     b0a:	2862      	cmp	r0, #98	; 0x62
     b0c:	d822      	bhi.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
     b0e:	2825      	cmp	r0, #37	; 0x25
     b10:	f43f ad91 	beq.w	636 <cbvprintf+0x22>
     b14:	2858      	cmp	r0, #88	; 0x58
     b16:	d1a9      	bne.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b18:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     b1c:	9300      	str	r3, [sp, #0]
     b1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     b22:	ab04      	add	r3, sp, #16
     b24:	aa0c      	add	r2, sp, #48	; 0x30
     b26:	f003 f97f 	bl	3e28 <encode_uint>
     b2a:	4682      	mov	sl, r0
			if (precision >= 0) {
     b2c:	f1b8 0f00 	cmp.w	r8, #0
     b30:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     b34:	db0c      	blt.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
				conv->flag_zero = false;
     b36:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     b3a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     b3e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     b42:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     b44:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     b48:	d902      	bls.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
					conv->pad0_value = precision - (int)len;
     b4a:	eba8 0303 	sub.w	r3, r8, r3
     b4e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     b50:	4680      	mov	r8, r0
     b52:	e03d      	b.n	bd0 <CONFIG_ISR_STACK_SIZE+0x3d0>
     b54:	3863      	subs	r0, #99	; 0x63
     b56:	2815      	cmp	r0, #21
     b58:	d888      	bhi.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
     b5a:	a201      	add	r2, pc, #4	; (adr r2, b60 <CONFIG_ISR_STACK_SIZE+0x360>)
     b5c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     b60:	00000be1 	.word	0x00000be1
     b64:	00000c45 	.word	0x00000c45
     b68:	00000a6d 	.word	0x00000a6d
     b6c:	00000a6d 	.word	0x00000a6d
     b70:	00000a6d 	.word	0x00000a6d
     b74:	00000a6d 	.word	0x00000a6d
     b78:	00000c45 	.word	0x00000c45
     b7c:	00000a6d 	.word	0x00000a6d
     b80:	00000a6d 	.word	0x00000a6d
     b84:	00000a6d 	.word	0x00000a6d
     b88:	00000a6d 	.word	0x00000a6d
     b8c:	00000c9f 	.word	0x00000c9f
     b90:	00000c6d 	.word	0x00000c6d
     b94:	00000c71 	.word	0x00000c71
     b98:	00000a6d 	.word	0x00000a6d
     b9c:	00000a6d 	.word	0x00000a6d
     ba0:	00000bb9 	.word	0x00000bb9
     ba4:	00000a6d 	.word	0x00000a6d
     ba8:	00000c6d 	.word	0x00000c6d
     bac:	00000a6d 	.word	0x00000a6d
     bb0:	00000a6d 	.word	0x00000a6d
     bb4:	00000c6d 	.word	0x00000c6d
			if (precision >= 0) {
     bb8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     bbc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     bc0:	db0a      	blt.n	bd8 <CONFIG_ISR_STACK_SIZE+0x3d8>
				len = strnlen(bps, precision);
     bc2:	4641      	mov	r1, r8
     bc4:	4650      	mov	r0, sl
     bc6:	f003 fa3d 	bl	4044 <strnlen>
			bpe = bps + len;
     bca:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     bce:	2600      	movs	r6, #0
		if (bps == NULL) {
     bd0:	f1ba 0f00 	cmp.w	sl, #0
     bd4:	d10c      	bne.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
     bd6:	e749      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
				len = strlen(bps);
     bd8:	4650      	mov	r0, sl
     bda:	f003 fa2c 	bl	4036 <strlen>
     bde:	e7f4      	b.n	bca <CONFIG_ISR_STACK_SIZE+0x3ca>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     be2:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     be6:	2600      	movs	r6, #0
			bps = buf;
     be8:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
     bec:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     bf0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     bf4:	b106      	cbz	r6, bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
			nj_len += 1U;
     bf6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     bf8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     bfc:	06d0      	lsls	r0, r2, #27
     bfe:	d568      	bpl.n	cd2 <CONFIG_ISR_STACK_SIZE+0x4d2>
			nj_len += 2U;
     c00:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     c02:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     c04:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     c06:	bf48      	it	mi
     c08:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     c0a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     c0c:	bf48      	it	mi
     c0e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     c10:	f1b9 0f00 	cmp.w	r9, #0
     c14:	dd76      	ble.n	d04 <CONFIG_ISR_STACK_SIZE+0x504>
			if (!conv->flag_dash) {
     c16:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     c1a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     c1e:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c22:	9303      	str	r3, [sp, #12]
     c24:	0753      	lsls	r3, r2, #29
     c26:	d46d      	bmi.n	d04 <CONFIG_ISR_STACK_SIZE+0x504>
				if (conv->flag_zero) {
     c28:	0650      	lsls	r0, r2, #25
     c2a:	d561      	bpl.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
					if (sign != 0) {
     c2c:	b146      	cbz	r6, c40 <CONFIG_ISR_STACK_SIZE+0x440>
						OUTC(sign);
     c2e:	9b02      	ldr	r3, [sp, #8]
     c30:	4659      	mov	r1, fp
     c32:	4630      	mov	r0, r6
     c34:	4798      	blx	r3
     c36:	2800      	cmp	r0, #0
     c38:	db57      	blt.n	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
						sign = 0;
     c3a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     c3c:	3501      	adds	r5, #1
						sign = 0;
     c3e:	461e      	mov	r6, r3
					pad = '0';
     c40:	2330      	movs	r3, #48	; 0x30
     c42:	e056      	b.n	cf2 <CONFIG_ISR_STACK_SIZE+0x4f2>
			if (conv->flag_plus) {
     c44:	071e      	lsls	r6, r3, #28
     c46:	d40f      	bmi.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
				sign = ' ';
     c48:	f013 0610 	ands.w	r6, r3, #16
     c4c:	bf18      	it	ne
     c4e:	2620      	movne	r6, #32
			sint = value->sint;
     c50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     c54:	2b00      	cmp	r3, #0
     c56:	f6bf af5f 	bge.w	b18 <CONFIG_ISR_STACK_SIZE+0x318>
				value->uint = (uint_value_type)-sint;
     c5a:	4252      	negs	r2, r2
     c5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     c64:	262d      	movs	r6, #45	; 0x2d
     c66:	e757      	b.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
				sign = '+';
     c68:	262b      	movs	r6, #43	; 0x2b
     c6a:	e7f1      	b.n	c50 <CONFIG_ISR_STACK_SIZE+0x450>
		switch (conv->specifier) {
     c6c:	2600      	movs	r6, #0
     c6e:	e753      	b.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
			if (value->ptr != NULL) {
     c70:	980a      	ldr	r0, [sp, #40]	; 0x28
     c72:	b340      	cbz	r0, cc6 <CONFIG_ISR_STACK_SIZE+0x4c6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c74:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c78:	9300      	str	r3, [sp, #0]
     c7a:	aa0c      	add	r2, sp, #48	; 0x30
     c7c:	ab04      	add	r3, sp, #16
     c7e:	2100      	movs	r1, #0
     c80:	f003 f8d2 	bl	3e28 <encode_uint>
				conv->altform_0c = true;
     c84:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     c88:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c8c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c90:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c94:	4682      	mov	sl, r0
				conv->altform_0c = true;
     c96:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     c9a:	2600      	movs	r6, #0
				goto prec_int_pad0;
     c9c:	e746      	b.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
				store_count(conv, value->ptr, count);
     c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     ca0:	2907      	cmp	r1, #7
     ca2:	f63f aee3 	bhi.w	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
     ca6:	e8df f001 	tbb	[pc, r1]
     caa:	040c      	.short	0x040c
     cac:	08080c06 	.word	0x08080c06
     cb0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     cb2:	701d      	strb	r5, [r3, #0]
		break;
     cb4:	e6da      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
		*(short *)dp = (short)count;
     cb6:	801d      	strh	r5, [r3, #0]
		break;
     cb8:	e6d8      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
		*(intmax_t *)dp = (intmax_t)count;
     cba:	17ea      	asrs	r2, r5, #31
     cbc:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     cc0:	e6d4      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     cc2:	601d      	str	r5, [r3, #0]
		break;
     cc4:	e6d2      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
			bps = "(nil)";
     cc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; d90 <CONFIG_ISR_STACK_SIZE+0x590>
     cca:	4606      	mov	r6, r0
			bpe = bps + 5;
     ccc:	f10a 0805 	add.w	r8, sl, #5
     cd0:	e78e      	b.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
		} else if (conv->altform_0) {
     cd2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     cd4:	bf48      	it	mi
     cd6:	3301      	addmi	r3, #1
     cd8:	e793      	b.n	c02 <CONFIG_ISR_STACK_SIZE+0x402>
					OUTC(pad);
     cda:	4618      	mov	r0, r3
     cdc:	9303      	str	r3, [sp, #12]
     cde:	4659      	mov	r1, fp
     ce0:	9b02      	ldr	r3, [sp, #8]
     ce2:	4798      	blx	r3
     ce4:	2800      	cmp	r0, #0
     ce6:	9b03      	ldr	r3, [sp, #12]
     ce8:	da04      	bge.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
#undef OUTS
#undef OUTC
}
     cea:	b011      	add	sp, #68	; 0x44
     cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     cf0:	2320      	movs	r3, #32
     cf2:	444d      	add	r5, r9
     cf4:	464a      	mov	r2, r9
				while (width-- > 0) {
     cf6:	2a00      	cmp	r2, #0
     cf8:	eba5 0109 	sub.w	r1, r5, r9
     cfc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     d00:	dceb      	bgt.n	cda <CONFIG_ISR_STACK_SIZE+0x4da>
     d02:	460d      	mov	r5, r1
		if (sign != 0) {
     d04:	b136      	cbz	r6, d14 <CONFIG_ISR_STACK_SIZE+0x514>
			OUTC(sign);
     d06:	9b02      	ldr	r3, [sp, #8]
     d08:	4659      	mov	r1, fp
     d0a:	4630      	mov	r0, r6
     d0c:	4798      	blx	r3
     d0e:	2800      	cmp	r0, #0
     d10:	dbeb      	blt.n	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
     d12:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d14:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d18:	06d9      	lsls	r1, r3, #27
     d1a:	d401      	bmi.n	d20 <CONFIG_ISR_STACK_SIZE+0x520>
     d1c:	071a      	lsls	r2, r3, #28
     d1e:	d506      	bpl.n	d2e <CONFIG_ISR_STACK_SIZE+0x52e>
				OUTC('0');
     d20:	9b02      	ldr	r3, [sp, #8]
     d22:	4659      	mov	r1, fp
     d24:	2030      	movs	r0, #48	; 0x30
     d26:	4798      	blx	r3
     d28:	2800      	cmp	r0, #0
     d2a:	dbde      	blt.n	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
     d2c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     d2e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d32:	06db      	lsls	r3, r3, #27
     d34:	d507      	bpl.n	d46 <CONFIG_ISR_STACK_SIZE+0x546>
				OUTC(conv->specifier);
     d36:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     d3a:	9b02      	ldr	r3, [sp, #8]
     d3c:	4659      	mov	r1, fp
     d3e:	4798      	blx	r3
     d40:	2800      	cmp	r0, #0
     d42:	dbd2      	blt.n	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
     d44:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d46:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     d48:	442e      	add	r6, r5
     d4a:	1b73      	subs	r3, r6, r5
     d4c:	2b00      	cmp	r3, #0
     d4e:	dc16      	bgt.n	d7e <CONFIG_ISR_STACK_SIZE+0x57e>
			OUTS(bps, bpe);
     d50:	9802      	ldr	r0, [sp, #8]
     d52:	4643      	mov	r3, r8
     d54:	4652      	mov	r2, sl
     d56:	4659      	mov	r1, fp
     d58:	f003 f8ac 	bl	3eb4 <outs>
     d5c:	2800      	cmp	r0, #0
     d5e:	dbc4      	blt.n	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
     d60:	4405      	add	r5, r0
		while (width > 0) {
     d62:	44a9      	add	r9, r5
     d64:	eba9 0305 	sub.w	r3, r9, r5
     d68:	2b00      	cmp	r3, #0
     d6a:	f77f ae7f 	ble.w	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
			OUTC(' ');
     d6e:	9b02      	ldr	r3, [sp, #8]
     d70:	4659      	mov	r1, fp
     d72:	2020      	movs	r0, #32
     d74:	4798      	blx	r3
     d76:	2800      	cmp	r0, #0
     d78:	dbb7      	blt.n	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
     d7a:	3501      	adds	r5, #1
			--width;
     d7c:	e7f2      	b.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
				OUTC('0');
     d7e:	9b02      	ldr	r3, [sp, #8]
     d80:	4659      	mov	r1, fp
     d82:	2030      	movs	r0, #48	; 0x30
     d84:	4798      	blx	r3
     d86:	2800      	cmp	r0, #0
     d88:	dbaf      	blt.n	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
     d8a:	3501      	adds	r5, #1
     d8c:	e7dd      	b.n	d4a <CONFIG_ISR_STACK_SIZE+0x54a>
     d8e:	bf00      	nop
     d90:	00004a13 	.word	0x00004a13

00000d94 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d96:	4605      	mov	r5, r0
     d98:	f04f 0320 	mov.w	r3, #32
     d9c:	f3ef 8611 	mrs	r6, BASEPRI
     da0:	f383 8811 	msr	BASEPRI, r3
     da4:	f3bf 8f6f 	isb	sy
	return list->head;
     da8:	4b09      	ldr	r3, [pc, #36]	; (dd0 <pm_state_notify+0x3c>)
     daa:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     dac:	b15c      	cbz	r4, dc6 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
     dae:	4f09      	ldr	r7, [pc, #36]	; (dd4 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
     db0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     db4:	2d00      	cmp	r5, #0
     db6:	bf08      	it	eq
     db8:	4613      	moveq	r3, r2
		if (callback) {
     dba:	b10b      	cbz	r3, dc0 <pm_state_notify+0x2c>
			callback(z_power_state.state);
     dbc:	7838      	ldrb	r0, [r7, #0]
     dbe:	4798      	blx	r3
	return node->next;
     dc0:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     dc2:	2c00      	cmp	r4, #0
     dc4:	d1f4      	bne.n	db0 <pm_state_notify+0x1c>
	__asm__ volatile(
     dc6:	f386 8811 	msr	BASEPRI, r6
     dca:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dd0:	20000218 	.word	0x20000218
     dd4:	20000220 	.word	0x20000220

00000dd8 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
     dd8:	4b08      	ldr	r3, [pc, #32]	; (dfc <pm_system_resume+0x24>)
{
     dda:	b510      	push	{r4, lr}
	if (!post_ops_done) {
     ddc:	681c      	ldr	r4, [r3, #0]
     dde:	b95c      	cbnz	r4, df8 <pm_system_resume+0x20>
		post_ops_done = 1;
     de0:	2201      	movs	r2, #1
     de2:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
     de4:	4b06      	ldr	r3, [pc, #24]	; (e00 <pm_system_resume+0x28>)
     de6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     dea:	f003 f9a6 	bl	413a <pm_power_state_exit_post_ops>
		pm_state_notify(false);
     dee:	4620      	mov	r0, r4
	}
}
     df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
     df4:	f7ff bfce 	b.w	d94 <pm_state_notify>
}
     df8:	bd10      	pop	{r4, pc}
     dfa:	bf00      	nop
     dfc:	20000004 	.word	0x20000004
     e00:	20000220 	.word	0x20000220

00000e04 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
     e04:	b5f0      	push	{r4, r5, r6, r7, lr}
     e06:	b085      	sub	sp, #20
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
     e08:	466e      	mov	r6, sp
     e0a:	4601      	mov	r1, r0
{
     e0c:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
     e0e:	4630      	mov	r0, r6
     e10:	f003 f867 	bl	3ee2 <pm_policy_next_state>
     e14:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     e18:	4c14      	ldr	r4, [pc, #80]	; (e6c <pm_system_suspend+0x68>)
     e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
     e1e:	7820      	ldrb	r0, [r4, #0]
     e20:	4627      	mov	r7, r4
     e22:	b300      	cbz	r0, e66 <pm_system_suspend+0x62>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
     e24:	4b12      	ldr	r3, [pc, #72]	; (e70 <pm_system_suspend+0x6c>)
     e26:	2100      	movs	r1, #0
     e28:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
     e2a:	1c6b      	adds	r3, r5, #1
     e2c:	d00d      	beq.n	e4a <pm_system_suspend+0x46>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     e2e:	4811      	ldr	r0, [pc, #68]	; (e74 <pm_system_suspend+0x70>)
     e30:	4616      	mov	r6, r2
     e32:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
     e36:	4a10      	ldr	r2, [pc, #64]	; (e78 <pm_system_suspend+0x74>)
     e38:	2300      	movs	r3, #0
     e3a:	fbe6 010c 	umlal	r0, r1, r6, ip
     e3e:	f7ff f95f 	bl	100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
     e42:	2101      	movs	r1, #1
     e44:	1a28      	subs	r0, r5, r0
     e46:	f003 fc15 	bl	4674 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     e4a:	f002 fb03 	bl	3454 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
     e4e:	2001      	movs	r0, #1
     e50:	f7ff ffa0 	bl	d94 <pm_state_notify>
	pm_power_state_set(z_power_state);
     e54:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
     e58:	f003 f95c 	bl	4114 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
     e5c:	f7ff ffbc 	bl	dd8 <pm_system_resume>
	k_sched_unlock();
     e60:	f002 fbb0 	bl	35c4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
     e64:	7820      	ldrb	r0, [r4, #0]
}
     e66:	b005      	add	sp, #20
     e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e6a:	bf00      	nop
     e6c:	20000220 	.word	0x20000220
     e70:	20000004 	.word	0x20000004
     e74:	000f423f 	.word	0x000f423f
     e78:	000f4240 	.word	0x000f4240

00000e7c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
     e7c:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     e7e:	4807      	ldr	r0, [pc, #28]	; (e9c <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
     e80:	4c07      	ldr	r4, [pc, #28]	; (ea0 <uart_console_init+0x24>)
     e82:	f002 f8cf 	bl	3024 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     e86:	4b07      	ldr	r3, [pc, #28]	; (ea4 <uart_console_init+0x28>)
     e88:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     e8a:	4620      	mov	r0, r4
     e8c:	f000 fd46 	bl	191c <__stdout_hook_install>
	__printk_hook_install(console_out);
     e90:	4620      	mov	r0, r4
     e92:	f7ff facb 	bl	42c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
     e96:	2000      	movs	r0, #0
     e98:	bd10      	pop	{r4, pc}
     e9a:	bf00      	nop
     e9c:	00004a19 	.word	0x00004a19
     ea0:	00000ea9 	.word	0x00000ea9
     ea4:	2000022c 	.word	0x2000022c

00000ea8 <console_out>:
	if ('\n' == c) {
     ea8:	280a      	cmp	r0, #10
{
     eaa:	b538      	push	{r3, r4, r5, lr}
     eac:	4d07      	ldr	r5, [pc, #28]	; (ecc <console_out+0x24>)
     eae:	4604      	mov	r4, r0
	if ('\n' == c) {
     eb0:	d104      	bne.n	ebc <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
     eb2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
     eb4:	6883      	ldr	r3, [r0, #8]
     eb6:	210d      	movs	r1, #13
     eb8:	685b      	ldr	r3, [r3, #4]
     eba:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     ebc:	6828      	ldr	r0, [r5, #0]
     ebe:	6883      	ldr	r3, [r0, #8]
     ec0:	b2e1      	uxtb	r1, r4
     ec2:	685b      	ldr	r3, [r3, #4]
     ec4:	4798      	blx	r3
}
     ec6:	4620      	mov	r0, r4
     ec8:	bd38      	pop	{r3, r4, r5, pc}
     eca:	bf00      	nop
     ecc:	2000022c 	.word	0x2000022c

00000ed0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
     ed0:	4b08      	ldr	r3, [pc, #32]	; (ef4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     ed2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     ed4:	1ac3      	subs	r3, r0, r3
{
     ed6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
     ed8:	4907      	ldr	r1, [pc, #28]	; (ef8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
     eda:	109b      	asrs	r3, r3, #2
{
     edc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
     ede:	4359      	muls	r1, r3
     ee0:	4806      	ldr	r0, [pc, #24]	; (efc <onoff_stop+0x2c>)
     ee2:	2240      	movs	r2, #64	; 0x40
     ee4:	f003 f81e 	bl	3f24 <stop>
	notify(mgr, res);
     ee8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
     eea:	4601      	mov	r1, r0
	notify(mgr, res);
     eec:	4620      	mov	r0, r4
}
     eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
     ef2:	4718      	bx	r3
     ef4:	20000244 	.word	0x20000244
     ef8:	b6db6db7 	.word	0xb6db6db7
     efc:	20000064 	.word	0x20000064

00000f00 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     f00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     f02:	4c0c      	ldr	r4, [pc, #48]	; (f34 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
     f04:	4a0c      	ldr	r2, [pc, #48]	; (f38 <onoff_start+0x38>)
     f06:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
     f08:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
     f0a:	9300      	str	r3, [sp, #0]
{
     f0c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
     f0e:	460b      	mov	r3, r1
     f10:	490a      	ldr	r1, [pc, #40]	; (f3c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
     f12:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
     f14:	4361      	muls	r1, r4
{
     f16:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
     f18:	4809      	ldr	r0, [pc, #36]	; (f40 <onoff_start+0x40>)
     f1a:	f003 f82f 	bl	3f7c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
     f1e:	1e01      	subs	r1, r0, #0
     f20:	da05      	bge.n	f2e <onoff_start+0x2e>
		notify(mgr, err);
     f22:	4630      	mov	r0, r6
     f24:	462b      	mov	r3, r5
	}
}
     f26:	b002      	add	sp, #8
     f28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
     f2c:	4718      	bx	r3
}
     f2e:	b002      	add	sp, #8
     f30:	bd70      	pop	{r4, r5, r6, pc}
     f32:	bf00      	nop
     f34:	20000244 	.word	0x20000244
     f38:	00003fed 	.word	0x00003fed
     f3c:	b6db6db7 	.word	0xb6db6db7
     f40:	20000064 	.word	0x20000064

00000f44 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     f44:	2200      	movs	r2, #0
{
     f46:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     f48:	2101      	movs	r1, #1
{
     f4a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     f4c:	4610      	mov	r0, r2
     f4e:	f000 fa83 	bl	1458 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
     f52:	2000      	movs	r0, #0
     f54:	f000 fa62 	bl	141c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
     f58:	480f      	ldr	r0, [pc, #60]	; (f98 <clk_init+0x54>)
     f5a:	f001 fc0d 	bl	2778 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
     f5e:	4b0f      	ldr	r3, [pc, #60]	; (f9c <clk_init+0x58>)
     f60:	4298      	cmp	r0, r3
     f62:	d115      	bne.n	f90 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
     f64:	f003 fa0c 	bl	4380 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
     f68:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
     f6a:	490d      	ldr	r1, [pc, #52]	; (fa0 <clk_init+0x5c>)
     f6c:	4630      	mov	r0, r6
     f6e:	f002 fef5 	bl	3d5c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
     f72:	2800      	cmp	r0, #0
     f74:	db0b      	blt.n	f8e <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
     f76:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
     f78:	4909      	ldr	r1, [pc, #36]	; (fa0 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     f7a:	2501      	movs	r5, #1
     f7c:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
     f7e:	f104 001c 	add.w	r0, r4, #28
     f82:	f002 feeb 	bl	3d5c <onoff_manager_init>
		if (err < 0) {
     f86:	2800      	cmp	r0, #0
     f88:	db01      	blt.n	f8e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     f8a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
     f8c:	2000      	movs	r0, #0
}
     f8e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
     f90:	f06f 0004 	mvn.w	r0, #4
     f94:	e7fb      	b.n	f8e <clk_init+0x4a>
     f96:	bf00      	nop
     f98:	00000fd9 	.word	0x00000fd9
     f9c:	0bad0000 	.word	0x0bad0000
     fa0:	0000490c 	.word	0x0000490c

00000fa4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
     fa4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
     fa6:	230c      	movs	r3, #12
     fa8:	4809      	ldr	r0, [pc, #36]	; (fd0 <clkstarted_handle.constprop.0+0x2c>)
     faa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
     fac:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
     fae:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
     fb0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
     fb4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
     fb6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
     fb8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
     fba:	4418      	add	r0, r3
     fbc:	f002 ff9f 	bl	3efe <set_on_state>
	if (callback) {
     fc0:	b12d      	cbz	r5, fce <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
     fc2:	4632      	mov	r2, r6
     fc4:	462b      	mov	r3, r5
     fc6:	4803      	ldr	r0, [pc, #12]	; (fd4 <clkstarted_handle.constprop.0+0x30>)
}
     fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
     fcc:	4718      	bx	r3
}
     fce:	bd70      	pop	{r4, r5, r6, pc}
     fd0:	20000244 	.word	0x20000244
     fd4:	20000064 	.word	0x20000064

00000fd8 <clock_event_handler>:
	switch (event) {
     fd8:	b110      	cbz	r0, fe0 <clock_event_handler+0x8>
     fda:	2801      	cmp	r0, #1
     fdc:	d004      	beq.n	fe8 <clock_event_handler+0x10>
     fde:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
     fe0:	4b03      	ldr	r3, [pc, #12]	; (ff0 <clock_event_handler+0x18>)
     fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     fe4:	075b      	lsls	r3, r3, #29
     fe6:	d101      	bne.n	fec <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     fe8:	f7ff bfdc 	b.w	fa4 <clkstarted_handle.constprop.0>
}
     fec:	4770      	bx	lr
     fee:	bf00      	nop
     ff0:	20000244 	.word	0x20000244

00000ff4 <generic_hfclk_start>:
{
     ff4:	b508      	push	{r3, lr}
	__asm__ volatile(
     ff6:	f04f 0320 	mov.w	r3, #32
     ffa:	f3ef 8111 	mrs	r1, BASEPRI
     ffe:	f383 8811 	msr	BASEPRI, r3
    1002:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1006:	4a12      	ldr	r2, [pc, #72]	; (1050 <generic_hfclk_start+0x5c>)
    1008:	6813      	ldr	r3, [r2, #0]
    100a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    100e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1012:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1014:	d00c      	beq.n	1030 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1016:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    101a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    101e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1022:	f013 0301 	ands.w	r3, r3, #1
    1026:	d003      	beq.n	1030 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1028:	480a      	ldr	r0, [pc, #40]	; (1054 <generic_hfclk_start+0x60>)
    102a:	f002 ff68 	bl	3efe <set_on_state>
			already_started = true;
    102e:	2301      	movs	r3, #1
	__asm__ volatile(
    1030:	f381 8811 	msr	BASEPRI, r1
    1034:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1038:	b123      	cbz	r3, 1044 <generic_hfclk_start+0x50>
}
    103a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    103e:	2000      	movs	r0, #0
    1040:	f7ff bfb0 	b.w	fa4 <clkstarted_handle.constprop.0>
}
    1044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1048:	2001      	movs	r0, #1
    104a:	f003 b9a3 	b.w	4394 <nrfx_clock_start>
    104e:	bf00      	nop
    1050:	20000294 	.word	0x20000294
    1054:	20000284 	.word	0x20000284

00001058 <api_blocking_start>:
{
    1058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    105a:	2200      	movs	r2, #0
    105c:	2301      	movs	r3, #1
    105e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1062:	4a09      	ldr	r2, [pc, #36]	; (1088 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1064:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1068:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    106a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    106e:	f002 ffb6 	bl	3fde <api_start>
	if (err < 0) {
    1072:	2800      	cmp	r0, #0
    1074:	db05      	blt.n	1082 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1076:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    107a:	2300      	movs	r3, #0
    107c:	4668      	mov	r0, sp
    107e:	f002 f969 	bl	3354 <z_impl_k_sem_take>
}
    1082:	b005      	add	sp, #20
    1084:	f85d fb04 	ldr.w	pc, [sp], #4
    1088:	0000400b 	.word	0x0000400b

0000108c <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    108c:	4b09      	ldr	r3, [pc, #36]	; (10b4 <generic_hfclk_stop+0x28>)
    108e:	f3bf 8f5b 	dmb	ish
    1092:	e853 2f00 	ldrex	r2, [r3]
    1096:	f022 0102 	bic.w	r1, r2, #2
    109a:	e843 1000 	strex	r0, r1, [r3]
    109e:	2800      	cmp	r0, #0
    10a0:	d1f7      	bne.n	1092 <generic_hfclk_stop+0x6>
    10a2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    10a6:	07d3      	lsls	r3, r2, #31
    10a8:	d402      	bmi.n	10b0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    10aa:	2001      	movs	r0, #1
    10ac:	f001 bb74 	b.w	2798 <nrfx_clock_stop>
}
    10b0:	4770      	bx	lr
    10b2:	bf00      	nop
    10b4:	20000294 	.word	0x20000294

000010b8 <z_nrf_clock_control_lf_on>:
{
    10b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    10bc:	4939      	ldr	r1, [pc, #228]	; (11a4 <z_nrf_clock_control_lf_on+0xec>)
    10be:	f3bf 8f5b 	dmb	ish
    10c2:	4607      	mov	r7, r0
    10c4:	2201      	movs	r2, #1
    10c6:	e851 3f00 	ldrex	r3, [r1]
    10ca:	e841 2000 	strex	r0, r2, [r1]
    10ce:	2800      	cmp	r0, #0
    10d0:	d1f9      	bne.n	10c6 <z_nrf_clock_control_lf_on+0xe>
    10d2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    10d6:	b933      	cbnz	r3, 10e6 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    10d8:	4933      	ldr	r1, [pc, #204]	; (11a8 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    10da:	4834      	ldr	r0, [pc, #208]	; (11ac <z_nrf_clock_control_lf_on+0xf4>)
    10dc:	604b      	str	r3, [r1, #4]
    10de:	60cb      	str	r3, [r1, #12]
    10e0:	608a      	str	r2, [r1, #8]
    10e2:	f002 fe4e 	bl	3d82 <onoff_request>
	switch (start_mode) {
    10e6:	1e7b      	subs	r3, r7, #1
    10e8:	2b01      	cmp	r3, #1
    10ea:	d82f      	bhi.n	114c <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    10ec:	2f01      	cmp	r7, #1
    10ee:	d107      	bne.n	1100 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    10f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    10f4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    10f8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    10fc:	2b01      	cmp	r3, #1
    10fe:	d025      	beq.n	114c <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1100:	f003 f9e3 	bl	44ca <k_is_in_isr>
    1104:	4604      	mov	r4, r0
    1106:	b918      	cbnz	r0, 1110 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1108:	4b29      	ldr	r3, [pc, #164]	; (11b0 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    110a:	781b      	ldrb	r3, [r3, #0]
    110c:	2b00      	cmp	r3, #0
    110e:	d141      	bne.n	1194 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    1110:	f04f 0320 	mov.w	r3, #32
    1114:	f3ef 8611 	mrs	r6, BASEPRI
    1118:	f383 8811 	msr	BASEPRI, r3
    111c:	f3bf 8f6f 	isb	sy
    1120:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1122:	f8df 8090 	ldr.w	r8, [pc, #144]	; 11b4 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1126:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    112a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    112e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    1132:	03d2      	lsls	r2, r2, #15
    1134:	d50c      	bpl.n	1150 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1136:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    113a:	2b01      	cmp	r3, #1
    113c:	d001      	beq.n	1142 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    113e:	2f01      	cmp	r7, #1
    1140:	d106      	bne.n	1150 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    1142:	b30c      	cbz	r4, 1188 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    1144:	f386 8811 	msr	BASEPRI, r6
    1148:	f3bf 8f6f 	isb	sy
}
    114c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1150:	b1ac      	cbz	r4, 117e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1152:	4630      	mov	r0, r6
    1154:	f000 f9da 	bl	150c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1158:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    115c:	2b00      	cmp	r3, #0
    115e:	d1e4      	bne.n	112a <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1160:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1164:	2a00      	cmp	r2, #0
    1166:	d0e0      	beq.n	112a <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1168:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    116c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1170:	2301      	movs	r3, #1
    1172:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    1176:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    117a:	60ab      	str	r3, [r5, #8]
}
    117c:	e7d5      	b.n	112a <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    117e:	2100      	movs	r1, #0
    1180:	2021      	movs	r0, #33	; 0x21
    1182:	f002 fb9d 	bl	38c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1186:	e7e7      	b.n	1158 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    1188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    118c:	2202      	movs	r2, #2
    118e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1192:	e7db      	b.n	114c <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    1194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1198:	2202      	movs	r2, #2
    119a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    119e:	4606      	mov	r6, r0
}
    11a0:	e7bf      	b.n	1122 <z_nrf_clock_control_lf_on+0x6a>
    11a2:	bf00      	nop
    11a4:	20000298 	.word	0x20000298
    11a8:	20000234 	.word	0x20000234
    11ac:	20000260 	.word	0x20000260
    11b0:	200003e2 	.word	0x200003e2
    11b4:	e000e100 	.word	0xe000e100

000011b8 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    11b8:	4a04      	ldr	r2, [pc, #16]	; (11cc <sys_clock_timeout_handler+0x14>)
    11ba:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    11bc:	1ac8      	subs	r0, r1, r3
    11be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    11c2:	4403      	add	r3, r0
    11c4:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    11c6:	f002 bccd 	b.w	3b64 <sys_clock_announce>
    11ca:	bf00      	nop
    11cc:	200002ac 	.word	0x200002ac

000011d0 <set_absolute_alarm>:
{
    11d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    11d4:	0086      	lsls	r6, r0, #2
    11d6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    11da:	f100 0450 	add.w	r4, r0, #80	; 0x50
    11de:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    11e2:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    11e4:	b2a4      	uxth	r4, r4
    11e6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    11ea:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    11ee:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    11f2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1260 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    11f6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    11fa:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    11fe:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    1200:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1204:	eba3 0309 	sub.w	r3, r3, r9
    1208:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    120c:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    1210:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    1212:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    1216:	d102      	bne.n	121e <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    1218:	2013      	movs	r0, #19
    121a:	f003 fa49 	bl	46b0 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    121e:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    1222:	1aab      	subs	r3, r5, r2
    1224:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    1228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    122c:	bf88      	it	hi
    122e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1230:	2300      	movs	r3, #0
    1232:	6023      	str	r3, [r4, #0]
    1234:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1236:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    123a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    123e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1242:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    1246:	4599      	cmp	r9, r3
    1248:	d006      	beq.n	1258 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    124a:	1aeb      	subs	r3, r5, r3
    124c:	3b02      	subs	r3, #2
    124e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1252:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1256:	d801      	bhi.n	125c <set_absolute_alarm+0x8c>
}
    1258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    125c:	462b      	mov	r3, r5
    125e:	e7cf      	b.n	1200 <set_absolute_alarm+0x30>
    1260:	40011000 	.word	0x40011000

00001264 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1266:	2500      	movs	r5, #0
    return p_reg->INTENSET & mask;
    1268:	4c10      	ldr	r4, [pc, #64]	; (12ac <rtc_nrf_isr+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    126a:	462f      	mov	r7, r5
    126c:	4b10      	ldr	r3, [pc, #64]	; (12b0 <rtc_nrf_isr+0x4c>)
    126e:	681e      	ldr	r6, [r3, #0]
    1270:	b105      	cbz	r5, 1274 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    1272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    1274:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    1278:	03d2      	lsls	r2, r2, #15
    127a:	d5fa      	bpl.n	1272 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    127c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    1280:	2a00      	cmp	r2, #0
    1282:	d0f6      	beq.n	1272 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1284:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    1288:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    128c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1290:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    1294:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1298:	2501      	movs	r5, #1
			if (handler) {
    129a:	b126      	cbz	r6, 12a6 <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    129c:	685a      	ldr	r2, [r3, #4]
    129e:	601f      	str	r7, [r3, #0]
    12a0:	2000      	movs	r0, #0
    12a2:	47b0      	blx	r6
    12a4:	e7e2      	b.n	126c <rtc_nrf_isr+0x8>
    12a6:	601e      	str	r6, [r3, #0]
}
    12a8:	e7e3      	b.n	1272 <rtc_nrf_isr+0xe>
    12aa:	bf00      	nop
    12ac:	40011000 	.word	0x40011000
    12b0:	200002a0 	.word	0x200002a0

000012b4 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    12b4:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    12b6:	4c0f      	ldr	r4, [pc, #60]	; (12f4 <sys_clock_driver_init+0x40>)
    12b8:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    12ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    12be:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    12c2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    12c6:	4b0c      	ldr	r3, [pc, #48]	; (12f8 <sys_clock_driver_init+0x44>)
    12c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    12cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    12d0:	2101      	movs	r1, #1
    12d2:	462a      	mov	r2, r5
    12d4:	2011      	movs	r0, #17
    12d6:	f000 f8bf 	bl	1458 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    12da:	2011      	movs	r0, #17
    12dc:	f000 f89e 	bl	141c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12e0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    12e2:	4a06      	ldr	r2, [pc, #24]	; (12fc <sys_clock_driver_init+0x48>)
    12e4:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    12e6:	2002      	movs	r0, #2
    12e8:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    12ea:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    12ec:	f7ff fee4 	bl	10b8 <z_nrf_clock_control_lf_on>

	return 0;
}
    12f0:	4628      	mov	r0, r5
    12f2:	bd38      	pop	{r3, r4, r5, pc}
    12f4:	40011000 	.word	0x40011000
    12f8:	e000e100 	.word	0xe000e100
    12fc:	200002a8 	.word	0x200002a8

00001300 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1300:	4a13      	ldr	r2, [pc, #76]	; (1350 <sys_clock_set_timeout+0x50>)
    1302:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1306:	bf14      	ite	ne
    1308:	4603      	movne	r3, r0
    130a:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    130c:	3b01      	subs	r3, #1
    130e:	2b00      	cmp	r3, #0
    1310:	dd1c      	ble.n	134c <sys_clock_set_timeout+0x4c>
    1312:	4293      	cmp	r3, r2
    1314:	bfa8      	it	ge
    1316:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    1318:	4a0e      	ldr	r2, [pc, #56]	; (1354 <sys_clock_set_timeout+0x54>)
    131a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    131e:	4a0e      	ldr	r2, [pc, #56]	; (1358 <sys_clock_set_timeout+0x58>)
    1320:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1322:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1324:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    1328:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    132c:	bf18      	it	ne
    132e:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1330:	3201      	adds	r2, #1
    1332:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    1334:	4a09      	ldr	r2, [pc, #36]	; (135c <sys_clock_set_timeout+0x5c>)
    1336:	480a      	ldr	r0, [pc, #40]	; (1360 <sys_clock_set_timeout+0x60>)
    1338:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    133a:	2000      	movs	r0, #0
    133c:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    133e:	4a04      	ldr	r2, [pc, #16]	; (1350 <sys_clock_set_timeout+0x50>)
    1340:	4293      	cmp	r3, r2
    1342:	bf94      	ite	ls
    1344:	18c9      	addls	r1, r1, r3
    1346:	1889      	addhi	r1, r1, r2
    1348:	f7ff bf42 	b.w	11d0 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    134c:	2300      	movs	r3, #0
    134e:	e7e3      	b.n	1318 <sys_clock_set_timeout+0x18>
    1350:	007fffff 	.word	0x007fffff
    1354:	40011000 	.word	0x40011000
    1358:	200002ac 	.word	0x200002ac
    135c:	200002a0 	.word	0x200002a0
    1360:	000011b9 	.word	0x000011b9

00001364 <sys_clock_elapsed>:
    1364:	4b04      	ldr	r3, [pc, #16]	; (1378 <sys_clock_elapsed+0x14>)
    1366:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    136a:	4b04      	ldr	r3, [pc, #16]	; (137c <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    136c:	681b      	ldr	r3, [r3, #0]
    136e:	1ac0      	subs	r0, r0, r3
}
    1370:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1374:	4770      	bx	lr
    1376:	bf00      	nop
    1378:	40011000 	.word	0x40011000
    137c:	200002ac 	.word	0x200002ac

00001380 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1380:	4a09      	ldr	r2, [pc, #36]	; (13a8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1382:	490a      	ldr	r1, [pc, #40]	; (13ac <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1384:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1386:	6809      	ldr	r1, [r1, #0]
    1388:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    138a:	4909      	ldr	r1, [pc, #36]	; (13b0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    138c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    138e:	684b      	ldr	r3, [r1, #4]
    1390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1394:	604b      	str	r3, [r1, #4]
    1396:	2300      	movs	r3, #0
    1398:	f383 8811 	msr	BASEPRI, r3
    139c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    13a0:	6893      	ldr	r3, [r2, #8]
}
    13a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop
    13a8:	200003a0 	.word	0x200003a0
    13ac:	000049f0 	.word	0x000049f0
    13b0:	e000ed00 	.word	0xe000ed00

000013b4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    13b4:	490f      	ldr	r1, [pc, #60]	; (13f4 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    13b6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    13b8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    13bc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    13be:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    13c2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    13c6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    13c8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    13cc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    13d0:	4f09      	ldr	r7, [pc, #36]	; (13f8 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    13d2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    13d6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    13d8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    13da:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    13dc:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    13de:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    13e0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    13e2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    13e6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    13ea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    13ee:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    13f2:	4770      	bx	lr
    ldr r1, =_kernel
    13f4:	200003a0 	.word	0x200003a0
    ldr v4, =_SCS_ICSR
    13f8:	e000ed04 	.word	0xe000ed04

000013fc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    13fc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1400:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1402:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1406:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    140a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    140c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1410:	2902      	cmp	r1, #2
    beq _oops
    1412:	d0ff      	beq.n	1414 <_oops>

00001414 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1414:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1416:	f002 fe03 	bl	4020 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    141a:	bd01      	pop	{r0, pc}

0000141c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    141c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    141e:	2b00      	cmp	r3, #0
    1420:	db08      	blt.n	1434 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1422:	2201      	movs	r2, #1
    1424:	f000 001f 	and.w	r0, r0, #31
    1428:	fa02 f000 	lsl.w	r0, r2, r0
    142c:	095b      	lsrs	r3, r3, #5
    142e:	4a02      	ldr	r2, [pc, #8]	; (1438 <arch_irq_enable+0x1c>)
    1430:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1434:	4770      	bx	lr
    1436:	bf00      	nop
    1438:	e000e100 	.word	0xe000e100

0000143c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    143c:	4b05      	ldr	r3, [pc, #20]	; (1454 <arch_irq_is_enabled+0x18>)
    143e:	0942      	lsrs	r2, r0, #5
    1440:	f000 001f 	and.w	r0, r0, #31
    1444:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1448:	2301      	movs	r3, #1
    144a:	fa03 f000 	lsl.w	r0, r3, r0
}
    144e:	4010      	ands	r0, r2
    1450:	4770      	bx	lr
    1452:	bf00      	nop
    1454:	e000e100 	.word	0xe000e100

00001458 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1458:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    145a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    145c:	bfa8      	it	ge
    145e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1462:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1466:	bfb8      	it	lt
    1468:	4b06      	ldrlt	r3, [pc, #24]	; (1484 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    146a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    146e:	bfac      	ite	ge
    1470:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1474:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1478:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    147a:	bfb4      	ite	lt
    147c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    147e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1482:	4770      	bx	lr
    1484:	e000ed14 	.word	0xe000ed14

00001488 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1488:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    148c:	9b00      	ldr	r3, [sp, #0]
    148e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1492:	490a      	ldr	r1, [pc, #40]	; (14bc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1494:	9b01      	ldr	r3, [sp, #4]
    1496:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    149a:	9b02      	ldr	r3, [sp, #8]
    149c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    14a0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    14a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    14a8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    14ac:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    14b0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    14b2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    14b4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    14b6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    14b8:	4770      	bx	lr
    14ba:	bf00      	nop
    14bc:	00003e15 	.word	0x00003e15

000014c0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    14c0:	4b07      	ldr	r3, [pc, #28]	; (14e0 <arch_switch_to_main_thread+0x20>)
    14c2:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    14c4:	4610      	mov	r0, r2
    14c6:	f381 8809 	msr	PSP, r1
    14ca:	2100      	movs	r1, #0
    14cc:	b663      	cpsie	if
    14ce:	f381 8811 	msr	BASEPRI, r1
    14d2:	f3bf 8f6f 	isb	sy
    14d6:	2200      	movs	r2, #0
    14d8:	2300      	movs	r3, #0
    14da:	f002 fc9b 	bl	3e14 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    14de:	bf00      	nop
    14e0:	200003a0 	.word	0x200003a0

000014e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    14e4:	4901      	ldr	r1, [pc, #4]	; (14ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    14e6:	2210      	movs	r2, #16
	str	r2, [r1]
    14e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    14ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    14ec:	e000ed10 	.word	0xe000ed10

000014f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    14f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    14f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    14f4:	f380 8811 	msr	BASEPRI, r0
	isb
    14f8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    14fc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1500:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1502:	b662      	cpsie	i
	isb
    1504:	f3bf 8f6f 	isb	sy

	bx	lr
    1508:	4770      	bx	lr
    150a:	bf00      	nop

0000150c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    150c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    150e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1510:	f381 8811 	msr	BASEPRI, r1

	wfe
    1514:	bf20      	wfe

	msr	BASEPRI, r0
    1516:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    151a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    151c:	4770      	bx	lr
    151e:	bf00      	nop

00001520 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1520:	bf30      	wfi
    b z_SysNmiOnReset
    1522:	f7ff bffd 	b.w	1520 <z_SysNmiOnReset>
    1526:	bf00      	nop

00001528 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1528:	4a0e      	ldr	r2, [pc, #56]	; (1564 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    152a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    152c:	4b0e      	ldr	r3, [pc, #56]	; (1568 <z_arm_prep_c+0x40>)
    152e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1532:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1534:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1538:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    153c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1540:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1548:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    154c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1550:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1554:	f001 fd90 	bl	3078 <z_bss_zero>
	z_data_copy();
    1558:	f002 fa24 	bl	39a4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    155c:	f000 f922 	bl	17a4 <z_arm_interrupt_init>
	z_cstart();
    1560:	f001 fdae 	bl	30c0 <z_cstart>
    1564:	00000000 	.word	0x00000000
    1568:	e000ed00 	.word	0xe000ed00

0000156c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    156c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    156e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1570:	4a0b      	ldr	r2, [pc, #44]	; (15a0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1572:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1574:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1576:	bf1e      	ittt	ne
	movne	r1, #0
    1578:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    157a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    157c:	f002 ffab 	blne	44d6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1580:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1582:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1586:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    158a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    158e:	4905      	ldr	r1, [pc, #20]	; (15a4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1590:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1592:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1594:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1596:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    159a:	4903      	ldr	r1, [pc, #12]	; (15a8 <_isr_wrapper+0x3c>)
	bx r1
    159c:	4708      	bx	r1
    159e:	0000      	.short	0x0000
	ldr r2, =_kernel
    15a0:	200003a0 	.word	0x200003a0
	ldr r1, =_sw_isr_table
    15a4:	00004714 	.word	0x00004714
	ldr r1, =z_arm_int_exit
    15a8:	00001789 	.word	0x00001789

000015ac <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    15ac:	f002 fdb0 	bl	4110 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    15b0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    15b2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    15b6:	4808      	ldr	r0, [pc, #32]	; (15d8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    15b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    15bc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    15be:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    15c2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    15c6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    15c8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    15ca:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    15ce:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    15d2:	f7ff ffa9 	bl	1528 <z_arm_prep_c>
    15d6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    15d8:	20000928 	.word	0x20000928

000015dc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    15dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    15e0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    15e4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    15e6:	4672      	mov	r2, lr
	bl z_arm_fault
    15e8:	f000 f840 	bl	166c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    15ec:	bd01      	pop	{r0, pc}
    15ee:	bf00      	nop

000015f0 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    15f0:	4b0d      	ldr	r3, [pc, #52]	; (1628 <bus_fault.constprop.0+0x38>)
    15f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    15f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    15f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15f8:	0592      	lsls	r2, r2, #22
    15fa:	d508      	bpl.n	160e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    15fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    15fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1600:	0412      	lsls	r2, r2, #16
    1602:	d504      	bpl.n	160e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1604:	b118      	cbz	r0, 160e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1608:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    160c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    160e:	4b06      	ldr	r3, [pc, #24]	; (1628 <bus_fault.constprop.0+0x38>)
    1610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1614:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1616:	bf58      	it	pl
    1618:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    161a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    161c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    161e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1622:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1624:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1626:	4770      	bx	lr
    1628:	e000ed00 	.word	0xe000ed00

0000162c <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    162c:	4b0e      	ldr	r3, [pc, #56]	; (1668 <mem_manage_fault.constprop.0+0x3c>)
    162e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1634:	0792      	lsls	r2, r2, #30
    1636:	d508      	bpl.n	164a <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    1638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    163a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    163c:	0612      	lsls	r2, r2, #24
    163e:	d504      	bpl.n	164a <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    1640:	b118      	cbz	r0, 164a <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1648:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    164a:	4b07      	ldr	r3, [pc, #28]	; (1668 <mem_manage_fault.constprop.0+0x3c>)
    164c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    164e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1652:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1654:	bf58      	it	pl
    1656:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    165a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    165c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1660:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1662:	7008      	strb	r0, [r1, #0]
}
    1664:	4770      	bx	lr
    1666:	bf00      	nop
    1668:	e000ed00 	.word	0xe000ed00

0000166c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    166c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    166e:	4b41      	ldr	r3, [pc, #260]	; (1774 <z_arm_fault+0x108>)
    1670:	685b      	ldr	r3, [r3, #4]
{
    1672:	b08a      	sub	sp, #40	; 0x28
    1674:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1676:	f3c3 0308 	ubfx	r3, r3, #0, #9
    167a:	2500      	movs	r5, #0
    167c:	f385 8811 	msr	BASEPRI, r5
    1680:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1684:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1688:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    168c:	d111      	bne.n	16b2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    168e:	f002 010c 	and.w	r1, r2, #12
    1692:	2908      	cmp	r1, #8
    1694:	d00d      	beq.n	16b2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1696:	0711      	lsls	r1, r2, #28
    1698:	d401      	bmi.n	169e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    169a:	4606      	mov	r6, r0
			*nested_exc = true;
    169c:	2501      	movs	r5, #1
	*recoverable = false;
    169e:	2200      	movs	r2, #0
    16a0:	3b03      	subs	r3, #3
    16a2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    16a6:	2b03      	cmp	r3, #3
    16a8:	d85c      	bhi.n	1764 <z_arm_fault+0xf8>
    16aa:	e8df f003 	tbb	[pc, r3]
    16ae:	4604      	.short	0x4604
    16b0:	4e4a      	.short	0x4e4a
		return NULL;
    16b2:	462e      	mov	r6, r5
    16b4:	e7f3      	b.n	169e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    16b6:	4b2f      	ldr	r3, [pc, #188]	; (1774 <z_arm_fault+0x108>)
    16b8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    16ba:	f014 0402 	ands.w	r4, r4, #2
    16be:	d151      	bne.n	1764 <z_arm_fault+0xf8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    16c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16c2:	0052      	lsls	r2, r2, #1
    16c4:	d521      	bpl.n	170a <z_arm_fault+0x9e>
		if (SCB_MMFSR != 0) {
    16c6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    16ca:	b132      	cbz	r2, 16da <z_arm_fault+0x6e>
			reason = mem_manage_fault(esf, 1, recoverable);
    16cc:	f10d 0107 	add.w	r1, sp, #7
    16d0:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    16d2:	f7ff ffab 	bl	162c <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
    16d6:	4604      	mov	r4, r0
		break;
    16d8:	e017      	b.n	170a <z_arm_fault+0x9e>
		} else if (SCB_BFSR != 0) {
    16da:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    16de:	b12a      	cbz	r2, 16ec <z_arm_fault+0x80>
			reason = bus_fault(esf, 1, recoverable);
    16e0:	f10d 0107 	add.w	r1, sp, #7
    16e4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    16e6:	f7ff ff83 	bl	15f0 <bus_fault.constprop.0>
    16ea:	e7f4      	b.n	16d6 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    16ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    16ee:	b292      	uxth	r2, r2
    16f0:	b15a      	cbz	r2, 170a <z_arm_fault+0x9e>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    16f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    16f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    16f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    16f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    16fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    16fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1700:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1704:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1708:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    170a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    170e:	b993      	cbnz	r3, 1736 <z_arm_fault+0xca>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1710:	2220      	movs	r2, #32
    1712:	4631      	mov	r1, r6
    1714:	a802      	add	r0, sp, #8
    1716:	f002 fcaa 	bl	406e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    171a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    171c:	b325      	cbz	r5, 1768 <z_arm_fault+0xfc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    171e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1722:	b922      	cbnz	r2, 172e <z_arm_fault+0xc2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1724:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1728:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    172c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    172e:	a902      	add	r1, sp, #8
    1730:	4620      	mov	r0, r4
    1732:	f002 fc73 	bl	401c <z_arm_fatal_error>
}
    1736:	b00a      	add	sp, #40	; 0x28
    1738:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    173a:	f10d 0107 	add.w	r1, sp, #7
    173e:	2000      	movs	r0, #0
    1740:	e7c7      	b.n	16d2 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    1742:	f10d 0107 	add.w	r1, sp, #7
    1746:	2000      	movs	r0, #0
    1748:	e7cd      	b.n	16e6 <z_arm_fault+0x7a>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    174a:	4b0a      	ldr	r3, [pc, #40]	; (1774 <z_arm_fault+0x108>)
    174c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    174e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    175a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    175e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1762:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1764:	2400      	movs	r4, #0
    1766:	e7d0      	b.n	170a <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1768:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    176c:	f023 0301 	bic.w	r3, r3, #1
    1770:	e7dc      	b.n	172c <z_arm_fault+0xc0>
    1772:	bf00      	nop
    1774:	e000ed00 	.word	0xe000ed00

00001778 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1778:	4a02      	ldr	r2, [pc, #8]	; (1784 <z_arm_fault_init+0xc>)
    177a:	6953      	ldr	r3, [r2, #20]
    177c:	f043 0310 	orr.w	r3, r3, #16
    1780:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1782:	4770      	bx	lr
    1784:	e000ed00 	.word	0xe000ed00

00001788 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1788:	4b04      	ldr	r3, [pc, #16]	; (179c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    178a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    178c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    178e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1790:	d003      	beq.n	179a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1792:	4903      	ldr	r1, [pc, #12]	; (17a0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1798:	600a      	str	r2, [r1, #0]

0000179a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    179a:	4770      	bx	lr
	ldr r3, =_kernel
    179c:	200003a0 	.word	0x200003a0
	ldr r1, =_SCS_ICSR
    17a0:	e000ed04 	.word	0xe000ed04

000017a4 <z_arm_interrupt_init>:
    17a4:	4804      	ldr	r0, [pc, #16]	; (17b8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    17a6:	2300      	movs	r3, #0
    17a8:	2120      	movs	r1, #32
    17aa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    17ac:	3301      	adds	r3, #1
    17ae:	2b30      	cmp	r3, #48	; 0x30
    17b0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    17b4:	d1f9      	bne.n	17aa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    17b6:	4770      	bx	lr
    17b8:	e000e100 	.word	0xe000e100

000017bc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    17bc:	4b06      	ldr	r3, [pc, #24]	; (17d8 <z_impl_k_thread_abort+0x1c>)
    17be:	689b      	ldr	r3, [r3, #8]
    17c0:	4283      	cmp	r3, r0
    17c2:	d107      	bne.n	17d4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    17c4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    17c8:	b123      	cbz	r3, 17d4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    17ca:	4a04      	ldr	r2, [pc, #16]	; (17dc <z_impl_k_thread_abort+0x20>)
    17cc:	6853      	ldr	r3, [r2, #4]
    17ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    17d2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    17d4:	f002 b894 	b.w	3900 <z_thread_abort>
    17d8:	200003a0 	.word	0x200003a0
    17dc:	e000ed00 	.word	0xe000ed00

000017e0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    17e0:	4b02      	ldr	r3, [pc, #8]	; (17ec <z_arm_configure_static_mpu_regions+0xc>)
    17e2:	4a03      	ldr	r2, [pc, #12]	; (17f0 <z_arm_configure_static_mpu_regions+0x10>)
    17e4:	4803      	ldr	r0, [pc, #12]	; (17f4 <z_arm_configure_static_mpu_regions+0x14>)
    17e6:	2101      	movs	r1, #1
    17e8:	f000 b85e 	b.w	18a8 <arm_core_mpu_configure_static_mpu_regions>
    17ec:	20040000 	.word	0x20040000
    17f0:	20000000 	.word	0x20000000
    17f4:	00004918 	.word	0x00004918

000017f8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    17f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    17fa:	4f1f      	ldr	r7, [pc, #124]	; (1878 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    17fc:	2600      	movs	r6, #0
    17fe:	428e      	cmp	r6, r1
    1800:	db01      	blt.n	1806 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1802:	4610      	mov	r0, r2
    1804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1806:	6844      	ldr	r4, [r0, #4]
    1808:	b39c      	cbz	r4, 1872 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    180a:	b153      	cbz	r3, 1822 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    180c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1810:	ea14 0f0c 	tst.w	r4, ip
    1814:	d118      	bne.n	1848 <mpu_configure_regions+0x50>
		&&
    1816:	2c1f      	cmp	r4, #31
    1818:	d916      	bls.n	1848 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    181a:	6805      	ldr	r5, [r0, #0]
		&&
    181c:	ea1c 0f05 	tst.w	ip, r5
    1820:	d112      	bne.n	1848 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1822:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1824:	6805      	ldr	r5, [r0, #0]
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1826:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    182a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    182c:	d90f      	bls.n	184e <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    182e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1832:	d80e      	bhi.n	1852 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1834:	3c01      	subs	r4, #1
    1836:	fab4 f484 	clz	r4, r4
    183a:	f1c4 041f 	rsb	r4, r4, #31
    183e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1840:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1842:	ea4c 0404 	orr.w	r4, ip, r4
    1846:	d906      	bls.n	1856 <mpu_configure_regions+0x5e>
			return -EINVAL;
    1848:	f06f 0215 	mvn.w	r2, #21
    184c:	e7d9      	b.n	1802 <mpu_configure_regions+0xa>
		return REGION_32B;
    184e:	2408      	movs	r4, #8
    1850:	e7f6      	b.n	1840 <mpu_configure_regions+0x48>
		return REGION_4G;
    1852:	243e      	movs	r4, #62	; 0x3e
    1854:	e7f4      	b.n	1840 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1856:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    185a:	4315      	orrs	r5, r2
    185c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1860:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    1864:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1868:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    186c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    186e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    1872:	3601      	adds	r6, #1
    1874:	300c      	adds	r0, #12
    1876:	e7c2      	b.n	17fe <mpu_configure_regions+0x6>
    1878:	e000ed00 	.word	0xe000ed00

0000187c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    187c:	4b04      	ldr	r3, [pc, #16]	; (1890 <arm_core_mpu_enable+0x14>)
    187e:	2205      	movs	r2, #5
    1880:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1884:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1888:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    188c:	4770      	bx	lr
    188e:	bf00      	nop
    1890:	e000ed00 	.word	0xe000ed00

00001894 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1894:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1898:	4b02      	ldr	r3, [pc, #8]	; (18a4 <arm_core_mpu_disable+0x10>)
    189a:	2200      	movs	r2, #0
    189c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    18a0:	4770      	bx	lr
    18a2:	bf00      	nop
    18a4:	e000ed00 	.word	0xe000ed00

000018a8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    18a8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    18aa:	4c03      	ldr	r4, [pc, #12]	; (18b8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    18ac:	2301      	movs	r3, #1
    18ae:	7822      	ldrb	r2, [r4, #0]
    18b0:	f7ff ffa2 	bl	17f8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    18b4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    18b6:	bd10      	pop	{r4, pc}
    18b8:	200003e0 	.word	0x200003e0

000018bc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    18bc:	4914      	ldr	r1, [pc, #80]	; (1910 <z_arm_mpu_init+0x54>)
    18be:	6808      	ldr	r0, [r1, #0]
    18c0:	2808      	cmp	r0, #8
{
    18c2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    18c4:	d821      	bhi.n	190a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    18c6:	f7ff ffe5 	bl	1894 <arm_core_mpu_disable>
	MPU->RNR = index;
    18ca:	4c12      	ldr	r4, [pc, #72]	; (1914 <z_arm_mpu_init+0x58>)
    18cc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    18ce:	2200      	movs	r2, #0
    18d0:	4290      	cmp	r0, r2
    18d2:	f101 010c 	add.w	r1, r1, #12
    18d6:	d105      	bne.n	18e4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    18d8:	4b0f      	ldr	r3, [pc, #60]	; (1918 <z_arm_mpu_init+0x5c>)
    18da:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    18dc:	f7ff ffce 	bl	187c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    18e0:	2000      	movs	r0, #0
}
    18e2:	bd10      	pop	{r4, pc}
    18e4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    18e8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    18ec:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    18f0:	4313      	orrs	r3, r2
    18f2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    18f6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    18fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
    18fe:	f043 0301 	orr.w	r3, r3, #1
    1902:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1906:	3201      	adds	r2, #1
    1908:	e7e2      	b.n	18d0 <z_arm_mpu_init+0x14>
		return -1;
    190a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    190e:	e7e8      	b.n	18e2 <z_arm_mpu_init+0x26>
    1910:	00004924 	.word	0x00004924
    1914:	e000ed00 	.word	0xe000ed00
    1918:	200003e0 	.word	0x200003e0

0000191c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    191c:	4b01      	ldr	r3, [pc, #4]	; (1924 <__stdout_hook_install+0x8>)
    191e:	6018      	str	r0, [r3, #0]
}
    1920:	4770      	bx	lr
    1922:	bf00      	nop
    1924:	20000008 	.word	0x20000008

00001928 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1928:	f04f 0320 	mov.w	r3, #32
    192c:	f3ef 8211 	mrs	r2, BASEPRI
    1930:	f383 8811 	msr	BASEPRI, r3
    1934:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1938:	4906      	ldr	r1, [pc, #24]	; (1954 <nordicsemi_nrf52_init+0x2c>)
    193a:	2301      	movs	r3, #1
    193c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1940:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1944:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1948:	f382 8811 	msr	BASEPRI, r2
    194c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1950:	2000      	movs	r0, #0
    1952:	4770      	bx	lr
    1954:	4001e000 	.word	0x4001e000

00001958 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1958:	b120      	cbz	r0, 1964 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    195a:	4b03      	ldr	r3, [pc, #12]	; (1968 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    195c:	0180      	lsls	r0, r0, #6
    195e:	f043 0301 	orr.w	r3, r3, #1
    1962:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1964:	4770      	bx	lr
    1966:	bf00      	nop
    1968:	000048e0 	.word	0x000048e0

0000196c <board_reel_board_init>:
	volatile NRF_GPIO_Type *gpio = NRF_P1;

	/*
	 * Workaround to enable peripheral voltage.
	 */
	gpio->PIN_CNF[PERIPH_PON_PIN] =
    196c:	4b07      	ldr	r3, [pc, #28]	; (198c <board_reel_board_init+0x20>)
    196e:	2203      	movs	r2, #3
    1970:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
		(GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos) |
		(GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);

	gpio->OUTSET = BIT(PERIPH_PON_PIN);
    1974:	2201      	movs	r2, #1
    1976:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	 * to 2mA more than expected.
	 * The consumption increases because RX pin is floating
	 * (High-Impedance state of pin B from Dual-Supply Bus Transceiver).
	 */
	gpio = NRF_P0;
	gpio->PIN_CNF[DT_PROP(DT_INST(0, nordic_nrf_uart), rx_pin)] =
    197a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    197e:	220e      	movs	r2, #14
    1980:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
		(GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos) |
		(GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos);


	return 0;
}
    1984:	2000      	movs	r0, #0
	gpio->PIN_CNF[DT_PROP(DT_INST(0, nordic_nrf_uart), tx_pin)] =
    1986:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
}
    198a:	4770      	bx	lr
    198c:	50000300 	.word	0x50000300

00001990 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1990:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1992:	4b09      	ldr	r3, [pc, #36]	; (19b8 <gpio_nrfx_init+0x28>)
    1994:	781a      	ldrb	r2, [r3, #0]
    1996:	b96a      	cbnz	r2, 19b4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1998:	2101      	movs	r1, #1
    199a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    199c:	2006      	movs	r0, #6
    199e:	2105      	movs	r1, #5
    19a0:	f7ff fd5a 	bl	1458 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    19a4:	2006      	movs	r0, #6
    19a6:	f7ff fd39 	bl	141c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    19aa:	4b04      	ldr	r3, [pc, #16]	; (19bc <gpio_nrfx_init+0x2c>)
    19ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    19b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    19b4:	2000      	movs	r0, #0
    19b6:	bd08      	pop	{r3, pc}
    19b8:	200003e1 	.word	0x200003e1
    19bc:	40006000 	.word	0x40006000

000019c0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    19c0:	4b2b      	ldr	r3, [pc, #172]	; (1a70 <gpio_nrfx_config+0xb0>)
{
    19c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
    19c4:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    19c6:	482b      	ldr	r0, [pc, #172]	; (1a74 <gpio_nrfx_config+0xb4>)
    19c8:	4013      	ands	r3, r2
    19ca:	4283      	cmp	r3, r0
    19cc:	d041      	beq.n	1a52 <gpio_nrfx_config+0x92>
    19ce:	d80d      	bhi.n	19ec <gpio_nrfx_config+0x2c>
    19d0:	2b06      	cmp	r3, #6
    19d2:	d015      	beq.n	1a00 <gpio_nrfx_config+0x40>
    19d4:	d805      	bhi.n	19e2 <gpio_nrfx_config+0x22>
    19d6:	b19b      	cbz	r3, 1a00 <gpio_nrfx_config+0x40>
    19d8:	2b02      	cmp	r3, #2
    19da:	d03c      	beq.n	1a56 <gpio_nrfx_config+0x96>
    19dc:	f06f 0015 	mvn.w	r0, #21
    19e0:	e036      	b.n	1a50 <gpio_nrfx_config+0x90>
    19e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    19e6:	d1f9      	bne.n	19dc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    19e8:	2301      	movs	r3, #1
    19ea:	e009      	b.n	1a00 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    19ec:	4822      	ldr	r0, [pc, #136]	; (1a78 <gpio_nrfx_config+0xb8>)
    19ee:	4283      	cmp	r3, r0
    19f0:	d033      	beq.n	1a5a <gpio_nrfx_config+0x9a>
    19f2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    19f6:	d032      	beq.n	1a5e <gpio_nrfx_config+0x9e>
    19f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    19fc:	d1ee      	bne.n	19dc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    19fe:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    1a00:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    1a02:	bf54      	ite	pl
    1a04:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    1a08:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1a0a:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    1a0e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    1a10:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1a14:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    1a18:	d507      	bpl.n	1a2a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1a1a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1a1e:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1a20:	d01f      	beq.n	1a62 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    1a22:	2201      	movs	r2, #1
    1a24:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1a26:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    1a2a:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    1a2c:	4c13      	ldr	r4, [pc, #76]	; (1a7c <gpio_nrfx_config+0xbc>)
    1a2e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    1a30:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1a34:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    1a38:	bf18      	it	ne
    1a3a:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1a3e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1a42:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1a46:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1a4a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    1a4e:	2000      	movs	r0, #0
}
    1a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    1a52:	2307      	movs	r3, #7
    1a54:	e7d4      	b.n	1a00 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    1a56:	2304      	movs	r3, #4
    1a58:	e7d2      	b.n	1a00 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    1a5a:	2305      	movs	r3, #5
    1a5c:	e7d0      	b.n	1a00 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    1a5e:	2303      	movs	r3, #3
    1a60:	e7ce      	b.n	1a00 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    1a62:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    1a64:	bf42      	ittt	mi
    1a66:	2201      	movmi	r2, #1
    1a68:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    1a6a:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    1a6e:	e7dc      	b.n	1a2a <gpio_nrfx_config+0x6a>
    1a70:	00f00006 	.word	0x00f00006
    1a74:	00100006 	.word	0x00100006
    1a78:	00400002 	.word	0x00400002
    1a7c:	50000300 	.word	0x50000300

00001a80 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    1a80:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    1a84:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    1a86:	4b08      	ldr	r3, [pc, #32]	; (1aa8 <nrf_gpio_cfg_sense_set+0x28>)
    1a88:	2801      	cmp	r0, #1
    1a8a:	bf18      	it	ne
    1a8c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1a90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1a94:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    1a98:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1a9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    1aa0:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    1aa4:	4770      	bx	lr
    1aa6:	bf00      	nop
    1aa8:	50000300 	.word	0x50000300

00001aac <check_level_trigger_pins>:
{
    1aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return port->data;
    1ab0:	6903      	ldr	r3, [r0, #16]
	return port->config;
    1ab2:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
    1ab6:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
    1ab8:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1b38 <check_level_trigger_pins+0x8c>
{
    1abc:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    1abe:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    1ac2:	430a      	orrs	r2, r1
    1ac4:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    1ac8:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1acc:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    1ace:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    1ad2:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    1ad4:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    1ad8:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    1ada:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    1adc:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
    1ae0:	b917      	cbnz	r7, 1ae8 <check_level_trigger_pins+0x3c>
}
    1ae2:	4628      	mov	r0, r5
    1ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    1ae8:	423c      	tst	r4, r7
    1aea:	d021      	beq.n	1b30 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1aec:	f89a 3008 	ldrb.w	r3, [sl, #8]
    1af0:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
    1af4:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1af6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
    1afa:	d114      	bne.n	1b26 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
    1afc:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
    1afe:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    1b00:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
    1b04:	bf14      	ite	ne
    1b06:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    1b0a:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    1b0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    1b14:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    1b18:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    1b1a:	bf02      	ittt	eq
    1b1c:	f8d8 3000 	ldreq.w	r3, [r8]
    1b20:	4323      	orreq	r3, r4
    1b22:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1b26:	2100      	movs	r1, #0
    1b28:	f7ff ffaa 	bl	1a80 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    1b2c:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    1b30:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    1b34:	0064      	lsls	r4, r4, #1
    1b36:	e7d3      	b.n	1ae0 <check_level_trigger_pins+0x34>
    1b38:	50000300 	.word	0x50000300

00001b3c <gpiote_event_handler>:
{
    1b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1b3e:	2400      	movs	r4, #0
{
    1b40:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1b42:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    1b46:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1b4a:	4e28      	ldr	r6, [pc, #160]	; (1bec <gpiote_event_handler+0xb0>)
    1b4c:	f8d6 517c 	ldr.w	r5, [r6, #380]	; 0x17c
	if (port_event) {
    1b50:	b16d      	cbz	r5, 1b6e <gpiote_event_handler+0x32>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    1b52:	a902      	add	r1, sp, #8
    1b54:	4826      	ldr	r0, [pc, #152]	; (1bf0 <gpiote_event_handler+0xb4>)
    1b56:	f7ff ffa9 	bl	1aac <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    1b5a:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    1b5c:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    1b5e:	4825      	ldr	r0, [pc, #148]	; (1bf4 <gpiote_event_handler+0xb8>)
    1b60:	f7ff ffa4 	bl	1aac <check_level_trigger_pins>
		fired_triggers[1] =
    1b64:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1b66:	f8c6 417c 	str.w	r4, [r6, #380]	; 0x17c
    1b6a:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
{
    1b6e:	4922      	ldr	r1, [pc, #136]	; (1bf8 <gpiote_event_handler+0xbc>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1b70:	4c1e      	ldr	r4, [pc, #120]	; (1bec <gpiote_event_handler+0xb0>)
    1b72:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    1b74:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1b76:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    1b78:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    1b7c:	fa06 f002 	lsl.w	r0, r6, r2
    1b80:	4218      	tst	r0, r3
    1b82:	d016      	beq.n	1bb2 <gpiote_event_handler+0x76>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1b84:	680b      	ldr	r3, [r1, #0]
    1b86:	b1a3      	cbz	r3, 1bb2 <gpiote_event_handler+0x76>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1b88:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    1b8c:	af04      	add	r7, sp, #16
    1b8e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1b92:	f8c1 c000 	str.w	ip, [r1]
    1b96:	f3c3 3040 	ubfx	r0, r3, #13, #1
    1b9a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    1b9e:	f3c3 2304 	ubfx	r3, r3, #8, #5
    1ba2:	f850 7c10 	ldr.w	r7, [r0, #-16]
    1ba6:	fa06 f303 	lsl.w	r3, r6, r3
    1baa:	433b      	orrs	r3, r7
    1bac:	f840 3c10 	str.w	r3, [r0, #-16]
    1bb0:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1bb2:	3201      	adds	r2, #1
    1bb4:	2a08      	cmp	r2, #8
    1bb6:	f101 0104 	add.w	r1, r1, #4
    1bba:	d1dd      	bne.n	1b78 <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
    1bbc:	9a00      	ldr	r2, [sp, #0]
    1bbe:	b122      	cbz	r2, 1bca <gpiote_event_handler+0x8e>
	gpio_fire_callbacks(list, port, pins);
    1bc0:	4b0e      	ldr	r3, [pc, #56]	; (1bfc <gpiote_event_handler+0xc0>)
    1bc2:	490b      	ldr	r1, [pc, #44]	; (1bf0 <gpiote_event_handler+0xb4>)
    1bc4:	6858      	ldr	r0, [r3, #4]
    1bc6:	f002 fb14 	bl	41f2 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
    1bca:	9a01      	ldr	r2, [sp, #4]
    1bcc:	b122      	cbz	r2, 1bd8 <gpiote_event_handler+0x9c>
	gpio_fire_callbacks(list, port, pins);
    1bce:	4b0c      	ldr	r3, [pc, #48]	; (1c00 <gpiote_event_handler+0xc4>)
    1bd0:	4908      	ldr	r1, [pc, #32]	; (1bf4 <gpiote_event_handler+0xb8>)
    1bd2:	6858      	ldr	r0, [r3, #4]
    1bd4:	f002 fb0d 	bl	41f2 <gpio_fire_callbacks.isra.0>
	if (port_event) {
    1bd8:	b12d      	cbz	r5, 1be6 <gpiote_event_handler+0xaa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    1bda:	4805      	ldr	r0, [pc, #20]	; (1bf0 <gpiote_event_handler+0xb4>)
    1bdc:	f002 fb1a 	bl	4214 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    1be0:	4804      	ldr	r0, [pc, #16]	; (1bf4 <gpiote_event_handler+0xb8>)
    1be2:	f002 fb17 	bl	4214 <cfg_level_pins>
}
    1be6:	b005      	add	sp, #20
    1be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bea:	bf00      	nop
    1bec:	40006000 	.word	0x40006000
    1bf0:	200000c4 	.word	0x200000c4
    1bf4:	200000dc 	.word	0x200000dc
    1bf8:	40006100 	.word	0x40006100
    1bfc:	200002b8 	.word	0x200002b8
    1c00:	200002d4 	.word	0x200002d4

00001c04 <gpio_nrfx_pin_interrupt_configure>:
{
    1c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c06:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1c08:	6842      	ldr	r2, [r0, #4]
	return port->data;
    1c0a:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1c0c:	7a12      	ldrb	r2, [r2, #8]
    1c0e:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    1c12:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
    1c16:	460e      	mov	r6, r1
    1c18:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    1c1c:	d110      	bne.n	1c40 <gpio_nrfx_pin_interrupt_configure+0x3c>
    return pin_number >> 5;
    1c1e:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
    1c20:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
    1c22:	f005 021f 	and.w	r2, r5, #31
        case 1: return NRF_P1;
    1c26:	4961      	ldr	r1, [pc, #388]	; (1dac <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1c28:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    1c2c:	bf18      	it	ne
    1c2e:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1c32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1c36:	07d0      	lsls	r0, r2, #31
    1c38:	d507      	bpl.n	1c4a <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
    1c3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1c3e:	e09a      	b.n	1d76 <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1c40:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
    1c44:	68f9      	ldr	r1, [r7, #12]
    1c46:	f000 8098 	beq.w	1d7a <gpio_nrfx_pin_interrupt_configure+0x176>
    1c4a:	68fa      	ldr	r2, [r7, #12]
    1c4c:	2101      	movs	r1, #1
    1c4e:	40b1      	lsls	r1, r6
    1c50:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1c52:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1c54:	60f9      	str	r1, [r7, #12]
    1c56:	2101      	movs	r1, #1
    1c58:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1c5a:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    1c5e:	bf0c      	ite	eq
    1c60:	430a      	orreq	r2, r1
    1c62:	438a      	bicne	r2, r1
    1c64:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    1c66:	69ba      	ldr	r2, [r7, #24]
    1c68:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1c6c:	bf0c      	ite	eq
    1c6e:	430a      	orreq	r2, r1
    1c70:	438a      	bicne	r2, r1
    1c72:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    1c74:	693a      	ldr	r2, [r7, #16]
    1c76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1c7a:	bf0c      	ite	eq
    1c7c:	4311      	orreq	r1, r2
    1c7e:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
    1c82:	4a4b      	ldr	r2, [pc, #300]	; (1db0 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
    1c84:	6139      	str	r1, [r7, #16]
    1c86:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1c8a:	2000      	movs	r0, #0
    1c8c:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1c8e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    1c92:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1c96:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    1c9a:	428d      	cmp	r5, r1
    1c9c:	d172      	bne.n	1d84 <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
    1c9e:	fa23 f100 	lsr.w	r1, r3, r0
    1ca2:	07c9      	lsls	r1, r1, #31
    1ca4:	d56e      	bpl.n	1d84 <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1ca6:	0083      	lsls	r3, r0, #2
    1ca8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1cac:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    1cb0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1cb4:	f021 0101 	bic.w	r1, r1, #1
    1cb8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    1cbc:	2301      	movs	r3, #1
    1cbe:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    1cc0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    1cc4:	b2c0      	uxtb	r0, r0
    1cc6:	f000 fdd7 	bl	2878 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1cca:	4628      	mov	r0, r5
    1ccc:	2100      	movs	r1, #0
    1cce:	f7ff fed7 	bl	1a80 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    1cd2:	68f8      	ldr	r0, [r7, #12]
    1cd4:	40f0      	lsrs	r0, r6
    1cd6:	f010 0001 	ands.w	r0, r0, #1
    1cda:	d04c      	beq.n	1d76 <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
    1cdc:	6978      	ldr	r0, [r7, #20]
    1cde:	40f0      	lsrs	r0, r6
    1ce0:	f010 0401 	ands.w	r4, r0, #1
    1ce4:	d055      	beq.n	1d92 <gpio_nrfx_pin_interrupt_configure+0x18e>
				if (data->double_edge & BIT(pin)) {
    1ce6:	69bb      	ldr	r3, [r7, #24]
    1ce8:	40f3      	lsrs	r3, r6
    1cea:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1cec:	bf5f      	itttt	pl
    1cee:	6939      	ldrpl	r1, [r7, #16]
    1cf0:	fa21 f606 	lsrpl.w	r6, r1, r6
    1cf4:	f006 0601 	andpl.w	r6, r6, #1
    1cf8:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1cfc:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1d00:	bf54      	ite	pl
    1d02:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1d04:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1d06:	f000 fdd7 	bl	28b8 <nrfx_gpiote_channel_alloc>
    1d0a:	4b2a      	ldr	r3, [pc, #168]	; (1db4 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
    1d0c:	4298      	cmp	r0, r3
    1d0e:	d13d      	bne.n	1d8c <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    1d10:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1d14:	0093      	lsls	r3, r2, #2
    1d16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1d1a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1d1e:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1d20:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1d24:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    1d28:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    1d2c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1d30:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1d34:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    1d38:	430d      	orrs	r5, r1
    1d3a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    1d3e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    1d42:	0093      	lsls	r3, r2, #2
    1d44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1d48:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1d4c:	2000      	movs	r0, #0
    1d4e:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    1d50:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1d54:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    1d56:	008b      	lsls	r3, r1, #2
    1d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1d5c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    1d60:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1d64:	f042 0201 	orr.w	r2, r2, #1
    1d68:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    1d6c:	4a10      	ldr	r2, [pc, #64]	; (1db0 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    1d6e:	2301      	movs	r3, #1
    1d70:	408b      	lsls	r3, r1
    1d72:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    1d76:	b003      	add	sp, #12
    1d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1d7a:	2201      	movs	r2, #1
    1d7c:	40b2      	lsls	r2, r6
    1d7e:	ea21 0102 	bic.w	r1, r1, r2
    1d82:	e766      	b.n	1c52 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1d84:	3001      	adds	r0, #1
    1d86:	2808      	cmp	r0, #8
    1d88:	d181      	bne.n	1c8e <gpio_nrfx_pin_interrupt_configure+0x8a>
    1d8a:	e79e      	b.n	1cca <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
    1d8c:	f06f 0012 	mvn.w	r0, #18
    1d90:	e7f1      	b.n	1d76 <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1d92:	6939      	ldr	r1, [r7, #16]
    1d94:	40f1      	lsrs	r1, r6
    1d96:	f001 0101 	and.w	r1, r1, #1
    1d9a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1d9e:	4628      	mov	r0, r5
    1da0:	b2c9      	uxtb	r1, r1
    1da2:	f7ff fe6d 	bl	1a80 <nrf_gpio_cfg_sense_set>
	int res = 0;
    1da6:	4620      	mov	r0, r4
    1da8:	e7e5      	b.n	1d76 <gpio_nrfx_pin_interrupt_configure+0x172>
    1daa:	bf00      	nop
    1dac:	50000300 	.word	0x50000300
    1db0:	40006000 	.word	0x40006000
    1db4:	0bad0000 	.word	0x0bad0000

00001db8 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    1db8:	b510      	push	{r4, lr}
    1dba:	4604      	mov	r4, r0
    1dbc:	2200      	movs	r2, #0
    1dbe:	2101      	movs	r1, #1
    1dc0:	2003      	movs	r0, #3
    1dc2:	f7ff fb49 	bl	1458 <z_arm_irq_priority_set>
	return dev->config;
    1dc6:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    1dc8:	6923      	ldr	r3, [r4, #16]
    1dca:	4a06      	ldr	r2, [pc, #24]	; (1de4 <twim_0_init+0x2c>)
    1dcc:	f100 0108 	add.w	r1, r0, #8
    1dd0:	f000 fdde 	bl	2990 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    1dd4:	4b04      	ldr	r3, [pc, #16]	; (1de8 <twim_0_init+0x30>)
		return -EBUSY;
    1dd6:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(0);
    1dd8:	bf14      	ite	ne
    1dda:	f06f 000f 	mvnne.w	r0, #15
    1dde:	2000      	moveq	r0, #0
    1de0:	bd10      	pop	{r4, pc}
    1de2:	bf00      	nop
    1de4:	00001ded 	.word	0x00001ded
    1de8:	0bad0000 	.word	0x0bad0000

00001dec <event_handler>:
	switch (p_event->type) {
    1dec:	7803      	ldrb	r3, [r0, #0]
    1dee:	2b01      	cmp	r3, #1
    1df0:	d008      	beq.n	1e04 <event_handler+0x18>
    1df2:	2b02      	cmp	r3, #2
    1df4:	d008      	beq.n	1e08 <event_handler+0x1c>
    1df6:	b94b      	cbnz	r3, 1e0c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    1df8:	4b05      	ldr	r3, [pc, #20]	; (1e10 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    1dfa:	620b      	str	r3, [r1, #32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1dfc:	f101 0010 	add.w	r0, r1, #16
    1e00:	f001 ba88 	b.w	3314 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1e04:	4b03      	ldr	r3, [pc, #12]	; (1e14 <event_handler+0x28>)
    1e06:	e7f8      	b.n	1dfa <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1e08:	4b03      	ldr	r3, [pc, #12]	; (1e18 <event_handler+0x2c>)
    1e0a:	e7f6      	b.n	1dfa <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    1e0c:	4b03      	ldr	r3, [pc, #12]	; (1e1c <event_handler+0x30>)
    1e0e:	e7f4      	b.n	1dfa <event_handler+0xe>
    1e10:	0bad0000 	.word	0x0bad0000
    1e14:	0bae0001 	.word	0x0bae0001
    1e18:	0bae0002 	.word	0x0bae0002
    1e1c:	0bad0001 	.word	0x0bad0001

00001e20 <i2c_nrfx_twim_transfer>:
{
    1e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return dev->data;
    1e24:	6905      	ldr	r5, [r0, #16]
{
    1e26:	b089      	sub	sp, #36	; 0x24
    1e28:	461f      	mov	r7, r3
    1e2a:	4606      	mov	r6, r0
    1e2c:	460c      	mov	r4, r1
    1e2e:	4690      	mov	r8, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    1e30:	2100      	movs	r1, #0
    1e32:	2214      	movs	r2, #20
    1e34:	a803      	add	r0, sp, #12
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
    1e36:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
    1e3a:	f8b5 a028 	ldrh.w	sl, [r5, #40]	; 0x28
	nrfx_twim_xfer_desc_t cur_xfer = {
    1e3e:	f002 f941 	bl	40c4 <memset>
    1e42:	f88d 700d 	strb.w	r7, [sp, #13]
	return z_impl_k_sem_take(sem, timeout);
    1e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1e4e:	4628      	mov	r0, r5
    1e50:	f001 fa80 	bl	3354 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
    1e54:	6930      	ldr	r0, [r6, #16]
    1e56:	3010      	adds	r0, #16
    1e58:	2200      	movs	r2, #0
    1e5a:	2300      	movs	r3, #0
    1e5c:	f001 fa7a 	bl	3354 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
    1e60:	6870      	ldr	r0, [r6, #4]
		if (res != NRFX_SUCCESS) {
    1e62:	f8df b128 	ldr.w	fp, [pc, #296]	; 1f8c <i2c_nrfx_twim_transfer+0x16c>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
    1e66:	f000 fde9 	bl	2a3c <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    1e6a:	2700      	movs	r7, #0
	uint32_t concat_len = 0;
    1e6c:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
    1e6e:	4547      	cmp	r7, r8
    1e70:	d301      	bcc.n	1e76 <i2c_nrfx_twim_transfer+0x56>
    1e72:	2400      	movs	r4, #0
    1e74:	e02f      	b.n	1ed6 <i2c_nrfx_twim_transfer+0xb6>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    1e76:	7a21      	ldrb	r1, [r4, #8]
    1e78:	070b      	lsls	r3, r1, #28
    1e7a:	d47e      	bmi.n	1f7a <i2c_nrfx_twim_transfer+0x15a>
			&& ((msgs[i].flags & I2C_MSG_READ)
    1e7c:	f1ba 0f00 	cmp.w	sl, #0
    1e80:	d00d      	beq.n	1e9e <i2c_nrfx_twim_transfer+0x7e>
			&& ((i + 1) < num_msgs)
    1e82:	1c7b      	adds	r3, r7, #1
    1e84:	4543      	cmp	r3, r8
    1e86:	d20a      	bcs.n	1e9e <i2c_nrfx_twim_transfer+0x7e>
			&& !(msgs[i].flags & I2C_MSG_STOP)
    1e88:	0788      	lsls	r0, r1, #30
    1e8a:	d408      	bmi.n	1e9e <i2c_nrfx_twim_transfer+0x7e>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    1e8c:	7d23      	ldrb	r3, [r4, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
    1e8e:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
    1e92:	f002 0201 	and.w	r2, r2, #1
    1e96:	f003 0304 	and.w	r3, r3, #4
    1e9a:	4313      	orrs	r3, r2
    1e9c:	d025      	beq.n	1eea <i2c_nrfx_twim_transfer+0xca>
		if (concat_next || (concat_len != 0)) {
    1e9e:	2d00      	cmp	r5, #0
    1ea0:	d13a      	bne.n	1f18 <i2c_nrfx_twim_transfer+0xf8>
			cur_xfer.p_primary_buf = msgs[i].buf;
    1ea2:	6823      	ldr	r3, [r4, #0]
    1ea4:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
    1ea6:	6863      	ldr	r3, [r4, #4]
    1ea8:	9304      	str	r3, [sp, #16]
    1eaa:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    1eac:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    1eae:	6870      	ldr	r0, [r6, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    1eb0:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    1eb4:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    1eb8:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    1ebc:	a903      	add	r1, sp, #12
    1ebe:	bf0c      	ite	eq
    1ec0:	2220      	moveq	r2, #32
    1ec2:	2200      	movne	r2, #0
    1ec4:	f000 fde6 	bl	2a94 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    1ec8:	4558      	cmp	r0, fp
    1eca:	d027      	beq.n	1f1c <i2c_nrfx_twim_transfer+0xfc>
			if (res == NRFX_ERROR_BUSY) {
    1ecc:	4b30      	ldr	r3, [pc, #192]	; (1f90 <i2c_nrfx_twim_transfer+0x170>)
    1ece:	4298      	cmp	r0, r3
    1ed0:	d059      	beq.n	1f86 <i2c_nrfx_twim_transfer+0x166>
			ret = -EIO;
    1ed2:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&get_dev_config(dev)->twim);
    1ed6:	6870      	ldr	r0, [r6, #4]
    1ed8:	f000 fdc0 	bl	2a5c <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    1edc:	6930      	ldr	r0, [r6, #16]
	z_impl_k_sem_give(sem);
    1ede:	f001 fa19 	bl	3314 <z_impl_k_sem_give>
}
    1ee2:	4620      	mov	r0, r4
    1ee4:	b009      	add	sp, #36	; 0x24
    1ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
    1eea:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
    1eec:	6862      	ldr	r2, [r4, #4]
    1eee:	1950      	adds	r0, r2, r5
    1ef0:	4550      	cmp	r0, sl
    1ef2:	d845      	bhi.n	1f80 <i2c_nrfx_twim_transfer+0x160>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    1ef4:	07c9      	lsls	r1, r1, #31
    1ef6:	d406      	bmi.n	1f06 <i2c_nrfx_twim_transfer+0xe6>
				memcpy(concat_buf + concat_len,
    1ef8:	6821      	ldr	r1, [r4, #0]
    1efa:	9301      	str	r3, [sp, #4]
    1efc:	eb09 0005 	add.w	r0, r9, r5
    1f00:	f002 f8b5 	bl	406e <memcpy>
    1f04:	9b01      	ldr	r3, [sp, #4]
			concat_len += msgs[i].len;
    1f06:	6862      	ldr	r2, [r4, #4]
    1f08:	4415      	add	r5, r2
		if (concat_next) {
    1f0a:	bb03      	cbnz	r3, 1f4e <i2c_nrfx_twim_transfer+0x12e>
		if (concat_len == 0) {
    1f0c:	2d00      	cmp	r5, #0
    1f0e:	d0c8      	beq.n	1ea2 <i2c_nrfx_twim_transfer+0x82>
			cur_xfer.p_primary_buf = concat_buf;
    1f10:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = concat_len;
    1f14:	9504      	str	r5, [sp, #16]
    1f16:	e7c9      	b.n	1eac <i2c_nrfx_twim_transfer+0x8c>
			&& ((msgs[i].flags & I2C_MSG_READ)
    1f18:	2300      	movs	r3, #0
    1f1a:	e7e7      	b.n	1eec <i2c_nrfx_twim_transfer+0xcc>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
    1f1c:	6930      	ldr	r0, [r6, #16]
    1f1e:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    1f20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f24:	2300      	movs	r3, #0
    1f26:	f001 fa15 	bl	3354 <z_impl_k_sem_take>
		if (ret != 0) {
    1f2a:	b140      	cbz	r0, 1f3e <i2c_nrfx_twim_transfer+0x11e>
			nrfx_twim_disable(&get_dev_config(dev)->twim);
    1f2c:	6870      	ldr	r0, [r6, #4]
    1f2e:	f000 fd95 	bl	2a5c <nrfx_twim_disable>
	return dev->config;
    1f32:	6873      	ldr	r3, [r6, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    1f34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    1f38:	f000 fff0 	bl	2f1c <nrfx_twi_twim_bus_recover>
    1f3c:	e7c9      	b.n	1ed2 <i2c_nrfx_twim_transfer+0xb2>
	return dev->data;
    1f3e:	6933      	ldr	r3, [r6, #16]
		res = get_dev_data(dev)->res;
    1f40:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    1f42:	455b      	cmp	r3, fp
    1f44:	d1c5      	bne.n	1ed2 <i2c_nrfx_twim_transfer+0xb2>
		if ((msgs[i].flags & I2C_MSG_READ)
    1f46:	7a23      	ldrb	r3, [r4, #8]
    1f48:	07db      	lsls	r3, r3, #31
    1f4a:	d403      	bmi.n	1f54 <i2c_nrfx_twim_transfer+0x134>
		concat_len = 0;
    1f4c:	2500      	movs	r5, #0
	for (size_t i = 0; i < num_msgs; i++) {
    1f4e:	3701      	adds	r7, #1
    1f50:	340c      	adds	r4, #12
    1f52:	e78c      	b.n	1e6e <i2c_nrfx_twim_transfer+0x4e>
		    && cur_xfer.p_primary_buf == concat_buf) {
    1f54:	9b06      	ldr	r3, [sp, #24]
    1f56:	4599      	cmp	r9, r3
    1f58:	d1f8      	bne.n	1f4c <i2c_nrfx_twim_transfer+0x12c>
    1f5a:	4623      	mov	r3, r4
    1f5c:	e007      	b.n	1f6e <i2c_nrfx_twim_transfer+0x14e>
				concat_len -= msgs[j].len;
    1f5e:	1aad      	subs	r5, r5, r2
				memcpy(msgs[j].buf,
    1f60:	68d8      	ldr	r0, [r3, #12]
    1f62:	9301      	str	r3, [sp, #4]
    1f64:	eb09 0105 	add.w	r1, r9, r5
    1f68:	f002 f881 	bl	406e <memcpy>
				j--;
    1f6c:	9b01      	ldr	r3, [sp, #4]
			while (concat_len >= msgs[j].len) {
    1f6e:	685a      	ldr	r2, [r3, #4]
    1f70:	4295      	cmp	r5, r2
    1f72:	f1a3 030c 	sub.w	r3, r3, #12
    1f76:	d2f2      	bcs.n	1f5e <i2c_nrfx_twim_transfer+0x13e>
    1f78:	e7e8      	b.n	1f4c <i2c_nrfx_twim_transfer+0x12c>
			ret = -ENOTSUP;
    1f7a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    1f7e:	e7aa      	b.n	1ed6 <i2c_nrfx_twim_transfer+0xb6>
				ret = -ENOSPC;
    1f80:	f06f 041b 	mvn.w	r4, #27
    1f84:	e7a7      	b.n	1ed6 <i2c_nrfx_twim_transfer+0xb6>
				ret = -EBUSY;
    1f86:	f06f 040f 	mvn.w	r4, #15
    1f8a:	e7a4      	b.n	1ed6 <i2c_nrfx_twim_transfer+0xb6>
    1f8c:	0bad0000 	.word	0x0bad0000
    1f90:	0bad000b 	.word	0x0bad000b

00001f94 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1f94:	4b07      	ldr	r3, [pc, #28]	; (1fb4 <uart_nrfx_poll_in+0x20>)
    1f96:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    1f9a:	b142      	cbz	r2, 1fae <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1f9c:	2000      	movs	r0, #0
    1f9e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    1fa2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    1fa6:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1faa:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    1fac:	4770      	bx	lr
		return -1;
    1fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1fb2:	4770      	bx	lr
    1fb4:	40002000 	.word	0x40002000

00001fb8 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    1fb8:	4b02      	ldr	r3, [pc, #8]	; (1fc4 <uart_nrfx_err_check+0xc>)
    1fba:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    1fbe:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    1fc2:	4770      	bx	lr
    1fc4:	40002000 	.word	0x40002000

00001fc8 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    1fc8:	b530      	push	{r4, r5, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1fca:	794b      	ldrb	r3, [r1, #5]
    1fcc:	2b01      	cmp	r3, #1
    1fce:	d022      	beq.n	2016 <uart_nrfx_configure+0x4e>
    1fd0:	2b03      	cmp	r3, #3
    1fd2:	d11d      	bne.n	2010 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
    1fd4:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1fd6:	798b      	ldrb	r3, [r1, #6]
    1fd8:	2b03      	cmp	r3, #3
    1fda:	d119      	bne.n	2010 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1fdc:	79cb      	ldrb	r3, [r1, #7]
    1fde:	b9bb      	cbnz	r3, 2010 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1fe0:	790a      	ldrb	r2, [r1, #4]
    1fe2:	b112      	cbz	r2, 1fea <uart_nrfx_configure+0x22>
    1fe4:	2a02      	cmp	r2, #2
    1fe6:	d113      	bne.n	2010 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    1fe8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1fea:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    1fec:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1ff0:	d061      	beq.n	20b6 <uart_nrfx_configure+0xee>
    1ff2:	d82d      	bhi.n	2050 <uart_nrfx_configure+0x88>
    1ff4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1ff8:	d05f      	beq.n	20ba <uart_nrfx_configure+0xf2>
    1ffa:	d816      	bhi.n	202a <uart_nrfx_configure+0x62>
    1ffc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2000:	d05d      	beq.n	20be <uart_nrfx_configure+0xf6>
    2002:	d80a      	bhi.n	201a <uart_nrfx_configure+0x52>
    2004:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2008:	d05c      	beq.n	20c4 <uart_nrfx_configure+0xfc>
    200a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    200e:	d05c      	beq.n	20ca <uart_nrfx_configure+0x102>
    2010:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2014:	e04e      	b.n	20b4 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
    2016:	2500      	movs	r5, #0
    2018:	e7dd      	b.n	1fd6 <uart_nrfx_configure+0xe>
	switch (baudrate) {
    201a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    201e:	d057      	beq.n	20d0 <uart_nrfx_configure+0x108>
    2020:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2024:	d1f4      	bne.n	2010 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    2026:	4b34      	ldr	r3, [pc, #208]	; (20f8 <uart_nrfx_configure+0x130>)
    2028:	e039      	b.n	209e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    202a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    202e:	d052      	beq.n	20d6 <uart_nrfx_configure+0x10e>
    2030:	d807      	bhi.n	2042 <uart_nrfx_configure+0x7a>
    2032:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2036:	d050      	beq.n	20da <uart_nrfx_configure+0x112>
    2038:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    203c:	d1e8      	bne.n	2010 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    203e:	4b2f      	ldr	r3, [pc, #188]	; (20fc <uart_nrfx_configure+0x134>)
    2040:	e02d      	b.n	209e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    2042:	f647 2412 	movw	r4, #31250	; 0x7a12
    2046:	42a3      	cmp	r3, r4
    2048:	d1e2      	bne.n	2010 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    204a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    204e:	e026      	b.n	209e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    2050:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2054:	d044      	beq.n	20e0 <uart_nrfx_configure+0x118>
    2056:	d811      	bhi.n	207c <uart_nrfx_configure+0xb4>
    2058:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    205c:	d042      	beq.n	20e4 <uart_nrfx_configure+0x11c>
    205e:	d808      	bhi.n	2072 <uart_nrfx_configure+0xaa>
    2060:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    2064:	42a3      	cmp	r3, r4
    2066:	d03f      	beq.n	20e8 <uart_nrfx_configure+0x120>
    2068:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    206c:	d1d0      	bne.n	2010 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    206e:	4b24      	ldr	r3, [pc, #144]	; (2100 <uart_nrfx_configure+0x138>)
    2070:	e015      	b.n	209e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    2072:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2076:	d1cb      	bne.n	2010 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    2078:	4b22      	ldr	r3, [pc, #136]	; (2104 <uart_nrfx_configure+0x13c>)
    207a:	e010      	b.n	209e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    207c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2080:	d035      	beq.n	20ee <uart_nrfx_configure+0x126>
    2082:	d807      	bhi.n	2094 <uart_nrfx_configure+0xcc>
    2084:	4c20      	ldr	r4, [pc, #128]	; (2108 <uart_nrfx_configure+0x140>)
    2086:	42a3      	cmp	r3, r4
    2088:	d033      	beq.n	20f2 <uart_nrfx_configure+0x12a>
    208a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    208e:	d1bf      	bne.n	2010 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    2090:	4b1e      	ldr	r3, [pc, #120]	; (210c <uart_nrfx_configure+0x144>)
    2092:	e004      	b.n	209e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    2094:	4c1e      	ldr	r4, [pc, #120]	; (2110 <uart_nrfx_configure+0x148>)
    2096:	42a3      	cmp	r3, r4
    2098:	d1ba      	bne.n	2010 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    209a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    209e:	4c1d      	ldr	r4, [pc, #116]	; (2114 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
    20a0:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
    20a2:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    20a6:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    20aa:	6903      	ldr	r3, [r0, #16]
    20ac:	c903      	ldmia	r1, {r0, r1}
    20ae:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    20b2:	2000      	movs	r0, #0
}
    20b4:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    20b6:	4b18      	ldr	r3, [pc, #96]	; (2118 <uart_nrfx_configure+0x150>)
    20b8:	e7f1      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    20ba:	4b18      	ldr	r3, [pc, #96]	; (211c <uart_nrfx_configure+0x154>)
    20bc:	e7ef      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    20be:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    20c2:	e7ec      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
    20c4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    20c8:	e7e9      	b.n	209e <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    20ca:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    20ce:	e7e6      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    20d0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    20d4:	e7e3      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    20d6:	4b12      	ldr	r3, [pc, #72]	; (2120 <uart_nrfx_configure+0x158>)
    20d8:	e7e1      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    20da:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    20de:	e7de      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    20e0:	4b10      	ldr	r3, [pc, #64]	; (2124 <uart_nrfx_configure+0x15c>)
    20e2:	e7dc      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    20e4:	4b10      	ldr	r3, [pc, #64]	; (2128 <uart_nrfx_configure+0x160>)
    20e6:	e7da      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    20e8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    20ec:	e7d7      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    20ee:	4b0f      	ldr	r3, [pc, #60]	; (212c <uart_nrfx_configure+0x164>)
    20f0:	e7d5      	b.n	209e <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    20f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    20f6:	e7d2      	b.n	209e <uart_nrfx_configure+0xd6>
    20f8:	0013b000 	.word	0x0013b000
    20fc:	004ea000 	.word	0x004ea000
    2100:	00ebf000 	.word	0x00ebf000
    2104:	01d7e000 	.word	0x01d7e000
    2108:	0003d090 	.word	0x0003d090
    210c:	075f7000 	.word	0x075f7000
    2110:	000f4240 	.word	0x000f4240
    2114:	40002000 	.word	0x40002000
    2118:	009d5000 	.word	0x009d5000
    211c:	00275000 	.word	0x00275000
    2120:	0075f000 	.word	0x0075f000
    2124:	03afb000 	.word	0x03afb000
    2128:	013a9000 	.word	0x013a9000
    212c:	0ebed000 	.word	0x0ebed000

00002130 <uart_nrfx_poll_out>:
{
    2130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2132:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    2134:	f002 f9c9 	bl	44ca <k_is_in_isr>
    2138:	4d1a      	ldr	r5, [pc, #104]	; (21a4 <uart_nrfx_poll_out+0x74>)
    213a:	bb78      	cbnz	r0, 219c <uart_nrfx_poll_out+0x6c>
    213c:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    213e:	2701      	movs	r7, #1
    2140:	f3bf 8f5b 	dmb	ish
    2144:	e855 3f00 	ldrex	r3, [r5]
    2148:	2b00      	cmp	r3, #0
    214a:	d103      	bne.n	2154 <uart_nrfx_poll_out+0x24>
    214c:	e845 7200 	strex	r2, r7, [r5]
    2150:	2a00      	cmp	r2, #0
    2152:	d1f7      	bne.n	2144 <uart_nrfx_poll_out+0x14>
    2154:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    2158:	d007      	beq.n	216a <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    215a:	2021      	movs	r0, #33	; 0x21
    215c:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
    215e:	3c01      	subs	r4, #1
    2160:	f001 fbae 	bl	38c0 <z_impl_k_sleep>
    2164:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2168:	d1ea      	bne.n	2140 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    216a:	4c0f      	ldr	r4, [pc, #60]	; (21a8 <uart_nrfx_poll_out+0x78>)
    216c:	2300      	movs	r3, #0
    216e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    2172:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2176:	2301      	movs	r3, #1
    2178:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
    217a:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
    217e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2182:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    2186:	b923      	cbnz	r3, 2192 <uart_nrfx_poll_out+0x62>
    2188:	2001      	movs	r0, #1
    218a:	f002 f8f7 	bl	437c <nrfx_busy_wait>
    218e:	3e01      	subs	r6, #1
    2190:	d1f7      	bne.n	2182 <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2192:	2301      	movs	r3, #1
    2194:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    2196:	2300      	movs	r3, #0
    2198:	602b      	str	r3, [r5, #0]
}
    219a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    219c:	2301      	movs	r3, #1
    219e:	602b      	str	r3, [r5, #0]
    21a0:	e7e3      	b.n	216a <uart_nrfx_poll_out+0x3a>
    21a2:	bf00      	nop
    21a4:	200002f8 	.word	0x200002f8
    21a8:	40002000 	.word	0x40002000

000021ac <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    21ac:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
    21ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    21b2:	4c13      	ldr	r4, [pc, #76]	; (2200 <uart_nrfx_init+0x54>)
    21b4:	2200      	movs	r2, #0
    21b6:	2140      	movs	r1, #64	; 0x40
    21b8:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    21bc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    21c0:	2103      	movs	r1, #3
    21c2:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    21c6:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    p_reg->PSEL.RXD = pselrxd;
    21ca:	2308      	movs	r3, #8
    21cc:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    21d0:	2306      	movs	r3, #6
    21d2:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RTS = pselrts;
    21d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    21da:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    21de:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.CTS = pselcts;
    21e0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    21e4:	f7ff fef0 	bl	1fc8 <uart_nrfx_configure>
	if (err) {
    21e8:	b940      	cbnz	r0, 21fc <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    21ea:	2304      	movs	r3, #4
    21ec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21f0:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    21f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21f8:	2301      	movs	r3, #1
    21fa:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    21fc:	bd10      	pop	{r4, pc}
    21fe:	bf00      	nop
    2200:	40002000 	.word	0x40002000

00002204 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    2204:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    2206:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    220a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    220c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    220e:	6002      	str	r2, [r0, #0]
}
    2210:	4802      	ldr	r0, [pc, #8]	; (221c <nrf_gpio_pin_port_decode+0x18>)
    2212:	bf18      	it	ne
    2214:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    2218:	4770      	bx	lr
    221a:	bf00      	nop
    221c:	50000300 	.word	0x50000300

00002220 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2220:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2222:	794b      	ldrb	r3, [r1, #5]
    2224:	2b01      	cmp	r3, #1
    2226:	d02a      	beq.n	227e <uarte_nrfx_configure+0x5e>
    2228:	2b03      	cmp	r3, #3
    222a:	d125      	bne.n	2278 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    222c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    222e:	798b      	ldrb	r3, [r1, #6]
    2230:	2b03      	cmp	r3, #3
    2232:	d121      	bne.n	2278 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2234:	79cc      	ldrb	r4, [r1, #7]
    2236:	b12c      	cbz	r4, 2244 <uarte_nrfx_configure+0x24>
    2238:	2c01      	cmp	r4, #1
    223a:	d11d      	bne.n	2278 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    223c:	6843      	ldr	r3, [r0, #4]
    223e:	685b      	ldr	r3, [r3, #4]
    2240:	079b      	lsls	r3, r3, #30
    2242:	d019      	beq.n	2278 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2244:	790a      	ldrb	r2, [r1, #4]
    2246:	b112      	cbz	r2, 224e <uarte_nrfx_configure+0x2e>
    2248:	2a02      	cmp	r2, #2
    224a:	d115      	bne.n	2278 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    224c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    224e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2250:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2252:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2256:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2258:	d065      	beq.n	2326 <uarte_nrfx_configure+0x106>
    225a:	d82d      	bhi.n	22b8 <uarte_nrfx_configure+0x98>
    225c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2260:	d064      	beq.n	232c <uarte_nrfx_configure+0x10c>
    2262:	d816      	bhi.n	2292 <uarte_nrfx_configure+0x72>
    2264:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2268:	d062      	beq.n	2330 <uarte_nrfx_configure+0x110>
    226a:	d80a      	bhi.n	2282 <uarte_nrfx_configure+0x62>
    226c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2270:	d061      	beq.n	2336 <uarte_nrfx_configure+0x116>
    2272:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2276:	d061      	beq.n	233c <uarte_nrfx_configure+0x11c>
    2278:	f06f 0085 	mvn.w	r0, #133	; 0x85
    227c:	e052      	b.n	2324 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    227e:	2600      	movs	r6, #0
    2280:	e7d5      	b.n	222e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2282:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2286:	d05c      	beq.n	2342 <uarte_nrfx_configure+0x122>
    2288:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    228c:	d1f4      	bne.n	2278 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    228e:	4b37      	ldr	r3, [pc, #220]	; (236c <uarte_nrfx_configure+0x14c>)
    2290:	e03c      	b.n	230c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2292:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2296:	d057      	beq.n	2348 <uarte_nrfx_configure+0x128>
    2298:	d807      	bhi.n	22aa <uarte_nrfx_configure+0x8a>
    229a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    229e:	d055      	beq.n	234c <uarte_nrfx_configure+0x12c>
    22a0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    22a4:	d1e8      	bne.n	2278 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    22a6:	4b32      	ldr	r3, [pc, #200]	; (2370 <uarte_nrfx_configure+0x150>)
    22a8:	e030      	b.n	230c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    22aa:	f647 2712 	movw	r7, #31250	; 0x7a12
    22ae:	42bb      	cmp	r3, r7
    22b0:	d1e2      	bne.n	2278 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    22b2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    22b6:	e029      	b.n	230c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    22b8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    22bc:	d048      	beq.n	2350 <uarte_nrfx_configure+0x130>
    22be:	d813      	bhi.n	22e8 <uarte_nrfx_configure+0xc8>
    22c0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    22c4:	d047      	beq.n	2356 <uarte_nrfx_configure+0x136>
    22c6:	d809      	bhi.n	22dc <uarte_nrfx_configure+0xbc>
    22c8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    22cc:	42bb      	cmp	r3, r7
    22ce:	d044      	beq.n	235a <uarte_nrfx_configure+0x13a>
    22d0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    22d4:	d1d0      	bne.n	2278 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    22d6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    22da:	e017      	b.n	230c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    22dc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    22e0:	d1ca      	bne.n	2278 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    22e2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    22e6:	e011      	b.n	230c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    22e8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    22ec:	d038      	beq.n	2360 <uarte_nrfx_configure+0x140>
    22ee:	d808      	bhi.n	2302 <uarte_nrfx_configure+0xe2>
    22f0:	4f20      	ldr	r7, [pc, #128]	; (2374 <uarte_nrfx_configure+0x154>)
    22f2:	42bb      	cmp	r3, r7
    22f4:	d037      	beq.n	2366 <uarte_nrfx_configure+0x146>
    22f6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    22fa:	d1bd      	bne.n	2278 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    22fc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2300:	e004      	b.n	230c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2302:	4f1d      	ldr	r7, [pc, #116]	; (2378 <uarte_nrfx_configure+0x158>)
    2304:	42bb      	cmp	r3, r7
    2306:	d1b7      	bne.n	2278 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    230c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2310:	6903      	ldr	r3, [r0, #16]
    2312:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2314:	4334      	orrs	r4, r6
    2316:	4322      	orrs	r2, r4
    2318:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    231a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    231e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2322:	2000      	movs	r0, #0
}
    2324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2326:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    232a:	e7ef      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    232c:	4b13      	ldr	r3, [pc, #76]	; (237c <uarte_nrfx_configure+0x15c>)
    232e:	e7ed      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2330:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2334:	e7ea      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    2336:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    233a:	e7e7      	b.n	230c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    233c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2340:	e7e4      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2342:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2346:	e7e1      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2348:	4b0d      	ldr	r3, [pc, #52]	; (2380 <uarte_nrfx_configure+0x160>)
    234a:	e7df      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    234c:	4b0d      	ldr	r3, [pc, #52]	; (2384 <uarte_nrfx_configure+0x164>)
    234e:	e7dd      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2350:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2354:	e7da      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2356:	4b0c      	ldr	r3, [pc, #48]	; (2388 <uarte_nrfx_configure+0x168>)
    2358:	e7d8      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    235a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    235e:	e7d5      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2360:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2364:	e7d2      	b.n	230c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2366:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    236a:	e7cf      	b.n	230c <uarte_nrfx_configure+0xec>
    236c:	0013b000 	.word	0x0013b000
    2370:	004ea000 	.word	0x004ea000
    2374:	0003d090 	.word	0x0003d090
    2378:	000f4240 	.word	0x000f4240
    237c:	00275000 	.word	0x00275000
    2380:	0075c000 	.word	0x0075c000
    2384:	003af000 	.word	0x003af000
    2388:	013a9000 	.word	0x013a9000

0000238c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    238e:	6906      	ldr	r6, [r0, #16]
{
    2390:	4605      	mov	r5, r0
    2392:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2394:	f002 f899 	bl	44ca <k_is_in_isr>
    2398:	b910      	cbnz	r0, 23a0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    239a:	4b2c      	ldr	r3, [pc, #176]	; (244c <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    239c:	781b      	ldrb	r3, [r3, #0]
    239e:	b983      	cbnz	r3, 23c2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    23a0:	f04f 0320 	mov.w	r3, #32
    23a4:	f3ef 8411 	mrs	r4, BASEPRI
    23a8:	f383 8811 	msr	BASEPRI, r3
    23ac:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    23b0:	6868      	ldr	r0, [r5, #4]
    23b2:	f001 ff98 	bl	42e6 <is_tx_ready.isra.0>
    23b6:	bb28      	cbnz	r0, 2404 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    23b8:	f384 8811 	msr	BASEPRI, r4
    23bc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    23c0:	e7ee      	b.n	23a0 <uarte_nrfx_poll_out+0x14>
{
    23c2:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    23c4:	6868      	ldr	r0, [r5, #4]
    23c6:	f001 ff8e 	bl	42e6 <is_tx_ready.isra.0>
    23ca:	b970      	cbnz	r0, 23ea <uarte_nrfx_poll_out+0x5e>
    23cc:	2001      	movs	r0, #1
    23ce:	f001 ffd5 	bl	437c <nrfx_busy_wait>
    23d2:	3c01      	subs	r4, #1
    23d4:	d1f6      	bne.n	23c4 <uarte_nrfx_poll_out+0x38>
    23d6:	2100      	movs	r1, #0
    23d8:	2021      	movs	r0, #33	; 0x21
    23da:	f001 fa71 	bl	38c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    23de:	e7f0      	b.n	23c2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    23e0:	f384 8811 	msr	BASEPRI, r4
    23e4:	f3bf 8f6f 	isb	sy
}
    23e8:	e7f5      	b.n	23d6 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    23ea:	f04f 0320 	mov.w	r3, #32
    23ee:	f3ef 8411 	mrs	r4, BASEPRI
    23f2:	f383 8811 	msr	BASEPRI, r3
    23f6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    23fa:	6868      	ldr	r0, [r5, #4]
    23fc:	f001 ff73 	bl	42e6 <is_tx_ready.isra.0>
    2400:	2800      	cmp	r0, #0
    2402:	d0ed      	beq.n	23e0 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2404:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    2408:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    240a:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    240c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    240e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2412:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2416:	2200      	movs	r2, #0
    2418:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    241c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2420:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2424:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2428:	684a      	ldr	r2, [r1, #4]
    242a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    242c:	bf41      	itttt	mi
    242e:	2208      	movmi	r2, #8
    2430:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2434:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2438:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    243c:	2201      	movs	r2, #1
    243e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2440:	f384 8811 	msr	BASEPRI, r4
    2444:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    244a:	bf00      	nop
    244c:	200003e2 	.word	0x200003e2

00002450 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    2450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2454:	4605      	mov	r5, r0
    2456:	2200      	movs	r2, #0
    2458:	2101      	movs	r1, #1
    245a:	2028      	movs	r0, #40	; 0x28
    245c:	f7fe fffc 	bl	1458 <z_arm_irq_priority_set>
    2460:	2028      	movs	r0, #40	; 0x28
    2462:	f7fe ffdb 	bl	141c <arch_irq_enable>
	return config->uarte_regs;
    2466:	686b      	ldr	r3, [r5, #4]
	return dev->data;
    2468:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
    246a:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    246c:	2700      	movs	r7, #0
    246e:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
	data->dev = dev;
    2472:	2122      	movs	r1, #34	; 0x22
    2474:	6035      	str	r5, [r6, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2476:	a801      	add	r0, sp, #4
    2478:	9101      	str	r1, [sp, #4]
    247a:	f7ff fec3 	bl	2204 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    247e:	9b01      	ldr	r3, [sp, #4]
    2480:	f04f 0801 	mov.w	r8, #1
    2484:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
    2488:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    248c:	a801      	add	r0, sp, #4
    248e:	9101      	str	r1, [sp, #4]
    2490:	f7ff feb8 	bl	2204 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2494:	9b01      	ldr	r3, [sp, #4]
    2496:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    249a:	2203      	movs	r2, #3
    249c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    24a0:	f04f 0921 	mov.w	r9, #33	; 0x21
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    24a4:	a801      	add	r0, sp, #4
    24a6:	f8cd 9004 	str.w	r9, [sp, #4]
    24aa:	f7ff feab 	bl	2204 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    24ae:	9b01      	ldr	r3, [sp, #4]
    24b0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    24b4:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    24b8:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    24bc:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RXD = pselrxd;
    24be:	f8c4 9514 	str.w	r9, [r4, #1300]	; 0x514
    p_reg->PSEL.RTS = pselrts;
    24c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24c6:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    24ca:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
    24cc:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    24d0:	4628      	mov	r0, r5
    24d2:	f7ff fea5 	bl	2220 <uarte_nrfx_configure>
	if (err) {
    24d6:	4607      	mov	r7, r0
    24d8:	2800      	cmp	r0, #0
    24da:	d144      	bne.n	2566 <uarte_1_init+0x116>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    24dc:	686b      	ldr	r3, [r5, #4]
    24de:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    24e0:	0719      	lsls	r1, r3, #28
    24e2:	d519      	bpl.n	2518 <uarte_1_init+0xc8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    24e4:	f106 0012 	add.w	r0, r6, #18
    24e8:	f000 fa1e 	bl	2928 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    24ec:	4b21      	ldr	r3, [pc, #132]	; (2574 <uarte_1_init+0x124>)
    24ee:	4298      	cmp	r0, r3
    24f0:	d13d      	bne.n	256e <uarte_1_init+0x11e>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    24f2:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    24f4:	00c3      	lsls	r3, r0, #3
    24f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    24fa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    24fe:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2502:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2506:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    250a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    250e:	4a1a      	ldr	r2, [pc, #104]	; (2578 <uarte_1_init+0x128>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2510:	fa08 f000 	lsl.w	r0, r8, r0
    2514:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2518:	2308      	movs	r3, #8
    251a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    251e:	2300      	movs	r3, #0
    2520:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2524:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2528:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    252c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2530:	2301      	movs	r3, #1
    2532:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2536:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2538:	686b      	ldr	r3, [r5, #4]
    253a:	685b      	ldr	r3, [r3, #4]
    253c:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    253e:	bf5c      	itt	pl
    2540:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2544:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2548:	06db      	lsls	r3, r3, #27
    254a:	bf44      	itt	mi
    254c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2550:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2554:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    2556:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2558:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    255c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2560:	2301      	movs	r3, #1
    2562:	60a3      	str	r3, [r4, #8]
    2564:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(1);
    2566:	4638      	mov	r0, r7
    2568:	b003      	add	sp, #12
    256a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    256e:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(1);
    2572:	e7f8      	b.n	2566 <uarte_1_init+0x116>
    2574:	0bad0000 	.word	0x0bad0000
    2578:	4001f000 	.word	0x4001f000

0000257c <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    257c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2580:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2584:	2a08      	cmp	r2, #8
    2586:	d106      	bne.n	2596 <nrf52_errata_136+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2588:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    258c:	2b05      	cmp	r3, #5
    258e:	d802      	bhi.n	2596 <nrf52_errata_136+0x1a>
    2590:	4a02      	ldr	r2, [pc, #8]	; (259c <nrf52_errata_136+0x20>)
    2592:	5cd0      	ldrb	r0, [r2, r3]
    2594:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2596:	2000      	movs	r0, #0
    #endif
}
    2598:	4770      	bx	lr
    259a:	bf00      	nop
    259c:	00004a5a 	.word	0x00004a5a

000025a0 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    25a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    25a4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    25a8:	2a08      	cmp	r2, #8
    25aa:	d106      	bne.n	25ba <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    25ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    25b0:	2b05      	cmp	r3, #5
    25b2:	d802      	bhi.n	25ba <nrf52_errata_103+0x1a>
    25b4:	4a02      	ldr	r2, [pc, #8]	; (25c0 <nrf52_errata_103+0x20>)
    25b6:	5cd0      	ldrb	r0, [r2, r3]
    25b8:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    25ba:	2000      	movs	r0, #0
    #endif
}
    25bc:	4770      	bx	lr
    25be:	bf00      	nop
    25c0:	00004a60 	.word	0x00004a60

000025c4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    25c4:	4a02      	ldr	r2, [pc, #8]	; (25d0 <nvmc_wait+0xc>)
    25c6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    25ca:	2b00      	cmp	r3, #0
    25cc:	d0fb      	beq.n	25c6 <nvmc_wait+0x2>
}
    25ce:	4770      	bx	lr
    25d0:	4001e000 	.word	0x4001e000

000025d4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    25d4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    25d6:	f7ff ffd1 	bl	257c <nrf52_errata_136>
    25da:	b140      	cbz	r0, 25ee <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    25dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25e0:	2200      	movs	r2, #0
    25e2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    25e6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    25ea:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    25ee:	f7ff ffc5 	bl	257c <nrf52_errata_136>
    25f2:	2800      	cmp	r0, #0
    25f4:	d046      	beq.n	2684 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    25f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    25fa:	4b55      	ldr	r3, [pc, #340]	; (2750 <SystemInit+0x17c>)
    25fc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2600:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2604:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2608:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    260c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2610:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2614:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2618:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    261c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2620:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2624:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2628:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    262c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2630:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2634:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2638:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    263c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2640:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2644:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2648:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    264c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2650:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2654:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2658:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    265c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2660:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2664:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2668:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    266c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2670:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2674:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2678:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    267c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2680:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2684:	f7ff ff8c 	bl	25a0 <nrf52_errata_103>
    2688:	b118      	cbz	r0, 2692 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    268a:	4b32      	ldr	r3, [pc, #200]	; (2754 <SystemInit+0x180>)
    268c:	4a32      	ldr	r2, [pc, #200]	; (2758 <SystemInit+0x184>)
    268e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    2692:	f7ff ff85 	bl	25a0 <nrf52_errata_103>
    2696:	b118      	cbz	r0, 26a0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    2698:	4b30      	ldr	r3, [pc, #192]	; (275c <SystemInit+0x188>)
    269a:	22fb      	movs	r2, #251	; 0xfb
    269c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    26a0:	f7ff ff7e 	bl	25a0 <nrf52_errata_103>
    26a4:	b170      	cbz	r0, 26c4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    26a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    26aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    26ae:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    26b2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    26b6:	f022 020f 	bic.w	r2, r2, #15
    26ba:	f003 030f 	and.w	r3, r3, #15
    26be:	4313      	orrs	r3, r2
    26c0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    26c4:	f7ff ff6c 	bl	25a0 <nrf52_errata_103>
    26c8:	b120      	cbz	r0, 26d4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    26ca:	4b25      	ldr	r3, [pc, #148]	; (2760 <SystemInit+0x18c>)
    26cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    26d0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    26d4:	f7ff ff52 	bl	257c <nrf52_errata_136>
    26d8:	b148      	cbz	r0, 26ee <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    26da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    26e2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    26e4:	bf44      	itt	mi
    26e6:	f06f 0201 	mvnmi.w	r2, #1
    26ea:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    26ee:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    26f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    26f6:	2a00      	cmp	r2, #0
    26f8:	db03      	blt.n	2702 <SystemInit+0x12e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    26fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    26fe:	2b00      	cmp	r3, #0
    2700:	da22      	bge.n	2748 <SystemInit+0x174>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2702:	4918      	ldr	r1, [pc, #96]	; (2764 <SystemInit+0x190>)
    2704:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2706:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    270a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    270e:	2412      	movs	r4, #18
    nvmc_wait();
    2710:	f7ff ff58 	bl	25c4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2714:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2718:	f7ff ff54 	bl	25c4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    271c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2720:	f7ff ff50 	bl	25c4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2724:	2300      	movs	r3, #0
    2726:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    272a:	f7ff ff4b 	bl	25c4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    272e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2732:	490d      	ldr	r1, [pc, #52]	; (2768 <SystemInit+0x194>)
    2734:	4b0d      	ldr	r3, [pc, #52]	; (276c <SystemInit+0x198>)
    2736:	68ca      	ldr	r2, [r1, #12]
    2738:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    273c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    273e:	60cb      	str	r3, [r1, #12]
    2740:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2744:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2746:	e7fd      	b.n	2744 <SystemInit+0x170>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2748:	4b09      	ldr	r3, [pc, #36]	; (2770 <SystemInit+0x19c>)
    274a:	4a0a      	ldr	r2, [pc, #40]	; (2774 <SystemInit+0x1a0>)
    274c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    274e:	bd10      	pop	{r4, pc}
    2750:	4000c000 	.word	0x4000c000
    2754:	40005000 	.word	0x40005000
    2758:	00038148 	.word	0x00038148
    275c:	4000f000 	.word	0x4000f000
    2760:	40029000 	.word	0x40029000
    2764:	4001e000 	.word	0x4001e000
    2768:	e000ed00 	.word	0xe000ed00
    276c:	05fa0004 	.word	0x05fa0004
    2770:	20000058 	.word	0x20000058
    2774:	03d09000 	.word	0x03d09000

00002778 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2778:	4b04      	ldr	r3, [pc, #16]	; (278c <nrfx_clock_init+0x14>)
    277a:	791a      	ldrb	r2, [r3, #4]
    277c:	b922      	cbnz	r2, 2788 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    277e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2780:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2782:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2784:	4802      	ldr	r0, [pc, #8]	; (2790 <nrfx_clock_init+0x18>)
    2786:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2788:	4802      	ldr	r0, [pc, #8]	; (2794 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    278a:	4770      	bx	lr
    278c:	20000300 	.word	0x20000300
    2790:	0bad0000 	.word	0x0bad0000
    2794:	0bad000c 	.word	0x0bad000c

00002798 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2798:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    279a:	b110      	cbz	r0, 27a2 <nrfx_clock_stop+0xa>
    279c:	2801      	cmp	r0, #1
    279e:	d017      	beq.n	27d0 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    27a0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    27a2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    27a6:	2302      	movs	r3, #2
    27a8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27ac:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    27b0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    27b4:	2301      	movs	r3, #1
    27b6:	60e3      	str	r3, [r4, #12]
    27b8:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    27bc:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    27c0:	03db      	lsls	r3, r3, #15
    27c2:	d5ed      	bpl.n	27a0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    27c4:	2001      	movs	r0, #1
    27c6:	f001 fdd9 	bl	437c <nrfx_busy_wait>
    27ca:	3d01      	subs	r5, #1
    27cc:	d1f6      	bne.n	27bc <nrfx_clock_stop+0x24>
    27ce:	e7e7      	b.n	27a0 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    27d0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27d4:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    27d6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    27de:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    27e2:	6060      	str	r0, [r4, #4]
    27e4:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    27e8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    27ec:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    27f0:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    27f2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    27f6:	d505      	bpl.n	2804 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    27f8:	b123      	cbz	r3, 2804 <nrfx_clock_stop+0x6c>
    27fa:	2001      	movs	r0, #1
    27fc:	f001 fdbe 	bl	437c <nrfx_busy_wait>
    2800:	3d01      	subs	r5, #1
    2802:	d1f1      	bne.n	27e8 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    2804:	4b01      	ldr	r3, [pc, #4]	; (280c <nrfx_clock_stop+0x74>)
    2806:	2200      	movs	r2, #0
    2808:	715a      	strb	r2, [r3, #5]
    280a:	e7c9      	b.n	27a0 <nrfx_clock_stop+0x8>
    280c:	20000300 	.word	0x20000300

00002810 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2814:	b510      	push	{r4, lr}
    2816:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    281a:	b16a      	cbz	r2, 2838 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    281c:	2200      	movs	r2, #0
    281e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2822:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2826:	2201      	movs	r2, #1
    2828:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    282c:	4b11      	ldr	r3, [pc, #68]	; (2874 <nrfx_power_clock_irq_handler+0x64>)
    282e:	7958      	ldrb	r0, [r3, #5]
    2830:	b910      	cbnz	r0, 2838 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    2832:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2834:	681b      	ldr	r3, [r3, #0]
    2836:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    283c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2840:	b172      	cbz	r2, 2860 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2842:	2200      	movs	r2, #0
    2844:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2848:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    284c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2850:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2854:	0792      	lsls	r2, r2, #30
    2856:	d104      	bne.n	2862 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2858:	2201      	movs	r2, #1
    285a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    285e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2860:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2862:	2202      	movs	r2, #2
    2864:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2868:	4b02      	ldr	r3, [pc, #8]	; (2874 <nrfx_power_clock_irq_handler+0x64>)
}
    286a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    286e:	681b      	ldr	r3, [r3, #0]
    2870:	2001      	movs	r0, #1
    2872:	4718      	bx	r3
    2874:	20000300 	.word	0x20000300

00002878 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    2878:	2301      	movs	r3, #1
    287a:	fa03 f000 	lsl.w	r0, r3, r0
    287e:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    2880:	b193      	cbz	r3, 28a8 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
    2882:	f04f 0320 	mov.w	r3, #32
    2886:	f3ef 8111 	mrs	r1, BASEPRI
    288a:	f383 8811 	msr	BASEPRI, r3
    288e:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    2892:	4a06      	ldr	r2, [pc, #24]	; (28ac <nrfx_gpiote_channel_free+0x34>)
    2894:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    2896:	ea23 0000 	bic.w	r0, r3, r0
    289a:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    289c:	f381 8811 	msr	BASEPRI, r1
    28a0:	f3bf 8f6f 	isb	sy
    28a4:	4802      	ldr	r0, [pc, #8]	; (28b0 <nrfx_gpiote_channel_free+0x38>)
    28a6:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    28a8:	4802      	ldr	r0, [pc, #8]	; (28b4 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    28aa:	4770      	bx	lr
    28ac:	20000308 	.word	0x20000308
    28b0:	0bad0000 	.word	0x0bad0000
    28b4:	0bad0004 	.word	0x0bad0004

000028b8 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    28b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28bc:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    28be:	f8df e05c 	ldr.w	lr, [pc, #92]	; 291c <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    28c2:	4817      	ldr	r0, [pc, #92]	; (2920 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    28c4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2924 <nrfx_gpiote_channel_alloc+0x6c>
{
    28c8:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    28ca:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    28cc:	2601      	movs	r6, #1
    28ce:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    28d0:	f04f 0120 	mov.w	r1, #32
    28d4:	f3ef 8c11 	mrs	ip, BASEPRI
    28d8:	f381 8811 	msr	BASEPRI, r1
    28dc:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    28e0:	fa22 f103 	lsr.w	r1, r2, r3
    28e4:	07c9      	lsls	r1, r1, #31
    28e6:	d50a      	bpl.n	28fe <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    28e8:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    28ec:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    28f0:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    28f2:	bf01      	itttt	eq
    28f4:	4339      	orreq	r1, r7
    28f6:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    28fa:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    28fc:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    28fe:	f38c 8811 	msr	BASEPRI, ip
    2902:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    2906:	4540      	cmp	r0, r8
    2908:	d005      	beq.n	2916 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    290a:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    290e:	439a      	bics	r2, r3
    2910:	f104 0401 	add.w	r4, r4, #1
    2914:	d1db      	bne.n	28ce <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    291a:	bf00      	nop
    291c:	20000308 	.word	0x20000308
    2920:	0bad0002 	.word	0x0bad0002
    2924:	0bad0000 	.word	0x0bad0000

00002928 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    2928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    292c:	4a14      	ldr	r2, [pc, #80]	; (2980 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    292e:	4e15      	ldr	r6, [pc, #84]	; (2984 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    2930:	4f15      	ldr	r7, [pc, #84]	; (2988 <nrfx_ppi_channel_alloc+0x60>)
{
    2932:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    2934:	4815      	ldr	r0, [pc, #84]	; (298c <nrfx_ppi_channel_alloc+0x64>)
{
    2936:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    2938:	f04f 0e01 	mov.w	lr, #1
    293c:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    2940:	f04f 0320 	mov.w	r3, #32
    2944:	f3ef 8811 	mrs	r8, BASEPRI
    2948:	f383 8811 	msr	BASEPRI, r3
    294c:	f3bf 8f6f 	isb	sy
    2950:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    2954:	4213      	tst	r3, r2
    2956:	d007      	beq.n	2968 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    2958:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    295a:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    295c:	bf01      	itttt	eq
    295e:	4319      	orreq	r1, r3
    2960:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    2962:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    2966:	4638      	moveq	r0, r7
	__asm__ volatile(
    2968:	f388 8811 	msr	BASEPRI, r8
    296c:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    2970:	42b8      	cmp	r0, r7
    2972:	d003      	beq.n	297c <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    2974:	439a      	bics	r2, r3
    2976:	f104 0401 	add.w	r4, r4, #1
    297a:	d1df      	bne.n	293c <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2980:	000fffff 	.word	0x000fffff
    2984:	20000368 	.word	0x20000368
    2988:	0bad0000 	.word	0x0bad0000
    298c:	0bad0002 	.word	0x0bad0002

00002990 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    2990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    2994:	f890 8004 	ldrb.w	r8, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    2998:	4d24      	ldr	r5, [pc, #144]	; (2a2c <nrfx_twim_init+0x9c>)
    299a:	2734      	movs	r7, #52	; 0x34
    299c:	fb07 f708 	mul.w	r7, r7, r8
    29a0:	19ec      	adds	r4, r5, r7
    29a2:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
    29a6:	2e00      	cmp	r6, #0
    29a8:	d13d      	bne.n	2a26 <nrfx_twim_init+0x96>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    29aa:	60a6      	str	r6, [r4, #8]
    p_cb->repeated        = false;
    29ac:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->busy            = false;
    29b0:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
    29b4:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
    29b6:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    29b8:	7b4b      	ldrb	r3, [r1, #13]
    29ba:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->handler         = event_handler;
    29be:	51ea      	str	r2, [r5, r7]
        case 1: return NRF_P1;
    29c0:	4b1b      	ldr	r3, [pc, #108]	; (2a30 <nrfx_twim_init+0xa0>)
    TWIM_PIN_INIT(p_config->sda);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    29c2:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
    29c4:	0977      	lsrs	r7, r6, #5
        case 1: return NRF_P1;
    29c6:	2f01      	cmp	r7, #1
    *p_pin = pin_number & 0x1F;
    29c8:	f006 041f 	and.w	r4, r6, #31
        case 1: return NRF_P1;
    29cc:	bf0c      	ite	eq
    29ce:	461f      	moveq	r7, r3
    29d0:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    29d4:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    29d8:	f240 6c0c 	movw	ip, #1548	; 0x60c
    29dc:	f847 c024 	str.w	ip, [r7, r4, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
    29e0:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
    29e2:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    *p_pin = pin_number & 0x1F;
    29e6:	f004 071f 	and.w	r7, r4, #31
        case 1: return NRF_P1;
    29ea:	f1be 0f01 	cmp.w	lr, #1
    29ee:	bf18      	it	ne
    29f0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    29f4:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    29f8:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
    29fc:	688b      	ldr	r3, [r1, #8]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
    29fe:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    2a02:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    2a06:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
    2a0a:	b11a      	cbz	r2, 2a14 <nrfx_twim_init+0x84>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    2a0c:	f340 3007 	sbfx	r0, r0, #12, #8
    2a10:	f7fe fd04 	bl	141c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    2a14:	2334      	movs	r3, #52	; 0x34
    2a16:	fb03 5508 	mla	r5, r3, r8, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    2a1a:	4806      	ldr	r0, [pc, #24]	; (2a34 <nrfx_twim_init+0xa4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    2a1c:	2301      	movs	r3, #1
    2a1e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    2a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
    2a26:	4804      	ldr	r0, [pc, #16]	; (2a38 <nrfx_twim_init+0xa8>)
    2a28:	e7fb      	b.n	2a22 <nrfx_twim_init+0x92>
    2a2a:	bf00      	nop
    2a2c:	2000036c 	.word	0x2000036c
    2a30:	50000300 	.word	0x50000300
    2a34:	0bad0000 	.word	0x0bad0000
    2a38:	0bad0005 	.word	0x0bad0005

00002a3c <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    2a3c:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    2a3e:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    2a40:	2106      	movs	r1, #6
    2a42:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    2a46:	4b04      	ldr	r3, [pc, #16]	; (2a58 <nrfx_twim_enable+0x1c>)
    2a48:	2134      	movs	r1, #52	; 0x34
    2a4a:	fb01 3302 	mla	r3, r1, r2, r3
    2a4e:	2202      	movs	r2, #2
    2a50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    2a54:	4770      	bx	lr
    2a56:	bf00      	nop
    2a58:	2000036c 	.word	0x2000036c

00002a5c <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    2a5c:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    2a5e:	4b0b      	ldr	r3, [pc, #44]	; (2a8c <nrfx_twim_disable+0x30>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    2a60:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    2a62:	2034      	movs	r0, #52	; 0x34
    2a64:	fb00 3301 	mla	r3, r0, r1, r3
    p_reg->INTENCLR = mask;
    2a68:	4909      	ldr	r1, [pc, #36]	; (2a90 <nrfx_twim_disable+0x34>)
    2a6a:	2000      	movs	r0, #0
    2a6c:	6098      	str	r0, [r3, #8]
    2a6e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    2a72:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    2a76:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
    2a7a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    2a7e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    2a82:	2201      	movs	r2, #1
    2a84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    2a88:	4770      	bx	lr
    2a8a:	bf00      	nop
    2a8c:	2000036c 	.word	0x2000036c
    2a90:	019c0202 	.word	0x019c0202

00002a94 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    2a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    2a98:	4fb0      	ldr	r7, [pc, #704]	; (2d5c <nrfx_twim_xfer+0x2c8>)
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    2a9a:	f890 c004 	ldrb.w	ip, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    2a9e:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    2aa0:	f04f 0e34 	mov.w	lr, #52	; 0x34
    2aa4:	fb0e 7e0c 	mla	lr, lr, ip, r7
    2aa8:	2300      	movs	r3, #0
    2aaa:	f88e 302e 	strb.w	r3, [lr, #46]	; 0x2e

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2aae:	68cb      	ldr	r3, [r1, #12]
    2ab0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    2ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
    2ab8:	460d      	mov	r5, r1
    2aba:	4616      	mov	r6, r2
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    2abc:	d003      	beq.n	2ac6 <nrfx_twim_xfer+0x32>
        return err_code;
    2abe:	4da8      	ldr	r5, [pc, #672]	; (2d60 <nrfx_twim_xfer+0x2cc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2ac0:	4628      	mov	r0, r5
    2ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENCLR = mask;
    2ac6:	4ba7      	ldr	r3, [pc, #668]	; (2d64 <nrfx_twim_xfer+0x2d0>)
    2ac8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
    2acc:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
    2ad0:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    2ad4:	b12b      	cbz	r3, 2ae2 <nrfx_twim_xfer+0x4e>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    2ad6:	f8de 3008 	ldr.w	r3, [lr, #8]
        return err_code;
    2ada:	4da3      	ldr	r5, [pc, #652]	; (2d68 <nrfx_twim_xfer+0x2d4>)
    p_reg->INTENSET = mask;
    2adc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    2ae0:	e7ee      	b.n	2ac0 <nrfx_twim_xfer+0x2c>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    2ae2:	f012 0f14 	tst.w	r2, #20
    2ae6:	bf0c      	ite	eq
    2ae8:	2301      	moveq	r3, #1
    2aea:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    2aec:	f88e 302f 	strb.w	r3, [lr, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    2af0:	4689      	mov	r9, r1
    2af2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    2af6:	f10e 080c 	add.w	r8, lr, #12
    2afa:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    2afe:	f8d9 3000 	ldr.w	r3, [r9]
    2b02:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    2b06:	f3c6 1300 	ubfx	r3, r6, #4, #1
    2b0a:	f88e 3030 	strb.w	r3, [lr, #48]	; 0x30
    p_cb->flags = flags;
    2b0e:	f8ce 6020 	str.w	r6, [lr, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    2b12:	786b      	ldrb	r3, [r5, #1]
    2b14:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b18:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    2b1c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2b20:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    2b24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    2b28:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    2b2c:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    2b30:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    2b34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    2b38:	f016 0301 	ands.w	r3, r6, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    2b3c:	bf18      	it	ne
    2b3e:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    2b40:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    2b44:	f016 0302 	ands.w	r3, r6, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    2b48:	bf18      	it	ne
    2b4a:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    2b4c:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    2b50:	782a      	ldrb	r2, [r5, #0]
    2b52:	2a03      	cmp	r2, #3
    2b54:	f200 80b3 	bhi.w	2cbe <nrfx_twim_xfer+0x22a>
    2b58:	e8df f002 	tbb	[pc, r2]
    2b5c:	02679e82 	.word	0x02679e82
    2b60:	692b      	ldr	r3, [r5, #16]
    2b62:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    2b66:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    2b6a:	d1a8      	bne.n	2abe <nrfx_twim_xfer+0x2a>
    p_reg->SHORTS = mask;
    2b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2b70:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2b74:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2b76:	6869      	ldr	r1, [r5, #4]
    2b78:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2b7c:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b80:	2100      	movs	r1, #0
    2b82:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    2b86:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b8a:	2001      	movs	r0, #1
    2b8c:	6220      	str	r0, [r4, #32]
    2b8e:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2b90:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    2b94:	2800      	cmp	r0, #0
    2b96:	d0fb      	beq.n	2b90 <nrfx_twim_xfer+0xfc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b98:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    2b9c:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    2ba0:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2ba2:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    2ba6:	2334      	movs	r3, #52	; 0x34
    2ba8:	fb03 730c 	mla	r3, r3, ip, r7
    p_reg->TXD.MAXCNT = length;
    2bac:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    2bb0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2bb4:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    2bb6:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    2bb8:	4d6c      	ldr	r5, [pc, #432]	; (2d6c <nrfx_twim_xfer+0x2d8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    2bba:	0731      	lsls	r1, r6, #28
    2bbc:	d403      	bmi.n	2bc6 <nrfx_twim_xfer+0x132>
    2bbe:	2a03      	cmp	r2, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2bc0:	bf1c      	itt	ne
    2bc2:	2201      	movne	r2, #1
    2bc4:	50e2      	strne	r2, [r4, r3]
    if (p_cb->handler)
    2bc6:	2334      	movs	r3, #52	; 0x34
    2bc8:	fb03 f30c 	mul.w	r3, r3, ip
    2bcc:	18f9      	adds	r1, r7, r3
    2bce:	58fa      	ldr	r2, [r7, r3]
    2bd0:	2a00      	cmp	r2, #0
    2bd2:	d177      	bne.n	2cc4 <nrfx_twim_xfer+0x230>
                transmission_finished = true;
    2bd4:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2bd6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    2bda:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    2bde:	2800      	cmp	r0, #0
    2be0:	f040 8088 	bne.w	2cf4 <nrfx_twim_xfer+0x260>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    2be4:	3b00      	subs	r3, #0
    2be6:	bf18      	it	ne
    2be8:	2301      	movne	r3, #1
    2bea:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    2bee:	2800      	cmp	r0, #0
    2bf0:	f000 8086 	beq.w	2d00 <nrfx_twim_xfer+0x26c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2bf4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    2bf8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2bfc:	f8d4 e160 	ldr.w	lr, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    2c00:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    2c04:	f1be 0f00 	cmp.w	lr, #0
    2c08:	d002      	beq.n	2c10 <nrfx_twim_xfer+0x17c>
    2c0a:	f410 7f00 	tst.w	r0, #512	; 0x200
    2c0e:	d105      	bne.n	2c1c <nrfx_twim_xfer+0x188>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c10:	6221      	str	r1, [r4, #32]
    2c12:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    2c14:	f1be 0f00 	cmp.w	lr, #0
    2c18:	d0dd      	beq.n	2bd6 <nrfx_twim_xfer+0x142>
                    transmission_finished = false;
    2c1a:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    2c1c:	05c0      	lsls	r0, r0, #23
    2c1e:	d56f      	bpl.n	2d00 <nrfx_twim_xfer+0x26c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c20:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    2c24:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
    2c28:	e7d5      	b.n	2bd6 <nrfx_twim_xfer+0x142>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2c2a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2c2c:	68e9      	ldr	r1, [r5, #12]
    2c2e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2c32:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    2c36:	692b      	ldr	r3, [r5, #16]
    2c38:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    2c3c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    2c40:	f47f af3d 	bne.w	2abe <nrfx_twim_xfer+0x2a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    2c44:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2c46:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    2c4a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    2c4e:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    2c52:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2c56:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2c58:	fb03 730c 	mla	r3, r3, ip, r7
    2c5c:	2102      	movs	r1, #2
    2c5e:	e012      	b.n	2c86 <nrfx_twim_xfer+0x1f2>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2c60:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2c62:	68e9      	ldr	r1, [r5, #12]
    2c64:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    2c68:	f016 0f20 	tst.w	r6, #32
    p_reg->TXD.MAXCNT = length;
    2c6c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    2c70:	f04f 0334 	mov.w	r3, #52	; 0x34
    2c74:	d00b      	beq.n	2c8e <nrfx_twim_xfer+0x1fa>
    p_reg->SHORTS = mask;
    2c76:	f44f 7180 	mov.w	r1, #256	; 0x100
    2c7a:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    2c7e:	fb03 730c 	mla	r3, r3, ip, r7
    2c82:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2c86:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c88:	2301      	movs	r3, #1
    2c8a:	6223      	str	r3, [r4, #32]
    2c8c:	e793      	b.n	2bb6 <nrfx_twim_xfer+0x122>
    p_reg->SHORTS = mask;
    2c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
    2c92:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    2c96:	e7df      	b.n	2c58 <nrfx_twim_xfer+0x1c4>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2c98:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2c9a:	68e9      	ldr	r1, [r5, #12]
    2c9c:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2ca0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    2ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2ca8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2cac:	2334      	movs	r3, #52	; 0x34
    2cae:	fb03 730c 	mla	r3, r3, ip, r7
    2cb2:	2102      	movs	r1, #2
    2cb4:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2cb6:	2301      	movs	r3, #1
    2cb8:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    2cba:	2300      	movs	r3, #0
    2cbc:	e77c      	b.n	2bb8 <nrfx_twim_xfer+0x124>
    switch (p_xfer_desc->type)
    2cbe:	4d2c      	ldr	r5, [pc, #176]	; (2d70 <nrfx_twim_xfer+0x2dc>)
    2cc0:	2308      	movs	r3, #8
    2cc2:	e77a      	b.n	2bba <nrfx_twim_xfer+0x126>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    2cc4:	0772      	lsls	r2, r6, #29
            p_cb->int_mask = 0;
    2cc6:	bf44      	itt	mi
    2cc8:	2300      	movmi	r3, #0
    2cca:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    2ccc:	0673      	lsls	r3, r6, #25
    2cce:	d406      	bmi.n	2cde <nrfx_twim_xfer+0x24a>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    2cd0:	2334      	movs	r3, #52	; 0x34
    2cd2:	fb03 730c 	mla	r3, r3, ip, r7
    2cd6:	689a      	ldr	r2, [r3, #8]
    2cd8:	f042 0202 	orr.w	r2, r2, #2
    2cdc:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    2cde:	2334      	movs	r3, #52	; 0x34
    2ce0:	fb03 770c 	mla	r7, r3, ip, r7
    2ce4:	68bb      	ldr	r3, [r7, #8]
    2ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2cea:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    2cec:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
    2cee:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    2cf2:	e6e5      	b.n	2ac0 <nrfx_twim_xfer+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cf4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    2cf8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    2cfc:	2301      	movs	r3, #1
    2cfe:	e774      	b.n	2bea <nrfx_twim_xfer+0x156>
        } while (!transmission_finished);
    2d00:	2b00      	cmp	r3, #0
    2d02:	f43f af68 	beq.w	2bd6 <nrfx_twim_xfer+0x142>
        p_cb->busy = false;
    2d06:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    2d08:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    2d0c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    2d10:	fb01 720c 	mla	r2, r1, ip, r7
    2d14:	2000      	movs	r0, #0
    2d16:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    2d1a:	b18b      	cbz	r3, 2d40 <nrfx_twim_xfer+0x2ac>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    2d1c:	4a15      	ldr	r2, [pc, #84]	; (2d74 <nrfx_twim_xfer+0x2e0>)
    2d1e:	4d16      	ldr	r5, [pc, #88]	; (2d78 <nrfx_twim_xfer+0x2e4>)
    2d20:	f013 0f01 	tst.w	r3, #1
    2d24:	bf18      	it	ne
    2d26:	4615      	movne	r5, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2d28:	f013 0f02 	tst.w	r3, #2
    2d2c:	f102 0201 	add.w	r2, r2, #1
    2d30:	bf18      	it	ne
    2d32:	4615      	movne	r5, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2d34:	f013 0f04 	tst.w	r3, #4
    2d38:	4b10      	ldr	r3, [pc, #64]	; (2d7c <nrfx_twim_xfer+0x2e8>)
    2d3a:	bf18      	it	ne
    2d3c:	461d      	movne	r5, r3
    2d3e:	e6bf      	b.n	2ac0 <nrfx_twim_xfer+0x2c>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    2d40:	0673      	lsls	r3, r6, #25
    2d42:	f53f aebd 	bmi.w	2ac0 <nrfx_twim_xfer+0x2c>
                !xfer_completeness_check(p_twim, p_cb))
    2d46:	fb0c 7101 	mla	r1, ip, r1, r7
    2d4a:	4620      	mov	r0, r4
    2d4c:	f001 fb4e 	bl	43ec <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    2d50:	4b09      	ldr	r3, [pc, #36]	; (2d78 <nrfx_twim_xfer+0x2e4>)
    2d52:	2800      	cmp	r0, #0
    2d54:	bf08      	it	eq
    2d56:	461d      	moveq	r5, r3
    2d58:	e6b2      	b.n	2ac0 <nrfx_twim_xfer+0x2c>
    2d5a:	bf00      	nop
    2d5c:	2000036c 	.word	0x2000036c
    2d60:	0bad000a 	.word	0x0bad000a
    2d64:	019c0202 	.word	0x019c0202
    2d68:	0bad000b 	.word	0x0bad000b
    2d6c:	0bad0000 	.word	0x0bad0000
    2d70:	0bad0004 	.word	0x0bad0004
    2d74:	0bae0000 	.word	0x0bae0000
    2d78:	0bad0001 	.word	0x0bad0001
    2d7c:	0bae0002 	.word	0x0bae0002

00002d80 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    2d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2d82:	4d5a      	ldr	r5, [pc, #360]	; (2eec <nrfx_twim_0_irq_handler+0x16c>)
    2d84:	4c5a      	ldr	r4, [pc, #360]	; (2ef0 <nrfx_twim_0_irq_handler+0x170>)
    2d86:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    2d8a:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    2d8c:	b1fb      	cbz	r3, 2dce <nrfx_twim_0_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d8e:	2300      	movs	r3, #0
    2d90:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    2d94:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2d98:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    2d9c:	b9bb      	cbnz	r3, 2dce <nrfx_twim_0_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    2d9e:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    2da0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2da4:	2302      	movs	r3, #2
    2da6:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    2da8:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    2daa:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2dae:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    2db2:	b11b      	cbz	r3, 2dbc <nrfx_twim_0_irq_handler+0x3c>
    return p_reg->SHORTS;
    2db4:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    2db8:	059e      	lsls	r6, r3, #22
    2dba:	d403      	bmi.n	2dc4 <nrfx_twim_0_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dbc:	4b4b      	ldr	r3, [pc, #300]	; (2eec <nrfx_twim_0_irq_handler+0x16c>)
    2dbe:	2201      	movs	r2, #1
    2dc0:	621a      	str	r2, [r3, #32]
    2dc2:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    2dc4:	2301      	movs	r3, #1
    2dc6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
    2dca:	b007      	add	sp, #28
    2dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2dce:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d053      	beq.n	2e7e <nrfx_twim_0_irq_handler+0xfe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dd6:	2300      	movs	r3, #0
    2dd8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    2ddc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    2de0:	6a23      	ldr	r3, [r4, #32]
    2de2:	065d      	lsls	r5, r3, #25
    2de4:	d40a      	bmi.n	2dfc <nrfx_twim_0_irq_handler+0x7c>
    2de6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2dea:	b93b      	cbnz	r3, 2dfc <nrfx_twim_0_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    2dec:	4940      	ldr	r1, [pc, #256]	; (2ef0 <nrfx_twim_0_irq_handler+0x170>)
    2dee:	483f      	ldr	r0, [pc, #252]	; (2eec <nrfx_twim_0_irq_handler+0x16c>)
    2df0:	f001 fafc 	bl	43ec <xfer_completeness_check>
    2df4:	f080 0001 	eor.w	r0, r0, #1
    2df8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    2dfc:	6a23      	ldr	r3, [r4, #32]
    2dfe:	f013 0704 	ands.w	r7, r3, #4
    2e02:	d121      	bne.n	2e48 <nrfx_twim_0_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
    2e04:	4e3b      	ldr	r6, [pc, #236]	; (2ef4 <nrfx_twim_0_irq_handler+0x174>)
            if (!p_cb->repeated || p_cb->error)
    2e06:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    2e0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2e0c:	ad01      	add	r5, sp, #4
    2e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2e10:	6833      	ldr	r3, [r6, #0]
    2e12:	602b      	str	r3, [r5, #0]
    2e14:	4b35      	ldr	r3, [pc, #212]	; (2eec <nrfx_twim_0_irq_handler+0x16c>)
    2e16:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    2e1a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    2e1e:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    2e22:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    2e26:	f1bc 0f00 	cmp.w	ip, #0
    2e2a:	d002      	beq.n	2e32 <nrfx_twim_0_irq_handler+0xb2>
    2e2c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    2e30:	b152      	cbz	r2, 2e48 <nrfx_twim_0_irq_handler+0xc8>
    p_reg->SHORTS = mask;
    2e32:	2200      	movs	r2, #0
    2e34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    2e38:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    2e3a:	4a2f      	ldr	r2, [pc, #188]	; (2ef8 <nrfx_twim_0_irq_handler+0x178>)
    2e3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e40:	4b2e      	ldr	r3, [pc, #184]	; (2efc <nrfx_twim_0_irq_handler+0x17c>)
    2e42:	2208      	movs	r2, #8
    2e44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    2e48:	4a28      	ldr	r2, [pc, #160]	; (2eec <nrfx_twim_0_irq_handler+0x16c>)
    2e4a:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    2e4e:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    2e52:	0798      	lsls	r0, r3, #30
    2e54:	d53c      	bpl.n	2ed0 <nrfx_twim_0_irq_handler+0x150>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    2e56:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    2e58:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    2e5c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    2e60:	b90b      	cbnz	r3, 2e66 <nrfx_twim_0_irq_handler+0xe6>
        p_cb->busy = false;
    2e62:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    2e66:	6a23      	ldr	r3, [r4, #32]
    2e68:	075b      	lsls	r3, r3, #29
    2e6a:	d503      	bpl.n	2e74 <nrfx_twim_0_irq_handler+0xf4>
    2e6c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2e70:	2b00      	cmp	r3, #0
    2e72:	d0aa      	beq.n	2dca <nrfx_twim_0_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
    2e74:	e9d4 3100 	ldrd	r3, r1, [r4]
    2e78:	4668      	mov	r0, sp
    2e7a:	4798      	blx	r3
}
    2e7c:	e7a5      	b.n	2dca <nrfx_twim_0_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e7e:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    2e82:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    2e86:	7b23      	ldrb	r3, [r4, #12]
    2e88:	b983      	cbnz	r3, 2eac <nrfx_twim_0_irq_handler+0x12c>
            event.xfer_desc = p_cb->xfer_desc;
    2e8a:	4f1a      	ldr	r7, [pc, #104]	; (2ef4 <nrfx_twim_0_irq_handler+0x174>)
    2e8c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2e8e:	ae01      	add	r6, sp, #4
    2e90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2e92:	683b      	ldr	r3, [r7, #0]
    2e94:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    2e96:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d1d4      	bne.n	2e48 <nrfx_twim_0_irq_handler+0xc8>
    p_reg->SHORTS = mask;
    2e9e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    2ea2:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    2ea4:	4b14      	ldr	r3, [pc, #80]	; (2ef8 <nrfx_twim_0_irq_handler+0x178>)
    2ea6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    2eaa:	e7c9      	b.n	2e40 <nrfx_twim_0_irq_handler+0xc0>
    p_reg->SHORTS = mask;
    2eac:	f44f 7300 	mov.w	r3, #512	; 0x200
    2eb0:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    2eb4:	f240 2302 	movw	r3, #514	; 0x202
    2eb8:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    2eba:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    2ebe:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    2ec2:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    2ec4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ec8:	2301      	movs	r3, #1
    2eca:	60ab      	str	r3, [r5, #8]
    2ecc:	622b      	str	r3, [r5, #32]
            return;
    2ece:	e77c      	b.n	2dca <nrfx_twim_0_irq_handler+0x4a>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    2ed0:	0759      	lsls	r1, r3, #29
    2ed2:	d501      	bpl.n	2ed8 <nrfx_twim_0_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    2ed4:	2302      	movs	r3, #2
    2ed6:	e7bf      	b.n	2e58 <nrfx_twim_0_irq_handler+0xd8>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    2ed8:	07da      	lsls	r2, r3, #31
    2eda:	d501      	bpl.n	2ee0 <nrfx_twim_0_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    2edc:	2303      	movs	r3, #3
    2ede:	e7bb      	b.n	2e58 <nrfx_twim_0_irq_handler+0xd8>
    else if (p_cb->error)
    2ee0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d0b7      	beq.n	2e58 <nrfx_twim_0_irq_handler+0xd8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    2ee8:	2304      	movs	r3, #4
    2eea:	e7b5      	b.n	2e58 <nrfx_twim_0_irq_handler+0xd8>
    2eec:	40003000 	.word	0x40003000
    2ef0:	2000036c 	.word	0x2000036c
    2ef4:	20000378 	.word	0x20000378
    2ef8:	019c0202 	.word	0x019c0202
    2efc:	e000e100 	.word	0xe000e100

00002f00 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    2f00:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    2f02:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    2f06:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    2f08:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    2f0a:	6002      	str	r2, [r0, #0]
}
    2f0c:	4802      	ldr	r0, [pc, #8]	; (2f18 <nrf_gpio_pin_port_decode+0x18>)
    2f0e:	bf18      	it	ne
    2f10:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    2f14:	4770      	bx	lr
    2f16:	bf00      	nop
    2f18:	50000300 	.word	0x50000300

00002f1c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    2f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f1e:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    2f20:	f001 fa94 	bl	444c <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    2f24:	4608      	mov	r0, r1
    2f26:	f001 fa91 	bl	444c <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2f2a:	a801      	add	r0, sp, #4
    2f2c:	9601      	str	r6, [sp, #4]
    2f2e:	f7ff ffe7 	bl	2f00 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2f32:	9b01      	ldr	r3, [sp, #4]
    2f34:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    2f38:	460c      	mov	r4, r1
    2f3a:	f240 610d 	movw	r1, #1549	; 0x60d
    2f3e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2f42:	a801      	add	r0, sp, #4
    2f44:	9401      	str	r4, [sp, #4]
    2f46:	f7ff ffdb 	bl	2f00 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2f4a:	9b01      	ldr	r3, [sp, #4]
    2f4c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    2f50:	2509      	movs	r5, #9
    2f52:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    2f56:	2004      	movs	r0, #4
    2f58:	f001 fa10 	bl	437c <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2f5c:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2f5e:	a801      	add	r0, sp, #4
    2f60:	9401      	str	r4, [sp, #4]
    2f62:	f7ff ffcd 	bl	2f00 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2f66:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    2f68:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2f6c:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    2f6e:	07db      	lsls	r3, r3, #31
    2f70:	d415      	bmi.n	2f9e <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2f72:	a801      	add	r0, sp, #4
    2f74:	9601      	str	r6, [sp, #4]
    2f76:	f7ff ffc3 	bl	2f00 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2f7a:	9b01      	ldr	r3, [sp, #4]
    2f7c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    2f80:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    2f84:	2004      	movs	r0, #4
    2f86:	f001 f9f9 	bl	437c <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    2f8a:	4630      	mov	r0, r6
    2f8c:	f001 fa5e 	bl	444c <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    2f90:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    2f92:	2004      	movs	r0, #4
    2f94:	f001 f9f2 	bl	437c <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    2f98:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    2f9c:	d1df      	bne.n	2f5e <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2f9e:	a801      	add	r0, sp, #4
    2fa0:	9401      	str	r4, [sp, #4]
    2fa2:	f7ff ffad 	bl	2f00 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2fa6:	9a01      	ldr	r2, [sp, #4]
    2fa8:	2301      	movs	r3, #1
    2faa:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    2fac:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    2fb0:	2004      	movs	r0, #4
    2fb2:	f001 f9e3 	bl	437c <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    2fb6:	4620      	mov	r0, r4
    2fb8:	f001 fa48 	bl	444c <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    2fbc:	2004      	movs	r0, #4
    2fbe:	f001 f9dd 	bl	437c <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2fc2:	a801      	add	r0, sp, #4
    2fc4:	9401      	str	r4, [sp, #4]
    2fc6:	f7ff ff9b 	bl	2f00 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2fca:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    2fcc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    2fd0:	4803      	ldr	r0, [pc, #12]	; (2fe0 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2fd2:	40d3      	lsrs	r3, r2
    2fd4:	f003 0301 	and.w	r3, r3, #1
    2fd8:	1ac0      	subs	r0, r0, r3
    2fda:	b003      	add	sp, #12
    2fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fde:	bf00      	nop
    2fe0:	0bad0001 	.word	0x0bad0001

00002fe4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2fe4:	4b0e      	ldr	r3, [pc, #56]	; (3020 <z_sys_init_run_level+0x3c>)
{
    2fe6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2fe8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2fec:	3001      	adds	r0, #1
    2fee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2ff2:	42a6      	cmp	r6, r4
    2ff4:	d800      	bhi.n	2ff8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    2ff6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    2ff8:	e9d4 3500 	ldrd	r3, r5, [r4]
    2ffc:	4628      	mov	r0, r5
    2ffe:	4798      	blx	r3
		if (dev != NULL) {
    3000:	b165      	cbz	r5, 301c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    3002:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    3004:	b130      	cbz	r0, 3014 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3006:	2800      	cmp	r0, #0
    3008:	bfb8      	it	lt
    300a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    300c:	28ff      	cmp	r0, #255	; 0xff
    300e:	bfa8      	it	ge
    3010:	20ff      	movge	r0, #255	; 0xff
    3012:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3014:	785a      	ldrb	r2, [r3, #1]
    3016:	f042 0201 	orr.w	r2, r2, #1
    301a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    301c:	3408      	adds	r4, #8
    301e:	e7e8      	b.n	2ff2 <z_sys_init_run_level+0xe>
    3020:	000049dc 	.word	0x000049dc

00003024 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    3024:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    3026:	4605      	mov	r5, r0
    3028:	b910      	cbnz	r0, 3030 <z_impl_device_get_binding+0xc>
		return NULL;
    302a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    302c:	4620      	mov	r0, r4
    302e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    3030:	7803      	ldrb	r3, [r0, #0]
    3032:	2b00      	cmp	r3, #0
    3034:	d0f9      	beq.n	302a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    3036:	4c0e      	ldr	r4, [pc, #56]	; (3070 <z_impl_device_get_binding+0x4c>)
    3038:	4e0e      	ldr	r6, [pc, #56]	; (3074 <z_impl_device_get_binding+0x50>)
    303a:	42b4      	cmp	r4, r6
    303c:	d108      	bne.n	3050 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    303e:	4c0c      	ldr	r4, [pc, #48]	; (3070 <z_impl_device_get_binding+0x4c>)
    3040:	42b4      	cmp	r4, r6
    3042:	d0f2      	beq.n	302a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3044:	4620      	mov	r0, r4
    3046:	f001 fa0f 	bl	4468 <z_device_ready>
    304a:	b950      	cbnz	r0, 3062 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    304c:	3418      	adds	r4, #24
    304e:	e7f7      	b.n	3040 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    3050:	4620      	mov	r0, r4
    3052:	f001 fa09 	bl	4468 <z_device_ready>
    3056:	b110      	cbz	r0, 305e <z_impl_device_get_binding+0x3a>
    3058:	6823      	ldr	r3, [r4, #0]
    305a:	42ab      	cmp	r3, r5
    305c:	d0e6      	beq.n	302c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    305e:	3418      	adds	r4, #24
    3060:	e7eb      	b.n	303a <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3062:	6821      	ldr	r1, [r4, #0]
    3064:	4628      	mov	r0, r5
    3066:	f000 fff6 	bl	4056 <strcmp>
    306a:	2800      	cmp	r0, #0
    306c:	d1ee      	bne.n	304c <z_impl_device_get_binding+0x28>
    306e:	e7dd      	b.n	302c <z_impl_device_get_binding+0x8>
    3070:	20000064 	.word	0x20000064
    3074:	2000010c 	.word	0x2000010c

00003078 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3078:	4802      	ldr	r0, [pc, #8]	; (3084 <z_bss_zero+0xc>)
    307a:	4a03      	ldr	r2, [pc, #12]	; (3088 <z_bss_zero+0x10>)
    307c:	2100      	movs	r1, #0
    307e:	1a12      	subs	r2, r2, r0
    3080:	f001 b820 	b.w	40c4 <memset>
    3084:	20000110 	.word	0x20000110
    3088:	200003e4 	.word	0x200003e4

0000308c <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    308c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    308e:	4b0a      	ldr	r3, [pc, #40]	; (30b8 <bg_thread_main+0x2c>)
    3090:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3092:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3094:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3096:	f7ff ffa5 	bl	2fe4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    309a:	f000 fdd7 	bl	3c4c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    309e:	2003      	movs	r0, #3
    30a0:	f7ff ffa0 	bl	2fe4 <z_sys_init_run_level>

	z_init_static_threads();
    30a4:	f000 f8c4 	bl	3230 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    30a8:	f7fd f9b0 	bl	40c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    30ac:	4a03      	ldr	r2, [pc, #12]	; (30bc <bg_thread_main+0x30>)
    30ae:	7b13      	ldrb	r3, [r2, #12]
    30b0:	f023 0301 	bic.w	r3, r3, #1
    30b4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    30b6:	bd08      	pop	{r3, pc}
    30b8:	200003e2 	.word	0x200003e2
    30bc:	20000190 	.word	0x20000190

000030c0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    30c0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    30c4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 31a8 <z_cstart+0xe8>
    30c8:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    30ca:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    30ce:	4d37      	ldr	r5, [pc, #220]	; (31ac <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    30d0:	4e37      	ldr	r6, [pc, #220]	; (31b0 <z_cstart+0xf0>)
    30d2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    30d4:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 31b4 <z_cstart+0xf4>
	z_setup_new_thread(thread, stack,
    30d8:	4f37      	ldr	r7, [pc, #220]	; (31b8 <z_cstart+0xf8>)
    30da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30de:	2400      	movs	r4, #0
    30e0:	616b      	str	r3, [r5, #20]
    30e2:	23e0      	movs	r3, #224	; 0xe0
    30e4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    30e8:	77ec      	strb	r4, [r5, #31]
    30ea:	762c      	strb	r4, [r5, #24]
    30ec:	766c      	strb	r4, [r5, #25]
    30ee:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    30f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    30f2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    30f6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    30f8:	f7fe fb3e 	bl	1778 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    30fc:	f7fe f9f2 	bl	14e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3104:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3106:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3108:	f7fe fbd8 	bl	18bc <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    310c:	4d2b      	ldr	r5, [pc, #172]	; (31bc <z_cstart+0xfc>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    310e:	f7fe fb67 	bl	17e0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3112:	f240 1301 	movw	r3, #257	; 0x101
    3116:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    311a:	ab06      	add	r3, sp, #24
    311c:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    311e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3122:	f001 f9a0 	bl	4466 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3126:	4620      	mov	r0, r4
    3128:	f7ff ff5c 	bl	2fe4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    312c:	2001      	movs	r0, #1
    312e:	f7ff ff59 	bl	2fe4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3132:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    3136:	f000 fb2f 	bl	3798 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    313a:	4b21      	ldr	r3, [pc, #132]	; (31c0 <z_cstart+0x100>)
	_kernel.ready_q.cache = &z_main_thread;
    313c:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    313e:	4921      	ldr	r1, [pc, #132]	; (31c4 <z_cstart+0x104>)
    3140:	9305      	str	r3, [sp, #20]
    3142:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3146:	4653      	mov	r3, sl
    3148:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    314c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3150:	9400      	str	r4, [sp, #0]
    3152:	4630      	mov	r0, r6
    3154:	f000 f83c 	bl	31d0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3158:	7b73      	ldrb	r3, [r6, #13]
    315a:	4680      	mov	r8, r0
    315c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    3160:	4630      	mov	r0, r6
    3162:	7373      	strb	r3, [r6, #13]
    3164:	f001 fa16 	bl	4594 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    3168:	230f      	movs	r3, #15
    316a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    316e:	4916      	ldr	r1, [pc, #88]	; (31c8 <z_cstart+0x108>)
    3170:	4b16      	ldr	r3, [pc, #88]	; (31cc <z_cstart+0x10c>)
    3172:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3176:	e9cd b404 	strd	fp, r4, [sp, #16]
    317a:	e9cd 5400 	strd	r5, r4, [sp]
    317e:	4638      	mov	r0, r7
    3180:	f000 f826 	bl	31d0 <z_setup_new_thread>
    3184:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3186:	60ef      	str	r7, [r5, #12]
    3188:	f023 0304 	bic.w	r3, r3, #4
    318c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    318e:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    3192:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    3196:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    3198:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    319c:	4652      	mov	r2, sl
    319e:	4641      	mov	r1, r8
    31a0:	4630      	mov	r0, r6
    31a2:	f7fe f98d 	bl	14c0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    31a6:	bf00      	nop
    31a8:	20001128 	.word	0x20001128
    31ac:	e000ed00 	.word	0xe000ed00
    31b0:	20000190 	.word	0x20000190
    31b4:	0000308d 	.word	0x0000308d
    31b8:	20000110 	.word	0x20000110
    31bc:	200003a0 	.word	0x200003a0
    31c0:	00004a66 	.word	0x00004a66
    31c4:	200003e8 	.word	0x200003e8
    31c8:	200007e8 	.word	0x200007e8
    31cc:	000032e9 	.word	0x000032e9

000031d0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    31d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    31d4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    31d6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    31d8:	2604      	movs	r6, #4
    31da:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    31dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    31de:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    31e0:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    31e4:	1dd6      	adds	r6, r2, #7
    31e6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    31ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    31ec:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    31ee:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    31f2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    31f6:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    31fa:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    31fc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    31fe:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3200:	9202      	str	r2, [sp, #8]
    3202:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3204:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    3206:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    320a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    320c:	9200      	str	r2, [sp, #0]
    320e:	4642      	mov	r2, r8
{
    3210:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3212:	f7fe f939 	bl	1488 <arch_new_thread>
	if (!_current) {
    3216:	4b05      	ldr	r3, [pc, #20]	; (322c <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    3218:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    321a:	689b      	ldr	r3, [r3, #8]
    321c:	b103      	cbz	r3, 3220 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3220:	6723      	str	r3, [r4, #112]	; 0x70
}
    3222:	4640      	mov	r0, r8
    3224:	b004      	add	sp, #16
    3226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    322a:	bf00      	nop
    322c:	200003a0 	.word	0x200003a0

00003230 <z_init_static_threads>:
{
    3230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3234:	4c29      	ldr	r4, [pc, #164]	; (32dc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3236:	4d2a      	ldr	r5, [pc, #168]	; (32e0 <z_init_static_threads+0xb0>)
{
    3238:	b087      	sub	sp, #28
    323a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    323c:	42ae      	cmp	r6, r5
    323e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3242:	d30f      	bcc.n	3264 <z_init_static_threads+0x34>
	k_sched_lock();
    3244:	f000 f906 	bl	3454 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3248:	4c24      	ldr	r4, [pc, #144]	; (32dc <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    324a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 32e4 <z_init_static_threads+0xb4>
		} else {
			return (t * to_hz + off) / from_hz;
    324e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3252:	f240 37e7 	movw	r7, #999	; 0x3e7
    3256:	42ac      	cmp	r4, r5
    3258:	d320      	bcc.n	329c <z_init_static_threads+0x6c>
}
    325a:	b007      	add	sp, #28
    325c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3260:	f000 b9b0 	b.w	35c4 <k_sched_unlock>
		z_setup_new_thread(
    3264:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3268:	9305      	str	r3, [sp, #20]
    326a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    326e:	9304      	str	r3, [sp, #16]
    3270:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3274:	9303      	str	r3, [sp, #12]
    3276:	f854 3c18 	ldr.w	r3, [r4, #-24]
    327a:	9302      	str	r3, [sp, #8]
    327c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3280:	9301      	str	r3, [sp, #4]
    3282:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3286:	9300      	str	r3, [sp, #0]
    3288:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    328c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3290:	f7ff ff9e 	bl	31d0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3294:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3298:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    329a:	e7ce      	b.n	323a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    329c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    329e:	1c5a      	adds	r2, r3, #1
    32a0:	d00d      	beq.n	32be <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    32a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    32a6:	2100      	movs	r1, #0
    32a8:	4638      	mov	r0, r7
    32aa:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    32ae:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    32b2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    32b6:	d104      	bne.n	32c2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    32b8:	4640      	mov	r0, r8
    32ba:	f000 fa4f 	bl	375c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    32be:	3430      	adds	r4, #48	; 0x30
    32c0:	e7c9      	b.n	3256 <z_init_static_threads+0x26>
    32c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    32c6:	2300      	movs	r3, #0
    32c8:	f7fc ff1a 	bl	100 <__aeabi_uldivmod>
    32cc:	4602      	mov	r2, r0
    32ce:	460b      	mov	r3, r1
    32d0:	f108 0018 	add.w	r0, r8, #24
    32d4:	4649      	mov	r1, r9
    32d6:	f000 fbcb 	bl	3a70 <z_add_timeout>
    32da:	e7f0      	b.n	32be <z_init_static_threads+0x8e>
    32dc:	2000010c 	.word	0x2000010c
    32e0:	2000010c 	.word	0x2000010c
    32e4:	000045b5 	.word	0x000045b5

000032e8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    32e8:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    32ea:	4c09      	ldr	r4, [pc, #36]	; (3310 <idle+0x28>)
	__asm__ volatile(
    32ec:	f04f 0220 	mov.w	r2, #32
    32f0:	f3ef 8311 	mrs	r3, BASEPRI
    32f4:	f382 8811 	msr	BASEPRI, r2
    32f8:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    32fc:	f001 f9aa 	bl	4654 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    3300:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    3302:	f7fd fd7f 	bl	e04 <pm_system_suspend>
    3306:	2800      	cmp	r0, #0
    3308:	d1f0      	bne.n	32ec <idle+0x4>
	arch_cpu_idle();
    330a:	f7fe f8f1 	bl	14f0 <arch_cpu_idle>
}
    330e:	e7ed      	b.n	32ec <idle+0x4>
    3310:	200003a0 	.word	0x200003a0

00003314 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3314:	b538      	push	{r3, r4, r5, lr}
    3316:	4604      	mov	r4, r0
    3318:	f04f 0320 	mov.w	r3, #32
    331c:	f3ef 8511 	mrs	r5, BASEPRI
    3320:	f383 8811 	msr	BASEPRI, r3
    3324:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3328:	f001 f966 	bl	45f8 <z_unpend_first_thread>

	if (thread != NULL) {
    332c:	b148      	cbz	r0, 3342 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    332e:	2200      	movs	r2, #0
    3330:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3332:	f001 f92f 	bl	4594 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3336:	4629      	mov	r1, r5
    3338:	4805      	ldr	r0, [pc, #20]	; (3350 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    333a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    333e:	f000 b877 	b.w	3430 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3342:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3346:	429a      	cmp	r2, r3
    3348:	bf18      	it	ne
    334a:	3301      	addne	r3, #1
    334c:	60a3      	str	r3, [r4, #8]
}
    334e:	e7f2      	b.n	3336 <z_impl_k_sem_give+0x22>
    3350:	200003e3 	.word	0x200003e3

00003354 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3354:	b513      	push	{r0, r1, r4, lr}
    3356:	f04f 0420 	mov.w	r4, #32
    335a:	f3ef 8111 	mrs	r1, BASEPRI
    335e:	f384 8811 	msr	BASEPRI, r4
    3362:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3366:	6884      	ldr	r4, [r0, #8]
    3368:	b144      	cbz	r4, 337c <z_impl_k_sem_take+0x28>
		sem->count--;
    336a:	3c01      	subs	r4, #1
    336c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    336e:	f381 8811 	msr	BASEPRI, r1
    3372:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3376:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3378:	b002      	add	sp, #8
    337a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    337c:	ea52 0403 	orrs.w	r4, r2, r3
    3380:	d106      	bne.n	3390 <z_impl_k_sem_take+0x3c>
    3382:	f381 8811 	msr	BASEPRI, r1
    3386:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    338a:	f06f 000f 	mvn.w	r0, #15
    338e:	e7f3      	b.n	3378 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3390:	e9cd 2300 	strd	r2, r3, [sp]
    3394:	4602      	mov	r2, r0
    3396:	4802      	ldr	r0, [pc, #8]	; (33a0 <z_impl_k_sem_take+0x4c>)
    3398:	f000 f8ce 	bl	3538 <z_pend_curr>
	return ret;
    339c:	e7ec      	b.n	3378 <z_impl_k_sem_take+0x24>
    339e:	bf00      	nop
    33a0:	200003e3 	.word	0x200003e3

000033a4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    33a4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    33a6:	4c08      	ldr	r4, [pc, #32]	; (33c8 <z_reset_time_slice+0x24>)
    33a8:	6823      	ldr	r3, [r4, #0]
    33aa:	b15b      	cbz	r3, 33c4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    33ac:	f7fd ffda 	bl	1364 <sys_clock_elapsed>
    33b0:	4603      	mov	r3, r0
    33b2:	6820      	ldr	r0, [r4, #0]
    33b4:	4a05      	ldr	r2, [pc, #20]	; (33cc <z_reset_time_slice+0x28>)
    33b6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    33b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    33bc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    33be:	2100      	movs	r1, #0
    33c0:	f001 b958 	b.w	4674 <z_set_timeout_expiry>
}
    33c4:	bd10      	pop	{r4, pc}
    33c6:	bf00      	nop
    33c8:	200003d8 	.word	0x200003d8
    33cc:	200003a0 	.word	0x200003a0

000033d0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    33d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33d2:	4604      	mov	r4, r0
    33d4:	460d      	mov	r5, r1
	__asm__ volatile(
    33d6:	f04f 0320 	mov.w	r3, #32
    33da:	f3ef 8611 	mrs	r6, BASEPRI
    33de:	f383 8811 	msr	BASEPRI, r3
    33e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    33e6:	4b0f      	ldr	r3, [pc, #60]	; (3424 <k_sched_time_slice_set+0x54>)
    33e8:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    33ea:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    33ee:	f240 30e7 	movw	r0, #999	; 0x3e7
    33f2:	6119      	str	r1, [r3, #16]
    33f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    33f8:	2300      	movs	r3, #0
    33fa:	fbe4 0107 	umlal	r0, r1, r4, r7
    33fe:	f7fc fe7f 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3402:	2c00      	cmp	r4, #0
    3404:	4b08      	ldr	r3, [pc, #32]	; (3428 <k_sched_time_slice_set+0x58>)
    3406:	dc09      	bgt.n	341c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    3408:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    340a:	4b08      	ldr	r3, [pc, #32]	; (342c <k_sched_time_slice_set+0x5c>)
    340c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    340e:	f7ff ffc9 	bl	33a4 <z_reset_time_slice>
	__asm__ volatile(
    3412:	f386 8811 	msr	BASEPRI, r6
    3416:	f3bf 8f6f 	isb	sy
	}
}
    341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    341c:	2802      	cmp	r0, #2
    341e:	bfb8      	it	lt
    3420:	2002      	movlt	r0, #2
    3422:	e7f1      	b.n	3408 <k_sched_time_slice_set+0x38>
    3424:	200003a0 	.word	0x200003a0
    3428:	200003d8 	.word	0x200003d8
    342c:	200003d4 	.word	0x200003d4

00003430 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3430:	b949      	cbnz	r1, 3446 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3432:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    3436:	b930      	cbnz	r0, 3446 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3438:	4b05      	ldr	r3, [pc, #20]	; (3450 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    343a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    343c:	689b      	ldr	r3, [r3, #8]
    343e:	429a      	cmp	r2, r3
    3440:	d001      	beq.n	3446 <z_reschedule+0x16>
	ret = arch_swap(key);
    3442:	f7fd bf9d 	b.w	1380 <arch_swap>
    3446:	f381 8811 	msr	BASEPRI, r1
    344a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    344e:	4770      	bx	lr
    3450:	200003a0 	.word	0x200003a0

00003454 <k_sched_lock>:
	__asm__ volatile(
    3454:	f04f 0320 	mov.w	r3, #32
    3458:	f3ef 8111 	mrs	r1, BASEPRI
    345c:	f383 8811 	msr	BASEPRI, r3
    3460:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3464:	4b04      	ldr	r3, [pc, #16]	; (3478 <k_sched_lock+0x24>)
    3466:	689a      	ldr	r2, [r3, #8]
    3468:	7bd3      	ldrb	r3, [r2, #15]
    346a:	3b01      	subs	r3, #1
    346c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    346e:	f381 8811 	msr	BASEPRI, r1
    3472:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3476:	4770      	bx	lr
    3478:	200003a0 	.word	0x200003a0

0000347c <update_cache>:
{
    347c:	b538      	push	{r3, r4, r5, lr}
    347e:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    3480:	480c      	ldr	r0, [pc, #48]	; (34b4 <update_cache+0x38>)
    3482:	4d0d      	ldr	r5, [pc, #52]	; (34b8 <update_cache+0x3c>)
    3484:	f001 f856 	bl	4534 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3488:	4604      	mov	r4, r0
    348a:	b900      	cbnz	r0, 348e <update_cache+0x12>
    348c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    348e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3490:	b94a      	cbnz	r2, 34a6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    3492:	7b5a      	ldrb	r2, [r3, #13]
    3494:	06d2      	lsls	r2, r2, #27
    3496:	d106      	bne.n	34a6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3498:	69a2      	ldr	r2, [r4, #24]
    349a:	b922      	cbnz	r2, 34a6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    349c:	89da      	ldrh	r2, [r3, #14]
    349e:	2a7f      	cmp	r2, #127	; 0x7f
    34a0:	d901      	bls.n	34a6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    34a2:	626b      	str	r3, [r5, #36]	; 0x24
}
    34a4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    34a6:	429c      	cmp	r4, r3
    34a8:	d001      	beq.n	34ae <update_cache+0x32>
			z_reset_time_slice();
    34aa:	f7ff ff7b 	bl	33a4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    34ae:	626c      	str	r4, [r5, #36]	; 0x24
}
    34b0:	e7f8      	b.n	34a4 <update_cache+0x28>
    34b2:	bf00      	nop
    34b4:	200003c8 	.word	0x200003c8
    34b8:	200003a0 	.word	0x200003a0

000034bc <unready_thread>:
{
    34bc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    34be:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    34c2:	7b43      	ldrb	r3, [r0, #13]
    34c4:	2a00      	cmp	r2, #0
{
    34c6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    34c8:	da04      	bge.n	34d4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    34ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    34ce:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    34d0:	f001 f808 	bl	44e4 <sys_dlist_remove>
	update_cache(thread == _current);
    34d4:	4b04      	ldr	r3, [pc, #16]	; (34e8 <unready_thread+0x2c>)
    34d6:	6898      	ldr	r0, [r3, #8]
    34d8:	1a43      	subs	r3, r0, r1
    34da:	4258      	negs	r0, r3
    34dc:	4158      	adcs	r0, r3
}
    34de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    34e2:	f7ff bfcb 	b.w	347c <update_cache>
    34e6:	bf00      	nop
    34e8:	200003a0 	.word	0x200003a0

000034ec <pend>:
{
    34ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34f0:	4606      	mov	r6, r0
    34f2:	4615      	mov	r5, r2
    34f4:	461c      	mov	r4, r3
	__asm__ volatile(
    34f6:	f04f 0320 	mov.w	r3, #32
    34fa:	f3ef 8711 	mrs	r7, BASEPRI
    34fe:	f383 8811 	msr	BASEPRI, r3
    3502:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    3506:	f001 f81b 	bl	4540 <add_to_waitq_locked>
	__asm__ volatile(
    350a:	f387 8811 	msr	BASEPRI, r7
    350e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3512:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3516:	bf08      	it	eq
    3518:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    351c:	d008      	beq.n	3530 <pend+0x44>
    351e:	462a      	mov	r2, r5
    3520:	4623      	mov	r3, r4
    3522:	f106 0018 	add.w	r0, r6, #24
    3526:	4903      	ldr	r1, [pc, #12]	; (3534 <pend+0x48>)
}
    3528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    352c:	f000 baa0 	b.w	3a70 <z_add_timeout>
    3530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3534:	000045b5 	.word	0x000045b5

00003538 <z_pend_curr>:
{
    3538:	b510      	push	{r4, lr}
	pending_current = _current;
    353a:	4b07      	ldr	r3, [pc, #28]	; (3558 <z_pend_curr+0x20>)
    353c:	6898      	ldr	r0, [r3, #8]
    353e:	4b07      	ldr	r3, [pc, #28]	; (355c <z_pend_curr+0x24>)
{
    3540:	460c      	mov	r4, r1
	pending_current = _current;
    3542:	6018      	str	r0, [r3, #0]
{
    3544:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    3546:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    354a:	f7ff ffcf 	bl	34ec <pend>
    354e:	4620      	mov	r0, r4
}
    3550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3554:	f7fd bf14 	b.w	1380 <arch_swap>
    3558:	200003a0 	.word	0x200003a0
    355c:	200003d0 	.word	0x200003d0

00003560 <z_impl_k_thread_suspend>:
{
    3560:	b570      	push	{r4, r5, r6, lr}
    3562:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3564:	3018      	adds	r0, #24
    3566:	f001 f85f 	bl	4628 <z_abort_timeout>
	__asm__ volatile(
    356a:	f04f 0320 	mov.w	r3, #32
    356e:	f3ef 8611 	mrs	r6, BASEPRI
    3572:	f383 8811 	msr	BASEPRI, r3
    3576:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    357a:	f994 200d 	ldrsb.w	r2, [r4, #13]
    357e:	7b63      	ldrb	r3, [r4, #13]
    3580:	2a00      	cmp	r2, #0
    3582:	da05      	bge.n	3590 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3588:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    358a:	4620      	mov	r0, r4
    358c:	f000 ffaa 	bl	44e4 <sys_dlist_remove>
		update_cache(thread == _current);
    3590:	4d0b      	ldr	r5, [pc, #44]	; (35c0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3592:	7b63      	ldrb	r3, [r4, #13]
    3594:	68a8      	ldr	r0, [r5, #8]
    3596:	f043 0310 	orr.w	r3, r3, #16
    359a:	7363      	strb	r3, [r4, #13]
    359c:	1b03      	subs	r3, r0, r4
    359e:	4258      	negs	r0, r3
    35a0:	4158      	adcs	r0, r3
    35a2:	f7ff ff6b 	bl	347c <update_cache>
	__asm__ volatile(
    35a6:	f386 8811 	msr	BASEPRI, r6
    35aa:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    35ae:	68ab      	ldr	r3, [r5, #8]
    35b0:	42a3      	cmp	r3, r4
    35b2:	d103      	bne.n	35bc <z_impl_k_thread_suspend+0x5c>
}
    35b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    35b8:	f000 bfb2 	b.w	4520 <z_reschedule_unlocked>
}
    35bc:	bd70      	pop	{r4, r5, r6, pc}
    35be:	bf00      	nop
    35c0:	200003a0 	.word	0x200003a0

000035c4 <k_sched_unlock>:
{
    35c4:	b510      	push	{r4, lr}
	__asm__ volatile(
    35c6:	f04f 0320 	mov.w	r3, #32
    35ca:	f3ef 8411 	mrs	r4, BASEPRI
    35ce:	f383 8811 	msr	BASEPRI, r3
    35d2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    35d6:	4b08      	ldr	r3, [pc, #32]	; (35f8 <k_sched_unlock+0x34>)
    35d8:	689a      	ldr	r2, [r3, #8]
    35da:	7bd3      	ldrb	r3, [r2, #15]
    35dc:	3301      	adds	r3, #1
    35de:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    35e0:	2000      	movs	r0, #0
    35e2:	f7ff ff4b 	bl	347c <update_cache>
	__asm__ volatile(
    35e6:	f384 8811 	msr	BASEPRI, r4
    35ea:	f3bf 8f6f 	isb	sy
}
    35ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    35f2:	f000 bf95 	b.w	4520 <z_reschedule_unlocked>
    35f6:	bf00      	nop
    35f8:	200003a0 	.word	0x200003a0

000035fc <move_thread_to_end_of_prio_q>:
{
    35fc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    35fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3602:	7b43      	ldrb	r3, [r0, #13]
    3604:	2a00      	cmp	r2, #0
{
    3606:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3608:	da04      	bge.n	3614 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    360a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    360e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3610:	f000 ff68 	bl	44e4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3614:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3616:	4a15      	ldr	r2, [pc, #84]	; (366c <move_thread_to_end_of_prio_q+0x70>)
    3618:	f063 037f 	orn	r3, r3, #127	; 0x7f
    361c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    361e:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3622:	f102 0528 	add.w	r5, r2, #40	; 0x28
    3626:	42ab      	cmp	r3, r5
    3628:	d01b      	beq.n	3662 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    362a:	b1d3      	cbz	r3, 3662 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    362c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3630:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    3634:	4286      	cmp	r6, r0
    3636:	d00f      	beq.n	3658 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    3638:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    363a:	2800      	cmp	r0, #0
    363c:	dd0c      	ble.n	3658 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    363e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3640:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3644:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3646:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3648:	6890      	ldr	r0, [r2, #8]
    364a:	1a43      	subs	r3, r0, r1
    364c:	4258      	negs	r0, r3
}
    364e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3652:	4158      	adcs	r0, r3
    3654:	f7ff bf12 	b.w	347c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3658:	42a3      	cmp	r3, r4
    365a:	d002      	beq.n	3662 <move_thread_to_end_of_prio_q+0x66>
    365c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    365e:	2b00      	cmp	r3, #0
    3660:	d1e6      	bne.n	3630 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    3662:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    3666:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3668:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    366a:	e7ed      	b.n	3648 <move_thread_to_end_of_prio_q+0x4c>
    366c:	200003a0 	.word	0x200003a0

00003670 <z_time_slice>:
{
    3670:	b538      	push	{r3, r4, r5, lr}
    3672:	4601      	mov	r1, r0
	__asm__ volatile(
    3674:	f04f 0320 	mov.w	r3, #32
    3678:	f3ef 8411 	mrs	r4, BASEPRI
    367c:	f383 8811 	msr	BASEPRI, r3
    3680:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3684:	4b15      	ldr	r3, [pc, #84]	; (36dc <z_time_slice+0x6c>)
    3686:	4a16      	ldr	r2, [pc, #88]	; (36e0 <z_time_slice+0x70>)
    3688:	6898      	ldr	r0, [r3, #8]
    368a:	6815      	ldr	r5, [r2, #0]
    368c:	42a8      	cmp	r0, r5
    368e:	d106      	bne.n	369e <z_time_slice+0x2e>
			z_reset_time_slice();
    3690:	f7ff fe88 	bl	33a4 <z_reset_time_slice>
	__asm__ volatile(
    3694:	f384 8811 	msr	BASEPRI, r4
    3698:	f3bf 8f6f 	isb	sy
}
    369c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    369e:	2500      	movs	r5, #0
    36a0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    36a2:	4a10      	ldr	r2, [pc, #64]	; (36e4 <z_time_slice+0x74>)
    36a4:	6812      	ldr	r2, [r2, #0]
    36a6:	b1ba      	cbz	r2, 36d8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    36a8:	89c2      	ldrh	r2, [r0, #14]
    36aa:	2a7f      	cmp	r2, #127	; 0x7f
    36ac:	d814      	bhi.n	36d8 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    36ae:	7b42      	ldrb	r2, [r0, #13]
    36b0:	06d2      	lsls	r2, r2, #27
    36b2:	d111      	bne.n	36d8 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    36b4:	4a0c      	ldr	r2, [pc, #48]	; (36e8 <z_time_slice+0x78>)
    36b6:	f990 500e 	ldrsb.w	r5, [r0, #14]
    36ba:	6812      	ldr	r2, [r2, #0]
    36bc:	4295      	cmp	r5, r2
    36be:	db0b      	blt.n	36d8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    36c0:	4a0a      	ldr	r2, [pc, #40]	; (36ec <z_time_slice+0x7c>)
    36c2:	4290      	cmp	r0, r2
    36c4:	d008      	beq.n	36d8 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    36c6:	691a      	ldr	r2, [r3, #16]
    36c8:	428a      	cmp	r2, r1
    36ca:	dc02      	bgt.n	36d2 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    36cc:	f7ff ff96 	bl	35fc <move_thread_to_end_of_prio_q>
    36d0:	e7de      	b.n	3690 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    36d2:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    36d4:	611a      	str	r2, [r3, #16]
    36d6:	e7dd      	b.n	3694 <z_time_slice+0x24>
    36d8:	2200      	movs	r2, #0
    36da:	e7fb      	b.n	36d4 <z_time_slice+0x64>
    36dc:	200003a0 	.word	0x200003a0
    36e0:	200003d0 	.word	0x200003d0
    36e4:	200003d8 	.word	0x200003d8
    36e8:	200003d4 	.word	0x200003d4
    36ec:	20000110 	.word	0x20000110

000036f0 <ready_thread>:
{
    36f0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    36f2:	f990 200d 	ldrsb.w	r2, [r0, #13]
    36f6:	7b43      	ldrb	r3, [r0, #13]
    36f8:	2a00      	cmp	r2, #0
    36fa:	db2a      	blt.n	3752 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    36fc:	06da      	lsls	r2, r3, #27
    36fe:	d128      	bne.n	3752 <ready_thread+0x62>
    3700:	6982      	ldr	r2, [r0, #24]
    3702:	bb32      	cbnz	r2, 3752 <ready_thread+0x62>
	return list->head == list;
    3704:	4a14      	ldr	r2, [pc, #80]	; (3758 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3706:	f063 037f 	orn	r3, r3, #127	; 0x7f
    370a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    370c:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3710:	f102 0528 	add.w	r5, r2, #40	; 0x28
    3714:	42ab      	cmp	r3, r5
    3716:	d017      	beq.n	3748 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3718:	b1b3      	cbz	r3, 3748 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    371a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    371e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    3722:	428e      	cmp	r6, r1
    3724:	d00b      	beq.n	373e <ready_thread+0x4e>
		return b2 - b1;
    3726:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3728:	2900      	cmp	r1, #0
    372a:	dd08      	ble.n	373e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    372c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    372e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3732:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3734:	6058      	str	r0, [r3, #4]
}
    3736:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3738:	2000      	movs	r0, #0
    373a:	f7ff be9f 	b.w	347c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    373e:	42a3      	cmp	r3, r4
    3740:	d002      	beq.n	3748 <ready_thread+0x58>
    3742:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3744:	2b00      	cmp	r3, #0
    3746:	d1ea      	bne.n	371e <ready_thread+0x2e>
	node->prev = tail;
    3748:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    374c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    374e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    3750:	e7f1      	b.n	3736 <ready_thread+0x46>
}
    3752:	bc70      	pop	{r4, r5, r6}
    3754:	4770      	bx	lr
    3756:	bf00      	nop
    3758:	200003a0 	.word	0x200003a0

0000375c <z_sched_start>:
{
    375c:	b510      	push	{r4, lr}
	__asm__ volatile(
    375e:	f04f 0220 	mov.w	r2, #32
    3762:	f3ef 8411 	mrs	r4, BASEPRI
    3766:	f382 8811 	msr	BASEPRI, r2
    376a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    376e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3770:	0751      	lsls	r1, r2, #29
    3772:	d404      	bmi.n	377e <z_sched_start+0x22>
	__asm__ volatile(
    3774:	f384 8811 	msr	BASEPRI, r4
    3778:	f3bf 8f6f 	isb	sy
}
    377c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    377e:	f022 0204 	bic.w	r2, r2, #4
    3782:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3784:	f7ff ffb4 	bl	36f0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3788:	4621      	mov	r1, r4
    378a:	4802      	ldr	r0, [pc, #8]	; (3794 <z_sched_start+0x38>)
}
    378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3790:	f7ff be4e 	b.w	3430 <z_reschedule>
    3794:	200003e3 	.word	0x200003e3

00003798 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3798:	4b04      	ldr	r3, [pc, #16]	; (37ac <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    379a:	2100      	movs	r1, #0
    379c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    37a0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    37a4:	4608      	mov	r0, r1
    37a6:	f7ff be13 	b.w	33d0 <k_sched_time_slice_set>
    37aa:	bf00      	nop
    37ac:	200003a0 	.word	0x200003a0

000037b0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    37b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    37b2:	f04f 0320 	mov.w	r3, #32
    37b6:	f3ef 8511 	mrs	r5, BASEPRI
    37ba:	f383 8811 	msr	BASEPRI, r3
    37be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    37c2:	491a      	ldr	r1, [pc, #104]	; (382c <z_impl_k_yield+0x7c>)
    37c4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    37c6:	7b43      	ldrb	r3, [r0, #13]
    37c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    37cc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    37ce:	f000 fe89 	bl	44e4 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    37d2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    37d4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    37d6:	4608      	mov	r0, r1
    37d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    37dc:	735a      	strb	r2, [r3, #13]
    37de:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37e2:	4282      	cmp	r2, r0
    37e4:	d01c      	beq.n	3820 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    37e6:	b1da      	cbz	r2, 3820 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    37e8:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
    37ea:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    37ee:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    37f2:	42a6      	cmp	r6, r4
    37f4:	d00f      	beq.n	3816 <z_impl_k_yield+0x66>
		return b2 - b1;
    37f6:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    37f8:	2c00      	cmp	r4, #0
    37fa:	dd0c      	ble.n	3816 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    37fc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    37fe:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    3802:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3804:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3806:	2001      	movs	r0, #1
    3808:	f7ff fe38 	bl	347c <update_cache>
    380c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    380e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3812:	f7fd bdb5 	b.w	1380 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3816:	42ba      	cmp	r2, r7
    3818:	d002      	beq.n	3820 <z_impl_k_yield+0x70>
    381a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    381c:	2a00      	cmp	r2, #0
    381e:	d1e6      	bne.n	37ee <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    3820:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
    3822:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    3826:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3828:	62cb      	str	r3, [r1, #44]	; 0x2c
}
    382a:	e7ec      	b.n	3806 <z_impl_k_yield+0x56>
    382c:	200003a0 	.word	0x200003a0

00003830 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3830:	ea50 0301 	orrs.w	r3, r0, r1
{
    3834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3838:	4605      	mov	r5, r0
    383a:	460e      	mov	r6, r1
	if (ticks == 0) {
    383c:	d103      	bne.n	3846 <z_tick_sleep+0x16>
	z_impl_k_yield();
    383e:	f7ff ffb7 	bl	37b0 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    3842:	2000      	movs	r0, #0
    3844:	e033      	b.n	38ae <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    3846:	f06f 0401 	mvn.w	r4, #1
    384a:	1a24      	subs	r4, r4, r0
    384c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3850:	eb63 0301 	sbc.w	r3, r3, r1
    3854:	2c01      	cmp	r4, #1
    3856:	f173 0300 	sbcs.w	r3, r3, #0
    385a:	da02      	bge.n	3862 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    385c:	f000 ff24 	bl	46a8 <sys_clock_tick_get_32>
    3860:	1944      	adds	r4, r0, r5
    3862:	f04f 0320 	mov.w	r3, #32
    3866:	f3ef 8811 	mrs	r8, BASEPRI
    386a:	f383 8811 	msr	BASEPRI, r3
    386e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    3872:	4f10      	ldr	r7, [pc, #64]	; (38b4 <z_tick_sleep+0x84>)
    3874:	4b10      	ldr	r3, [pc, #64]	; (38b8 <z_tick_sleep+0x88>)
    3876:	68b8      	ldr	r0, [r7, #8]
    3878:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    387a:	f7ff fe1f 	bl	34bc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    387e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3880:	490e      	ldr	r1, [pc, #56]	; (38bc <z_tick_sleep+0x8c>)
    3882:	462a      	mov	r2, r5
    3884:	4633      	mov	r3, r6
    3886:	3018      	adds	r0, #24
    3888:	f000 f8f2 	bl	3a70 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    388c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    388e:	7b53      	ldrb	r3, [r2, #13]
    3890:	f043 0310 	orr.w	r3, r3, #16
    3894:	7353      	strb	r3, [r2, #13]
    3896:	4640      	mov	r0, r8
    3898:	f7fd fd72 	bl	1380 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    389c:	f000 ff04 	bl	46a8 <sys_clock_tick_get_32>
    38a0:	1a20      	subs	r0, r4, r0
    38a2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    38a6:	2801      	cmp	r0, #1
    38a8:	f173 0300 	sbcs.w	r3, r3, #0
    38ac:	dbc9      	blt.n	3842 <z_tick_sleep+0x12>
}
    38ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38b2:	bf00      	nop
    38b4:	200003a0 	.word	0x200003a0
    38b8:	200003d0 	.word	0x200003d0
    38bc:	000045b5 	.word	0x000045b5

000038c0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    38c0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    38c4:	bf08      	it	eq
    38c6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    38ca:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    38cc:	d106      	bne.n	38dc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    38ce:	4b08      	ldr	r3, [pc, #32]	; (38f0 <z_impl_k_sleep+0x30>)
    38d0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    38d2:	f7ff fe45 	bl	3560 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    38d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    38da:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    38dc:	f7ff ffa8 	bl	3830 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    38e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    38e4:	fb80 0303 	smull	r0, r3, r0, r3
    38e8:	0bc0      	lsrs	r0, r0, #15
    38ea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    38ee:	e7f4      	b.n	38da <z_impl_k_sleep+0x1a>
    38f0:	200003a0 	.word	0x200003a0

000038f4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    38f4:	4b01      	ldr	r3, [pc, #4]	; (38fc <z_impl_k_current_get+0x8>)
    38f6:	6898      	ldr	r0, [r3, #8]
    38f8:	4770      	bx	lr
    38fa:	bf00      	nop
    38fc:	200003a0 	.word	0x200003a0

00003900 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    3900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3904:	4604      	mov	r4, r0
    3906:	f04f 0320 	mov.w	r3, #32
    390a:	f3ef 8611 	mrs	r6, BASEPRI
    390e:	f383 8811 	msr	BASEPRI, r3
    3912:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3916:	7b43      	ldrb	r3, [r0, #13]
    3918:	071a      	lsls	r2, r3, #28
    391a:	d505      	bpl.n	3928 <z_thread_abort+0x28>
	__asm__ volatile(
    391c:	f386 8811 	msr	BASEPRI, r6
    3920:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3928:	f023 0220 	bic.w	r2, r3, #32
    392c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    3930:	09d2      	lsrs	r2, r2, #7
    3932:	d120      	bne.n	3976 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3934:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3936:	68a3      	ldr	r3, [r4, #8]
    3938:	b113      	cbz	r3, 3940 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    393a:	4620      	mov	r0, r4
    393c:	f000 fdda 	bl	44f4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3940:	f104 0018 	add.w	r0, r4, #24
    3944:	f000 fe70 	bl	4628 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3948:	f104 0758 	add.w	r7, r4, #88	; 0x58
    394c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    3950:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3952:	42bd      	cmp	r5, r7
    3954:	d000      	beq.n	3958 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3956:	b9b5      	cbnz	r5, 3986 <z_thread_abort+0x86>
		update_cache(1);
    3958:	2001      	movs	r0, #1
    395a:	f7ff fd8f 	bl	347c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    395e:	4b10      	ldr	r3, [pc, #64]	; (39a0 <z_thread_abort+0xa0>)
    3960:	689b      	ldr	r3, [r3, #8]
    3962:	42a3      	cmp	r3, r4
    3964:	d1da      	bne.n	391c <z_thread_abort+0x1c>
    3966:	f3ef 8305 	mrs	r3, IPSR
    396a:	2b00      	cmp	r3, #0
    396c:	d1d6      	bne.n	391c <z_thread_abort+0x1c>
    396e:	4630      	mov	r0, r6
    3970:	f7fd fd06 	bl	1380 <arch_swap>
	return ret;
    3974:	e7d2      	b.n	391c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3976:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    397a:	f043 0308 	orr.w	r3, r3, #8
    397e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3980:	f000 fdb0 	bl	44e4 <sys_dlist_remove>
}
    3984:	e7d7      	b.n	3936 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    3986:	4628      	mov	r0, r5
    3988:	f000 fdb4 	bl	44f4 <unpend_thread_no_timeout>
    398c:	f105 0018 	add.w	r0, r5, #24
    3990:	f000 fe4a 	bl	4628 <z_abort_timeout>
    3994:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    3998:	4628      	mov	r0, r5
    399a:	f7ff fea9 	bl	36f0 <ready_thread>
    399e:	e7d7      	b.n	3950 <z_thread_abort+0x50>
    39a0:	200003a0 	.word	0x200003a0

000039a4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    39a4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    39a6:	4806      	ldr	r0, [pc, #24]	; (39c0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    39a8:	4a06      	ldr	r2, [pc, #24]	; (39c4 <z_data_copy+0x20>)
    39aa:	4907      	ldr	r1, [pc, #28]	; (39c8 <z_data_copy+0x24>)
    39ac:	1a12      	subs	r2, r2, r0
    39ae:	f000 fb5e 	bl	406e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    39b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    39b6:	4a05      	ldr	r2, [pc, #20]	; (39cc <z_data_copy+0x28>)
    39b8:	4905      	ldr	r1, [pc, #20]	; (39d0 <z_data_copy+0x2c>)
    39ba:	4806      	ldr	r0, [pc, #24]	; (39d4 <z_data_copy+0x30>)
    39bc:	f000 bb57 	b.w	406e <memcpy>
    39c0:	20000000 	.word	0x20000000
    39c4:	2000010c 	.word	0x2000010c
    39c8:	00004aa0 	.word	0x00004aa0
    39cc:	00000000 	.word	0x00000000
    39d0:	00004aa0 	.word	0x00004aa0
    39d4:	20000000 	.word	0x20000000

000039d8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    39d8:	4b03      	ldr	r3, [pc, #12]	; (39e8 <elapsed+0x10>)
    39da:	681b      	ldr	r3, [r3, #0]
    39dc:	b90b      	cbnz	r3, 39e2 <elapsed+0xa>
    39de:	f7fd bcc1 	b.w	1364 <sys_clock_elapsed>
}
    39e2:	2000      	movs	r0, #0
    39e4:	4770      	bx	lr
    39e6:	bf00      	nop
    39e8:	200003dc 	.word	0x200003dc

000039ec <next_timeout>:
	return list->head == list;
    39ec:	4b11      	ldr	r3, [pc, #68]	; (3a34 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    39ee:	b510      	push	{r4, lr}
    39f0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39f2:	429c      	cmp	r4, r3
    39f4:	bf08      	it	eq
    39f6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    39f8:	f7ff ffee 	bl	39d8 <elapsed>
    39fc:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    39fe:	b16c      	cbz	r4, 3a1c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3a00:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    3a04:	1ac0      	subs	r0, r0, r3
    3a06:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    3a0a:	2801      	cmp	r0, #1
    3a0c:	f173 0200 	sbcs.w	r2, r3, #0
    3a10:	db0d      	blt.n	3a2e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3a12:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    3a16:	f173 0300 	sbcs.w	r3, r3, #0
    3a1a:	db01      	blt.n	3a20 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    3a1c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3a20:	4b05      	ldr	r3, [pc, #20]	; (3a38 <next_timeout+0x4c>)
    3a22:	691b      	ldr	r3, [r3, #16]
    3a24:	b113      	cbz	r3, 3a2c <next_timeout+0x40>
    3a26:	4298      	cmp	r0, r3
    3a28:	bfa8      	it	ge
    3a2a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3a2c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3a2e:	2000      	movs	r0, #0
    3a30:	e7f6      	b.n	3a20 <next_timeout+0x34>
    3a32:	bf00      	nop
    3a34:	2000005c 	.word	0x2000005c
    3a38:	200003a0 	.word	0x200003a0

00003a3c <remove_timeout>:
{
    3a3c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    3a3e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3a40:	b168      	cbz	r0, 3a5e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3a42:	4a0a      	ldr	r2, [pc, #40]	; (3a6c <remove_timeout+0x30>)
    3a44:	6852      	ldr	r2, [r2, #4]
    3a46:	4290      	cmp	r0, r2
    3a48:	d009      	beq.n	3a5e <remove_timeout+0x22>
	if (next(t) != NULL) {
    3a4a:	b143      	cbz	r3, 3a5e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3a4c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3a50:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3a54:	1912      	adds	r2, r2, r4
    3a56:	eb41 0105 	adc.w	r1, r1, r5
    3a5a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    3a5e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    3a60:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3a62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3a64:	2300      	movs	r3, #0
	node->prev = NULL;
    3a66:	e9c0 3300 	strd	r3, r3, [r0]
}
    3a6a:	bd30      	pop	{r4, r5, pc}
    3a6c:	2000005c 	.word	0x2000005c

00003a70 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3a74:	bf08      	it	eq
    3a76:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    3a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a7c:	4604      	mov	r4, r0
    3a7e:	461f      	mov	r7, r3
    3a80:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3a82:	d067      	beq.n	3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3a84:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    3a86:	f04f 0320 	mov.w	r3, #32
    3a8a:	f3ef 8611 	mrs	r6, BASEPRI
    3a8e:	f383 8811 	msr	BASEPRI, r3
    3a92:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    3a96:	f06f 0201 	mvn.w	r2, #1
    3a9a:	1b53      	subs	r3, r2, r5
    3a9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    3aa0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	db1b      	blt.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3aa8:	4b2b      	ldr	r3, [pc, #172]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3aaa:	e9d3 1300 	ldrd	r1, r3, [r3]
    3aae:	1a52      	subs	r2, r2, r1
    3ab0:	eb6c 0303 	sbc.w	r3, ip, r3
    3ab4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    3ab6:	eb63 0307 	sbc.w	r3, r3, r7
    3aba:	2d01      	cmp	r5, #1
    3abc:	f173 0200 	sbcs.w	r2, r3, #0
    3ac0:	bfbc      	itt	lt
    3ac2:	2501      	movlt	r5, #1
    3ac4:	2300      	movlt	r3, #0
    3ac6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    3aca:	4824      	ldr	r0, [pc, #144]	; (3b5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc4>)
	sys_dnode_t *const tail = list->tail;
    3acc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ad0:	4283      	cmp	r3, r0
    3ad2:	d118      	bne.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
	node->prev = tail;
    3ad4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    3ad8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    3adc:	6044      	str	r4, [r0, #4]
}
    3ade:	e026      	b.n	3b2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x96>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    3ae0:	f7ff ff7a 	bl	39d8 <elapsed>
    3ae4:	3501      	adds	r5, #1
    3ae6:	f147 0700 	adc.w	r7, r7, #0
    3aea:	182d      	adds	r5, r5, r0
    3aec:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    3af0:	e9c4 5704 	strd	r5, r7, [r4, #16]
    3af4:	e7e9      	b.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    3af6:	1a52      	subs	r2, r2, r1
    3af8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    3afc:	4563      	cmp	r3, ip
    3afe:	e9c4 2504 	strd	r2, r5, [r4, #16]
    3b02:	d0e7      	beq.n	3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>
    3b04:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    3b06:	2b00      	cmp	r3, #0
    3b08:	d0e4      	beq.n	3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>
			if (t->dticks > to->dticks) {
    3b0a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    3b0e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    3b12:	428a      	cmp	r2, r1
    3b14:	eb75 0e07 	sbcs.w	lr, r5, r7
    3b18:	daed      	bge.n	3af6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5e>
				t->dticks -= to->dticks;
    3b1a:	1a8a      	subs	r2, r1, r2
    3b1c:	eb67 0505 	sbc.w	r5, r7, r5
    3b20:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    3b24:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3b26:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3b2a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3b2c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    3b2e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b30:	4283      	cmp	r3, r0
    3b32:	d00b      	beq.n	3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3b34:	429c      	cmp	r4, r3
    3b36:	d109      	bne.n	3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3b38:	f7ff ff58 	bl	39ec <next_timeout>

			if (next_time == 0 ||
    3b3c:	b118      	cbz	r0, 3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
			    _current_cpu->slice_ticks != next_time) {
    3b3e:	4b08      	ldr	r3, [pc, #32]	; (3b60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc8>)
			if (next_time == 0 ||
    3b40:	691b      	ldr	r3, [r3, #16]
    3b42:	4283      	cmp	r3, r0
    3b44:	d002      	beq.n	3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>
				sys_clock_set_timeout(next_time, false);
    3b46:	2100      	movs	r1, #0
    3b48:	f7fd fbda 	bl	1300 <sys_clock_set_timeout>
	__asm__ volatile(
    3b4c:	f386 8811 	msr	BASEPRI, r6
    3b50:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    3b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b56:	bf00      	nop
    3b58:	20000210 	.word	0x20000210
    3b5c:	2000005c 	.word	0x2000005c
    3b60:	200003a0 	.word	0x200003a0

00003b64 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3b68:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3b6a:	f7ff fd81 	bl	3670 <z_time_slice>
	__asm__ volatile(
    3b6e:	f04f 0320 	mov.w	r3, #32
    3b72:	f3ef 8411 	mrs	r4, BASEPRI
    3b76:	f383 8811 	msr	BASEPRI, r3
    3b7a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3b7e:	4e24      	ldr	r6, [pc, #144]	; (3c10 <sys_clock_announce+0xac>)
	return list->head == list;
    3b80:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3c14 <sys_clock_announce+0xb0>
    3b84:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    3b86:	4d24      	ldr	r5, [pc, #144]	; (3c18 <sys_clock_announce+0xb4>)
    3b88:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3b8c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b8e:	4540      	cmp	r0, r8
		curr_tick += dt;
    3b90:	e9d5 1e00 	ldrd	r1, lr, [r5]
    3b94:	ea4f 77e2 	mov.w	r7, r2, asr #31
    3b98:	d00b      	beq.n	3bb2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3b9a:	b150      	cbz	r0, 3bb2 <sys_clock_announce+0x4e>
    3b9c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    3ba0:	429a      	cmp	r2, r3
    3ba2:	eb77 090c 	sbcs.w	r9, r7, ip
    3ba6:	da16      	bge.n	3bd6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3ba8:	1a9b      	subs	r3, r3, r2
    3baa:	eb6c 0c07 	sbc.w	ip, ip, r7
    3bae:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    3bb2:	1852      	adds	r2, r2, r1
    3bb4:	eb4e 0707 	adc.w	r7, lr, r7
    3bb8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    3bbc:	2500      	movs	r5, #0
    3bbe:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    3bc0:	f7ff ff14 	bl	39ec <next_timeout>
    3bc4:	4629      	mov	r1, r5
    3bc6:	f7fd fb9b 	bl	1300 <sys_clock_set_timeout>
	__asm__ volatile(
    3bca:	f384 8811 	msr	BASEPRI, r4
    3bce:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    3bd6:	1859      	adds	r1, r3, r1
    3bd8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    3bdc:	1ad3      	subs	r3, r2, r3
    3bde:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    3be0:	2200      	movs	r2, #0
    3be2:	2300      	movs	r3, #0
    3be4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    3be8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    3bec:	f7ff ff26 	bl	3a3c <remove_timeout>
    3bf0:	f384 8811 	msr	BASEPRI, r4
    3bf4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3bf8:	6883      	ldr	r3, [r0, #8]
    3bfa:	4798      	blx	r3
	__asm__ volatile(
    3bfc:	f04f 0320 	mov.w	r3, #32
    3c00:	f3ef 8411 	mrs	r4, BASEPRI
    3c04:	f383 8811 	msr	BASEPRI, r3
    3c08:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3c0c:	e7bc      	b.n	3b88 <sys_clock_announce+0x24>
    3c0e:	bf00      	nop
    3c10:	200003dc 	.word	0x200003dc
    3c14:	2000005c 	.word	0x2000005c
    3c18:	20000210 	.word	0x20000210

00003c1c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3c1c:	b510      	push	{r4, lr}
    3c1e:	f04f 0320 	mov.w	r3, #32
    3c22:	f3ef 8411 	mrs	r4, BASEPRI
    3c26:	f383 8811 	msr	BASEPRI, r3
    3c2a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    3c2e:	f7fd fb99 	bl	1364 <sys_clock_elapsed>
    3c32:	4a05      	ldr	r2, [pc, #20]	; (3c48 <sys_clock_tick_get+0x2c>)
    3c34:	e9d2 3100 	ldrd	r3, r1, [r2]
    3c38:	18c0      	adds	r0, r0, r3
    3c3a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    3c3e:	f384 8811 	msr	BASEPRI, r4
    3c42:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3c46:	bd10      	pop	{r4, pc}
    3c48:	20000210 	.word	0x20000210

00003c4c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3c4c:	4a02      	ldr	r2, [pc, #8]	; (3c58 <boot_banner+0xc>)
    3c4e:	4903      	ldr	r1, [pc, #12]	; (3c5c <boot_banner+0x10>)
    3c50:	4803      	ldr	r0, [pc, #12]	; (3c60 <boot_banner+0x14>)
    3c52:	f000 b827 	b.w	3ca4 <printk>
    3c56:	bf00      	nop
    3c58:	00004a9f 	.word	0x00004a9f
    3c5c:	00004a6b 	.word	0x00004a6b
    3c60:	00004a79 	.word	0x00004a79

00003c64 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3c64:	4603      	mov	r3, r0
    3c66:	b158      	cbz	r0, 3c80 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3c68:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3c6a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    3c6e:	2a01      	cmp	r2, #1
    3c70:	d003      	beq.n	3c7a <sys_notify_validate+0x16>
    3c72:	2a03      	cmp	r2, #3
    3c74:	d104      	bne.n	3c80 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3c76:	6802      	ldr	r2, [r0, #0]
    3c78:	b112      	cbz	r2, 3c80 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3c7a:	2000      	movs	r0, #0
    3c7c:	6098      	str	r0, [r3, #8]
    3c7e:	4770      	bx	lr
		return -EINVAL;
    3c80:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    3c84:	4770      	bx	lr

00003c86 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3c86:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3c88:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    3c8a:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    3c8e:	2a03      	cmp	r2, #3
    3c90:	f04f 0200 	mov.w	r2, #0
{
    3c94:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3c96:	bf0c      	ite	eq
    3c98:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    3c9a:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3c9c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3c9e:	4770      	bx	lr

00003ca0 <arch_printk_char_out>:
}
    3ca0:	2000      	movs	r0, #0
    3ca2:	4770      	bx	lr

00003ca4 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    3ca4:	b40f      	push	{r0, r1, r2, r3}
    3ca6:	b507      	push	{r0, r1, r2, lr}
    3ca8:	a904      	add	r1, sp, #16
    3caa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    3cae:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    3cb0:	f7fc fbc2 	bl	438 <vprintk>
	}
	va_end(ap);
}
    3cb4:	b003      	add	sp, #12
    3cb6:	f85d eb04 	ldr.w	lr, [sp], #4
    3cba:	b004      	add	sp, #16
    3cbc:	4770      	bx	lr

00003cbe <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3cbe:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3cc0:	f013 0307 	ands.w	r3, r3, #7
    3cc4:	d105      	bne.n	3cd2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    3cc6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    3cc8:	2b00      	cmp	r3, #0
    3cca:	bf0c      	ite	eq
    3ccc:	2000      	moveq	r0, #0
    3cce:	2003      	movne	r0, #3
    3cd0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    3cd2:	2b02      	cmp	r3, #2
    3cd4:	d105      	bne.n	3ce2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    3cd6:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    3cd8:	2b00      	cmp	r3, #0
    3cda:	bf14      	ite	ne
    3cdc:	2000      	movne	r0, #0
    3cde:	2004      	moveq	r0, #4
    3ce0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    3ce2:	2b01      	cmp	r3, #1
    3ce4:	d105      	bne.n	3cf2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    3ce6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    3ce8:	2b00      	cmp	r3, #0
    3cea:	bf0c      	ite	eq
    3cec:	2000      	moveq	r0, #0
    3cee:	2005      	movne	r0, #5
    3cf0:	4770      	bx	lr
	int evt = EVT_NOP;
    3cf2:	2000      	movs	r0, #0
}
    3cf4:	4770      	bx	lr

00003cf6 <notify_one>:
{
    3cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cfa:	460d      	mov	r5, r1
    3cfc:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3cfe:	4619      	mov	r1, r3
    3d00:	1d28      	adds	r0, r5, #4
{
    3d02:	4690      	mov	r8, r2
    3d04:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3d06:	f7ff ffbe 	bl	3c86 <sys_notify_finalize>
	if (cb) {
    3d0a:	4604      	mov	r4, r0
    3d0c:	b138      	cbz	r0, 3d1e <notify_one+0x28>
		cb(mgr, cli, state, res);
    3d0e:	4633      	mov	r3, r6
    3d10:	4642      	mov	r2, r8
    3d12:	4629      	mov	r1, r5
    3d14:	4638      	mov	r0, r7
    3d16:	46a4      	mov	ip, r4
}
    3d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    3d1c:	4760      	bx	ip
}
    3d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003d22 <transition_complete>:
{
    3d22:	b410      	push	{r4}
	__asm__ volatile(
    3d24:	f04f 0420 	mov.w	r4, #32
    3d28:	f3ef 8211 	mrs	r2, BASEPRI
    3d2c:	f384 8811 	msr	BASEPRI, r4
    3d30:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3d34:	6141      	str	r1, [r0, #20]
}
    3d36:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    3d38:	2101      	movs	r1, #1
    3d3a:	f7fc bb8b 	b.w	454 <process_event>

00003d3e <validate_args>:
{
    3d3e:	b510      	push	{r4, lr}
    3d40:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    3d42:	b140      	cbz	r0, 3d56 <validate_args+0x18>
    3d44:	b139      	cbz	r1, 3d56 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    3d46:	1d08      	adds	r0, r1, #4
    3d48:	f7ff ff8c 	bl	3c64 <sys_notify_validate>
	if ((rv == 0)
    3d4c:	b928      	cbnz	r0, 3d5a <validate_args+0x1c>
	    && ((cli->notify.flags
    3d4e:	68a3      	ldr	r3, [r4, #8]
    3d50:	f033 0303 	bics.w	r3, r3, #3
    3d54:	d001      	beq.n	3d5a <validate_args+0x1c>
		rv = -EINVAL;
    3d56:	f06f 0015 	mvn.w	r0, #21
}
    3d5a:	bd10      	pop	{r4, pc}

00003d5c <onoff_manager_init>:
{
    3d5c:	b538      	push	{r3, r4, r5, lr}
    3d5e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    3d60:	4605      	mov	r5, r0
    3d62:	b158      	cbz	r0, 3d7c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    3d64:	b151      	cbz	r1, 3d7c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    3d66:	680b      	ldr	r3, [r1, #0]
    3d68:	b143      	cbz	r3, 3d7c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    3d6a:	684b      	ldr	r3, [r1, #4]
    3d6c:	b133      	cbz	r3, 3d7c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3d6e:	221c      	movs	r2, #28
    3d70:	2100      	movs	r1, #0
    3d72:	f000 f9a7 	bl	40c4 <memset>
    3d76:	612c      	str	r4, [r5, #16]
	return 0;
    3d78:	2000      	movs	r0, #0
}
    3d7a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    3d7c:	f06f 0015 	mvn.w	r0, #21
    3d80:	e7fb      	b.n	3d7a <onoff_manager_init+0x1e>

00003d82 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3d82:	b570      	push	{r4, r5, r6, lr}
    3d84:	4604      	mov	r4, r0
    3d86:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3d88:	f7ff ffd9 	bl	3d3e <validate_args>

	if (rv < 0) {
    3d8c:	1e05      	subs	r5, r0, #0
    3d8e:	db31      	blt.n	3df4 <onoff_request+0x72>
    3d90:	f04f 0320 	mov.w	r3, #32
    3d94:	f3ef 8111 	mrs	r1, BASEPRI
    3d98:	f383 8811 	msr	BASEPRI, r3
    3d9c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3da0:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3da2:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3da4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    3da8:	42ab      	cmp	r3, r5
    3daa:	f000 0207 	and.w	r2, r0, #7
    3dae:	d02e      	beq.n	3e0e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    3db0:	2a02      	cmp	r2, #2
    3db2:	d10e      	bne.n	3dd2 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3db4:	3301      	adds	r3, #1
    3db6:	8363      	strh	r3, [r4, #26]
	rv = state;
    3db8:	4615      	mov	r5, r2
		notify = true;
    3dba:	2301      	movs	r3, #1
	__asm__ volatile(
    3dbc:	f381 8811 	msr	BASEPRI, r1
    3dc0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    3dc4:	b1b3      	cbz	r3, 3df4 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    3dc6:	2300      	movs	r3, #0
    3dc8:	4631      	mov	r1, r6
    3dca:	4620      	mov	r0, r4
    3dcc:	f7ff ff93 	bl	3cf6 <notify_one>
    3dd0:	e010      	b.n	3df4 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    3dd2:	0783      	lsls	r3, r0, #30
    3dd4:	d001      	beq.n	3dda <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    3dd6:	2a06      	cmp	r2, #6
    3dd8:	d10e      	bne.n	3df8 <onoff_request+0x76>
	parent->next = child;
    3dda:	2300      	movs	r3, #0
    3ddc:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    3dde:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3de0:	b993      	cbnz	r3, 3e08 <onoff_request+0x86>
	list->head = node;
    3de2:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    3de6:	4615      	mov	r5, r2
    3de8:	b962      	cbnz	r2, 3e04 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    3dea:	460a      	mov	r2, r1
    3dec:	4620      	mov	r0, r4
    3dee:	2102      	movs	r1, #2
    3df0:	f7fc fb30 	bl	454 <process_event>
		}
	}

	return rv;
}
    3df4:	4628      	mov	r0, r5
    3df6:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    3df8:	2a05      	cmp	r2, #5
    3dfa:	bf0c      	ite	eq
    3dfc:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    3e00:	f06f 0504 	mvnne.w	r5, #4
    3e04:	2300      	movs	r3, #0
    3e06:	e7d9      	b.n	3dbc <onoff_request+0x3a>
	parent->next = child;
    3e08:	601e      	str	r6, [r3, #0]
	list->tail = node;
    3e0a:	6066      	str	r6, [r4, #4]
}
    3e0c:	e7eb      	b.n	3de6 <onoff_request+0x64>
		rv = -EAGAIN;
    3e0e:	f06f 050a 	mvn.w	r5, #10
    3e12:	e7f7      	b.n	3e04 <onoff_request+0x82>

00003e14 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3e14:	4604      	mov	r4, r0
    3e16:	b508      	push	{r3, lr}
    3e18:	4608      	mov	r0, r1
    3e1a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3e1c:	461a      	mov	r2, r3
    3e1e:	47a0      	blx	r4
	return z_impl_k_current_get();
    3e20:	f7ff fd68 	bl	38f4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3e24:	f7fd fcca 	bl	17bc <z_impl_k_thread_abort>

00003e28 <encode_uint>:
{
    3e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e2c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    3e2e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    3e30:	2b6f      	cmp	r3, #111	; 0x6f
{
    3e32:	4680      	mov	r8, r0
    3e34:	460f      	mov	r7, r1
    3e36:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    3e38:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    3e3c:	d029      	beq.n	3e92 <encode_uint+0x6a>
    3e3e:	d824      	bhi.n	3e8a <encode_uint+0x62>
		return 16;
    3e40:	2b58      	cmp	r3, #88	; 0x58
    3e42:	bf14      	ite	ne
    3e44:	260a      	movne	r6, #10
    3e46:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    3e48:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    3e4c:	4632      	mov	r2, r6
    3e4e:	2300      	movs	r3, #0
    3e50:	4640      	mov	r0, r8
    3e52:	4639      	mov	r1, r7
    3e54:	f7fc f954 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3e58:	2a09      	cmp	r2, #9
    3e5a:	b2d4      	uxtb	r4, r2
    3e5c:	d81e      	bhi.n	3e9c <encode_uint+0x74>
    3e5e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    3e60:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3e62:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    3e64:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3e68:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    3e6c:	d301      	bcc.n	3e72 <encode_uint+0x4a>
    3e6e:	45d1      	cmp	r9, sl
    3e70:	d811      	bhi.n	3e96 <encode_uint+0x6e>
	if (conv->flag_hash) {
    3e72:	782b      	ldrb	r3, [r5, #0]
    3e74:	069b      	lsls	r3, r3, #26
    3e76:	d505      	bpl.n	3e84 <encode_uint+0x5c>
		if (radix == 8) {
    3e78:	2e08      	cmp	r6, #8
    3e7a:	d115      	bne.n	3ea8 <encode_uint+0x80>
			conv->altform_0 = true;
    3e7c:	78ab      	ldrb	r3, [r5, #2]
    3e7e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    3e82:	70ab      	strb	r3, [r5, #2]
}
    3e84:	4648      	mov	r0, r9
    3e86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    3e8a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    3e8e:	2b70      	cmp	r3, #112	; 0x70
    3e90:	e7d7      	b.n	3e42 <encode_uint+0x1a>
	switch (specifier) {
    3e92:	2608      	movs	r6, #8
    3e94:	e7d8      	b.n	3e48 <encode_uint+0x20>
		value /= radix;
    3e96:	4680      	mov	r8, r0
    3e98:	460f      	mov	r7, r1
    3e9a:	e7d7      	b.n	3e4c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3e9c:	f1bb 0f19 	cmp.w	fp, #25
    3ea0:	bf94      	ite	ls
    3ea2:	3437      	addls	r4, #55	; 0x37
    3ea4:	3457      	addhi	r4, #87	; 0x57
    3ea6:	e7db      	b.n	3e60 <encode_uint+0x38>
		} else if (radix == 16) {
    3ea8:	2e10      	cmp	r6, #16
    3eaa:	d1eb      	bne.n	3e84 <encode_uint+0x5c>
			conv->altform_0c = true;
    3eac:	78ab      	ldrb	r3, [r5, #2]
    3eae:	f043 0310 	orr.w	r3, r3, #16
    3eb2:	e7e6      	b.n	3e82 <encode_uint+0x5a>

00003eb4 <outs>:
{
    3eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3eb8:	4607      	mov	r7, r0
    3eba:	4688      	mov	r8, r1
    3ebc:	4615      	mov	r5, r2
    3ebe:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3ec0:	4614      	mov	r4, r2
    3ec2:	42b4      	cmp	r4, r6
    3ec4:	eba4 0005 	sub.w	r0, r4, r5
    3ec8:	d302      	bcc.n	3ed0 <outs+0x1c>
    3eca:	b93e      	cbnz	r6, 3edc <outs+0x28>
    3ecc:	7823      	ldrb	r3, [r4, #0]
    3ece:	b12b      	cbz	r3, 3edc <outs+0x28>
		int rc = out((int)*sp++, ctx);
    3ed0:	f814 0b01 	ldrb.w	r0, [r4], #1
    3ed4:	4641      	mov	r1, r8
    3ed6:	47b8      	blx	r7
		if (rc < 0) {
    3ed8:	2800      	cmp	r0, #0
    3eda:	daf2      	bge.n	3ec2 <outs+0xe>
}
    3edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003ee0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3ee0:	4770      	bx	lr

00003ee2 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    3ee2:	2200      	movs	r2, #0
    3ee4:	e9c0 2200 	strd	r2, r2, [r0]
    3ee8:	6082      	str	r2, [r0, #8]
}
    3eea:	4770      	bx	lr

00003eec <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3eec:	6903      	ldr	r3, [r0, #16]
    3eee:	b2c9      	uxtb	r1, r1
    3ef0:	220c      	movs	r2, #12
    3ef2:	fb01 3302 	mla	r3, r1, r2, r3
    3ef6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    3ef8:	f000 0007 	and.w	r0, r0, #7
    3efc:	4770      	bx	lr

00003efe <set_on_state>:
	__asm__ volatile(
    3efe:	f04f 0320 	mov.w	r3, #32
    3f02:	f3ef 8211 	mrs	r2, BASEPRI
    3f06:	f383 8811 	msr	BASEPRI, r3
    3f0a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    3f0e:	6803      	ldr	r3, [r0, #0]
    3f10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3f14:	f043 0302 	orr.w	r3, r3, #2
    3f18:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    3f1a:	f382 8811 	msr	BASEPRI, r2
    3f1e:	f3bf 8f6f 	isb	sy
}
    3f22:	4770      	bx	lr

00003f24 <stop>:
{
    3f24:	4603      	mov	r3, r0
    3f26:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    3f28:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    3f2a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    3f2c:	f04f 0420 	mov.w	r4, #32
    3f30:	f3ef 8611 	mrs	r6, BASEPRI
    3f34:	f384 8811 	msr	BASEPRI, r4
    3f38:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3f3c:	250c      	movs	r5, #12
    3f3e:	fb05 0401 	mla	r4, r5, r1, r0
    3f42:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3f44:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    3f48:	d001      	beq.n	3f4e <stop+0x2a>
    3f4a:	42a2      	cmp	r2, r4
    3f4c:	d110      	bne.n	3f70 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3f4e:	fb05 0001 	mla	r0, r5, r1, r0
    3f52:	2201      	movs	r2, #1
    3f54:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    3f56:	2000      	movs	r0, #0
	__asm__ volatile(
    3f58:	f386 8811 	msr	BASEPRI, r6
    3f5c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3f60:	b928      	cbnz	r0, 3f6e <stop+0x4a>
	get_sub_config(dev, type)->stop();
    3f62:	685b      	ldr	r3, [r3, #4]
    3f64:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    3f68:	684b      	ldr	r3, [r1, #4]
    3f6a:	4798      	blx	r3
	return 0;
    3f6c:	2000      	movs	r0, #0
}
    3f6e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    3f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f74:	e7f0      	b.n	3f58 <stop+0x34>

00003f76 <api_stop>:
	return stop(dev, subsys, CTX_API);
    3f76:	2280      	movs	r2, #128	; 0x80
    3f78:	f7ff bfd4 	b.w	3f24 <stop>

00003f7c <async_start>:
{
    3f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f7e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    3f80:	6904      	ldr	r4, [r0, #16]
{
    3f82:	4605      	mov	r5, r0
    3f84:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    3f86:	f04f 0020 	mov.w	r0, #32
    3f8a:	f3ef 8c11 	mrs	ip, BASEPRI
    3f8e:	f380 8811 	msr	BASEPRI, r0
    3f92:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3f96:	260c      	movs	r6, #12
    3f98:	fb06 4601 	mla	r6, r6, r1, r4
    3f9c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    3f9e:	f000 0e07 	and.w	lr, r0, #7
    3fa2:	f1be 0f01 	cmp.w	lr, #1
    3fa6:	d111      	bne.n	3fcc <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    3fa8:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    3faa:	2600      	movs	r6, #0
	__asm__ volatile(
    3fac:	f38c 8811 	msr	BASEPRI, ip
    3fb0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3fb4:	b946      	cbnz	r6, 3fc8 <async_start+0x4c>
	subdata->cb = cb;
    3fb6:	200c      	movs	r0, #12
    3fb8:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    3fbc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    3fc0:	686b      	ldr	r3, [r5, #4]
    3fc2:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    3fc6:	4798      	blx	r3
}
    3fc8:	4630      	mov	r0, r6
    3fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    3fcc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    3fd0:	4287      	cmp	r7, r0
    3fd2:	bf14      	ite	ne
    3fd4:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    3fd8:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    3fdc:	e7e6      	b.n	3fac <async_start+0x30>

00003fde <api_start>:
{
    3fde:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    3fe0:	2480      	movs	r4, #128	; 0x80
    3fe2:	9400      	str	r4, [sp, #0]
    3fe4:	f7ff ffca 	bl	3f7c <async_start>
}
    3fe8:	b002      	add	sp, #8
    3fea:	bd10      	pop	{r4, pc}

00003fec <onoff_started_callback>:
	return &data->mgr[type];
    3fec:	6900      	ldr	r0, [r0, #16]
{
    3fee:	b410      	push	{r4}
	return &data->mgr[type];
    3ff0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    3ff2:	241c      	movs	r4, #28
    3ff4:	fb03 0004 	mla	r0, r3, r4, r0
    3ff8:	2100      	movs	r1, #0
}
    3ffa:	bc10      	pop	{r4}
	notify(mgr, 0);
    3ffc:	4710      	bx	r2

00003ffe <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    3ffe:	2000      	movs	r0, #0
    4000:	f000 b9c8 	b.w	4394 <nrfx_clock_start>

00004004 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4004:	2000      	movs	r0, #0
    4006:	f7fe bbc7 	b.w	2798 <nrfx_clock_stop>

0000400a <blocking_start_callback>:
{
    400a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    400c:	f7ff b982 	b.w	3314 <z_impl_k_sem_give>

00004010 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4010:	4770      	bx	lr

00004012 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4012:	4770      	bx	lr

00004014 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4014:	2100      	movs	r1, #0
    4016:	2001      	movs	r0, #1
    4018:	f000 b800 	b.w	401c <z_arm_fatal_error>

0000401c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    401c:	f000 ba3a 	b.w	4494 <z_fatal_error>

00004020 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4020:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4022:	6800      	ldr	r0, [r0, #0]
    4024:	f000 ba36 	b.w	4494 <z_fatal_error>

00004028 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4028:	b508      	push	{r3, lr}
	handler();
    402a:	f7fd fa79 	bl	1520 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    402e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4032:	f7fd bba9 	b.w	1788 <z_arm_exc_exit>

00004036 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4036:	4603      	mov	r3, r0
	size_t n = 0;
    4038:	2000      	movs	r0, #0

	while (*s != '\0') {
    403a:	5c1a      	ldrb	r2, [r3, r0]
    403c:	b902      	cbnz	r2, 4040 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    403e:	4770      	bx	lr
		n++;
    4040:	3001      	adds	r0, #1
    4042:	e7fa      	b.n	403a <strlen+0x4>

00004044 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4044:	4603      	mov	r3, r0
	size_t n = 0;
    4046:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4048:	5c1a      	ldrb	r2, [r3, r0]
    404a:	b10a      	cbz	r2, 4050 <strnlen+0xc>
    404c:	4288      	cmp	r0, r1
    404e:	d100      	bne.n	4052 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    4050:	4770      	bx	lr
		n++;
    4052:	3001      	adds	r0, #1
    4054:	e7f8      	b.n	4048 <strnlen+0x4>

00004056 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    4056:	1e43      	subs	r3, r0, #1
    4058:	3901      	subs	r1, #1
    405a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    405e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    4062:	4282      	cmp	r2, r0
    4064:	d101      	bne.n	406a <strcmp+0x14>
    4066:	2a00      	cmp	r2, #0
    4068:	d1f7      	bne.n	405a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    406a:	1a10      	subs	r0, r2, r0
    406c:	4770      	bx	lr

0000406e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    406e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4070:	ea81 0400 	eor.w	r4, r1, r0
    4074:	07a5      	lsls	r5, r4, #30
    4076:	4603      	mov	r3, r0
    4078:	d00b      	beq.n	4092 <memcpy+0x24>
    407a:	3b01      	subs	r3, #1
    407c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    407e:	4291      	cmp	r1, r2
    4080:	d11b      	bne.n	40ba <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4082:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4084:	2a00      	cmp	r2, #0
    4086:	d0fc      	beq.n	4082 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4088:	f811 4b01 	ldrb.w	r4, [r1], #1
    408c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    4090:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    4092:	079c      	lsls	r4, r3, #30
    4094:	d1f6      	bne.n	4084 <memcpy+0x16>
    4096:	f022 0403 	bic.w	r4, r2, #3
    409a:	1f1d      	subs	r5, r3, #4
    409c:	0896      	lsrs	r6, r2, #2
    409e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    40a0:	42b9      	cmp	r1, r7
    40a2:	d105      	bne.n	40b0 <memcpy+0x42>
    40a4:	f06f 0503 	mvn.w	r5, #3
    40a8:	fb05 2206 	mla	r2, r5, r6, r2
		d_byte = (unsigned char *)d_word;
    40ac:	4423      	add	r3, r4
    40ae:	e7e4      	b.n	407a <memcpy+0xc>
			*(d_word++) = *(s_word++);
    40b0:	f851 cb04 	ldr.w	ip, [r1], #4
    40b4:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    40b8:	e7f2      	b.n	40a0 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    40ba:	f811 4b01 	ldrb.w	r4, [r1], #1
    40be:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    40c2:	e7dc      	b.n	407e <memcpy+0x10>

000040c4 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    40c4:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    40c6:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    40c8:	4604      	mov	r4, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    40ca:	07a3      	lsls	r3, r4, #30
    40cc:	d111      	bne.n	40f2 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    40ce:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
    40d2:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    40d6:	f022 0303 	bic.w	r3, r2, #3
    40da:	0896      	lsrs	r6, r2, #2
    40dc:	4423      	add	r3, r4
    40de:	429c      	cmp	r4, r3
    40e0:	d10d      	bne.n	40fe <memset+0x3a>
    40e2:	f06f 0403 	mvn.w	r4, #3
    40e6:	fb04 2206 	mla	r2, r4, r6, r2
    40ea:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    40ec:	4293      	cmp	r3, r2
    40ee:	d109      	bne.n	4104 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    40f0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    40f2:	2a00      	cmp	r2, #0
    40f4:	d0fc      	beq.n	40f0 <memset+0x2c>
		*(d_byte++) = c_byte;
    40f6:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
    40fa:	3a01      	subs	r2, #1
    40fc:	e7e5      	b.n	40ca <memset+0x6>
		*(d_word++) = c_word;
    40fe:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
    4102:	e7ec      	b.n	40de <memset+0x1a>
		*(d_byte++) = c_byte;
    4104:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4108:	e7f0      	b.n	40ec <memset+0x28>

0000410a <_stdout_hook_default>:
}
    410a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    410e:	4770      	bx	lr

00004110 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    4110:	f7fe ba60 	b.w	25d4 <SystemInit>

00004114 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
    4114:	b084      	sub	sp, #16
    4116:	ab04      	add	r3, sp, #16
    4118:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    411c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4120:	2b06      	cmp	r3, #6
    4122:	d108      	bne.n	4136 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    4124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4128:	2201      	movs	r2, #1
    412a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    412e:	f3bf 8f4f 	dsb	sy
        __WFE();
    4132:	bf20      	wfe
    while (true)
    4134:	e7fd      	b.n	4132 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    4136:	b004      	add	sp, #16
    4138:	4770      	bx	lr

0000413a <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    413a:	b084      	sub	sp, #16
    413c:	ab04      	add	r3, sp, #16
    413e:	e903 0007 	stmdb	r3, {r0, r1, r2}
    4142:	2300      	movs	r3, #0
    4144:	f383 8811 	msr	BASEPRI, r3
    4148:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    414c:	b004      	add	sp, #16
    414e:	4770      	bx	lr

00004150 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4150:	6843      	ldr	r3, [r0, #4]
    4152:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4154:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    4158:	600b      	str	r3, [r1, #0]
}
    415a:	2000      	movs	r0, #0
    415c:	4770      	bx	lr

0000415e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    415e:	6843      	ldr	r3, [r0, #4]
    4160:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    4162:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    4166:	4042      	eors	r2, r0
    4168:	400a      	ands	r2, r1
    416a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    416c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    4170:	2000      	movs	r0, #0
    4172:	4770      	bx	lr

00004174 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4174:	6843      	ldr	r3, [r0, #4]
    4176:	685b      	ldr	r3, [r3, #4]
}
    4178:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    417a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    417e:	4770      	bx	lr

00004180 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4180:	6843      	ldr	r3, [r0, #4]
    4182:	685b      	ldr	r3, [r3, #4]
}
    4184:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4186:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    418a:	4770      	bx	lr

0000418c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    418c:	6843      	ldr	r3, [r0, #4]
    418e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4190:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    4194:	404b      	eors	r3, r1
    p_reg->OUT = value;
    4196:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    419a:	2000      	movs	r0, #0
    419c:	4770      	bx	lr

0000419e <gpio_nrfx_manage_callback>:
	return port->data;
    419e:	6903      	ldr	r3, [r0, #16]
	return list->head;
    41a0:	6858      	ldr	r0, [r3, #4]
{
    41a2:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    41a4:	b158      	cbz	r0, 41be <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    41a6:	2400      	movs	r4, #0
    41a8:	4281      	cmp	r1, r0
    41aa:	d112      	bne.n	41d2 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    41ac:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    41ae:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    41b0:	b954      	cbnz	r4, 41c8 <gpio_nrfx_manage_callback+0x2a>
    41b2:	428d      	cmp	r5, r1
	list->head = node;
    41b4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    41b6:	d100      	bne.n	41ba <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    41b8:	6098      	str	r0, [r3, #8]
	parent->next = child;
    41ba:	2000      	movs	r0, #0
    41bc:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    41be:	b96a      	cbnz	r2, 41dc <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    41c0:	2000      	movs	r0, #0
}
    41c2:	bd30      	pop	{r4, r5, pc}
    41c4:	4628      	mov	r0, r5
    41c6:	e7ef      	b.n	41a8 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    41c8:	428d      	cmp	r5, r1
	parent->next = child;
    41ca:	6020      	str	r0, [r4, #0]
	list->tail = node;
    41cc:	bf08      	it	eq
    41ce:	609c      	streq	r4, [r3, #8]
}
    41d0:	e7f3      	b.n	41ba <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    41d2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    41d4:	4604      	mov	r4, r0
    41d6:	2d00      	cmp	r5, #0
    41d8:	d1f4      	bne.n	41c4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    41da:	b13a      	cbz	r2, 41ec <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    41dc:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    41de:	685a      	ldr	r2, [r3, #4]
    41e0:	600a      	str	r2, [r1, #0]
	list->head = node;
    41e2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    41e4:	2800      	cmp	r0, #0
    41e6:	d1eb      	bne.n	41c0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    41e8:	6099      	str	r1, [r3, #8]
}
    41ea:	e7ea      	b.n	41c2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    41ec:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    41f0:	e7e7      	b.n	41c2 <gpio_nrfx_manage_callback+0x24>

000041f2 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
    41f2:	b570      	push	{r4, r5, r6, lr}
    41f4:	460e      	mov	r6, r1
    41f6:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    41f8:	4601      	mov	r1, r0
    41fa:	b150      	cbz	r0, 4212 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
    41fc:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
    41fe:	688a      	ldr	r2, [r1, #8]
    4200:	402a      	ands	r2, r5
    4202:	d002      	beq.n	420a <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4204:	684b      	ldr	r3, [r1, #4]
    4206:	4630      	mov	r0, r6
    4208:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    420a:	b114      	cbz	r4, 4212 <gpio_fire_callbacks.isra.0+0x20>
    420c:	4621      	mov	r1, r4
    420e:	6824      	ldr	r4, [r4, #0]
    4210:	e7f5      	b.n	41fe <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
    4212:	bd70      	pop	{r4, r5, r6, pc}

00004214 <cfg_level_pins>:
{
    4214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->data;
    4218:	6907      	ldr	r7, [r0, #16]
	return port->config;
    421a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    421e:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4220:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    4224:	4313      	orrs	r3, r2
    4226:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    422a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    422c:	2500      	movs	r5, #0
	while (level_pins) {
    422e:	b90c      	cbnz	r4, 4234 <cfg_level_pins+0x20>
}
    4230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    4234:	4226      	tst	r6, r4
    4236:	d010      	beq.n	425a <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4238:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    423a:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    423e:	40e9      	lsrs	r1, r5
    4240:	f001 0101 	and.w	r1, r1, #1
    4244:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4248:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    424c:	b2c9      	uxtb	r1, r1
    424e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    4252:	f7fd fc15 	bl	1a80 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    4256:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    425a:	3501      	adds	r5, #1
		bit <<= 1;
    425c:	0076      	lsls	r6, r6, #1
    425e:	e7e6      	b.n	422e <cfg_level_pins+0x1a>

00004260 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    4260:	07ca      	lsls	r2, r1, #31
	return dev->config;
    4262:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    4264:	d405      	bmi.n	4272 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
    4266:	f3c1 0242 	ubfx	r2, r1, #1, #3
    426a:	2a01      	cmp	r2, #1
    426c:	d004      	beq.n	4278 <i2c_nrfx_twim_configure+0x18>
    426e:	2a02      	cmp	r2, #2
    4270:	d00b      	beq.n	428a <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
    4272:	f06f 0015 	mvn.w	r0, #21
}
    4276:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    4278:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    427a:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    427e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    4282:	6903      	ldr	r3, [r0, #16]
	return 0;
    4284:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    4286:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    4288:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    428a:	681b      	ldr	r3, [r3, #0]
    428c:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    4290:	e7f5      	b.n	427e <i2c_nrfx_twim_configure+0x1e>

00004292 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    4292:	6902      	ldr	r2, [r0, #16]
{
    4294:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    4296:	e892 0003 	ldmia.w	r2, {r0, r1}
    429a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    429e:	2000      	movs	r0, #0
    42a0:	4770      	bx	lr

000042a2 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    42a2:	6902      	ldr	r2, [r0, #16]
{
    42a4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    42a6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    42aa:	e883 0003 	stmia.w	r3, {r0, r1}
}
    42ae:	2000      	movs	r0, #0
    42b0:	4770      	bx	lr

000042b2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    42b2:	6843      	ldr	r3, [r0, #4]
    42b4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    42b6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    42ba:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    42be:	4770      	bx	lr

000042c0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    42c0:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    42c2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    42c4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    42c6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    42ca:	b148      	cbz	r0, 42e0 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    42cc:	7c52      	ldrb	r2, [r2, #17]
    42ce:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42d0:	2000      	movs	r0, #0
    42d2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    42d6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42da:	2201      	movs	r2, #1
    42dc:	601a      	str	r2, [r3, #0]
	return 0;
    42de:	4770      	bx	lr
		return -1;
    42e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    42e4:	4770      	bx	lr

000042e6 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    42e6:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    42e8:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    42ea:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    42ee:	b940      	cbnz	r0, 4302 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    42f0:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    42f2:	071b      	lsls	r3, r3, #28
    42f4:	d406      	bmi.n	4304 <is_tx_ready.isra.0+0x1e>
    42f6:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    42fa:	3800      	subs	r0, #0
    42fc:	bf18      	it	ne
    42fe:	2001      	movne	r0, #1
    4300:	4770      	bx	lr
    4302:	2001      	movs	r0, #1
}
    4304:	4770      	bx	lr

00004306 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    4306:	6843      	ldr	r3, [r0, #4]
    4308:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    430a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    430e:	05d1      	lsls	r1, r2, #23
    4310:	d518      	bpl.n	4344 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4312:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    4316:	b1aa      	cbz	r2, 4344 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4318:	f04f 0120 	mov.w	r1, #32
    431c:	f3ef 8211 	mrs	r2, BASEPRI
    4320:	f381 8811 	msr	BASEPRI, r1
    4324:	f3bf 8f6f 	isb	sy
    4328:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    432c:	b131      	cbz	r1, 433c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    432e:	2100      	movs	r1, #0
    4330:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    4334:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4338:	2101      	movs	r1, #1
    433a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    433c:	f382 8811 	msr	BASEPRI, r2
    4340:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4344:	6842      	ldr	r2, [r0, #4]
    4346:	6852      	ldr	r2, [r2, #4]
    4348:	06d2      	lsls	r2, r2, #27
    434a:	d515      	bpl.n	4378 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    434c:	f04f 0120 	mov.w	r1, #32
    4350:	f3ef 8211 	mrs	r2, BASEPRI
    4354:	f381 8811 	msr	BASEPRI, r1
    4358:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    435c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4360:	b111      	cbz	r1, 4368 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4362:	2100      	movs	r1, #0
    4364:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4368:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    436c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4370:	f382 8811 	msr	BASEPRI, r2
    4374:	f3bf 8f6f 	isb	sy
}
    4378:	4770      	bx	lr

0000437a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    437a:	4700      	bx	r0

0000437c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    437c:	f000 b998 	b.w	46b0 <z_impl_k_busy_wait>

00004380 <nrfx_clock_enable>:
{
    4380:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4382:	2000      	movs	r0, #0
    4384:	f7fd f85a 	bl	143c <arch_irq_is_enabled>
    4388:	b918      	cbnz	r0, 4392 <nrfx_clock_enable+0x12>
}
    438a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    438e:	f7fd b845 	b.w	141c <arch_irq_enable>
    4392:	bd08      	pop	{r3, pc}

00004394 <nrfx_clock_start>:
    switch (domain)
    4394:	b110      	cbz	r0, 439c <nrfx_clock_start+0x8>
    4396:	2801      	cmp	r0, #1
    4398:	d01d      	beq.n	43d6 <nrfx_clock_start+0x42>
    439a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    439c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43a0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    43a4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    43a8:	03c9      	lsls	r1, r1, #15
    43aa:	d512      	bpl.n	43d2 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    43ac:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    43b0:	2a01      	cmp	r2, #1
    43b2:	d10e      	bne.n	43d2 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    43b4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43bc:	2200      	movs	r2, #0
    43be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    43c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    43c6:	2202      	movs	r2, #2
    43c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43cc:	2201      	movs	r2, #1
    43ce:	609a      	str	r2, [r3, #8]
}
    43d0:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    43d2:	2200      	movs	r2, #0
    43d4:	e7ee      	b.n	43b4 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43da:	2200      	movs	r2, #0
    43dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    43e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    43e4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43e8:	6018      	str	r0, [r3, #0]
}
    43ea:	4770      	bx	lr

000043ec <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    43ec:	7b0a      	ldrb	r2, [r1, #12]
{
    43ee:	4603      	mov	r3, r0
    43f0:	2a03      	cmp	r2, #3
    43f2:	d829      	bhi.n	4448 <xfer_completeness_check+0x5c>
    43f4:	e8df f002 	tbb	[pc, r2]
    43f8:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    43fc:	688a      	ldr	r2, [r1, #8]
    43fe:	0350      	lsls	r0, r2, #13
    4400:	d504      	bpl.n	440c <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    4402:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    4406:	6908      	ldr	r0, [r1, #16]
    4408:	4290      	cmp	r0, r2
    440a:	d107      	bne.n	441c <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    440c:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    440e:	0352      	lsls	r2, r2, #13
    4410:	d41a      	bmi.n	4448 <xfer_completeness_check+0x5c>
    4412:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    4416:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    4418:	4291      	cmp	r1, r2
    441a:	d015      	beq.n	4448 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    441c:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    441e:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    4420:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    4424:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    4428:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    442a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    442e:	6908      	ldr	r0, [r1, #16]
    4430:	4290      	cmp	r0, r2
    4432:	d1f3      	bne.n	441c <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    4434:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    4438:	e7ed      	b.n	4416 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    443a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    443e:	6909      	ldr	r1, [r1, #16]
    4440:	e7ea      	b.n	4418 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    4442:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    4446:	e7fa      	b.n	443e <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    4448:	2001      	movs	r0, #1
}
    444a:	4770      	bx	lr

0000444c <nrf_gpio_pin_set>:
{
    444c:	b507      	push	{r0, r1, r2, lr}
    444e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4450:	a801      	add	r0, sp, #4
    4452:	f7fe fd55 	bl	2f00 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4456:	9a01      	ldr	r2, [sp, #4]
    4458:	2301      	movs	r3, #1
    445a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    445c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    4460:	b003      	add	sp, #12
    4462:	f85d fb04 	ldr.w	pc, [sp], #4

00004466 <z_device_state_init>:
}
    4466:	4770      	bx	lr

00004468 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4468:	b138      	cbz	r0, 447a <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    446a:	68c3      	ldr	r3, [r0, #12]
    446c:	8818      	ldrh	r0, [r3, #0]
    446e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    4472:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    4476:	4258      	negs	r0, r3
    4478:	4158      	adcs	r0, r3
}
    447a:	4770      	bx	lr

0000447c <arch_system_halt>:
	__asm__ volatile(
    447c:	f04f 0220 	mov.w	r2, #32
    4480:	f3ef 8311 	mrs	r3, BASEPRI
    4484:	f382 8811 	msr	BASEPRI, r2
    4488:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    448c:	e7fe      	b.n	448c <arch_system_halt+0x10>

0000448e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    448e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    4490:	f7ff fff4 	bl	447c <arch_system_halt>

00004494 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4496:	4605      	mov	r5, r0
    4498:	460e      	mov	r6, r1
    449a:	f04f 0320 	mov.w	r3, #32
    449e:	f3ef 8711 	mrs	r7, BASEPRI
    44a2:	f383 8811 	msr	BASEPRI, r3
    44a6:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    44aa:	f7ff fa23 	bl	38f4 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    44ae:	4631      	mov	r1, r6
    44b0:	4604      	mov	r4, r0
    44b2:	4628      	mov	r0, r5
    44b4:	f7ff ffeb 	bl	448e <k_sys_fatal_error_handler>
	__asm__ volatile(
    44b8:	f387 8811 	msr	BASEPRI, r7
    44bc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    44c0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    44c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    44c6:	f7fd b979 	b.w	17bc <z_impl_k_thread_abort>

000044ca <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    44ca:	f3ef 8005 	mrs	r0, IPSR
}
    44ce:	3800      	subs	r0, #0
    44d0:	bf18      	it	ne
    44d2:	2001      	movne	r0, #1
    44d4:	4770      	bx	lr

000044d6 <z_pm_save_idle_exit>:
{
    44d6:	b508      	push	{r3, lr}
	pm_system_resume();
    44d8:	f7fc fc7e 	bl	dd8 <pm_system_resume>
}
    44dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    44e0:	f7ff bd97 	b.w	4012 <sys_clock_idle_exit>

000044e4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    44e4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    44e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    44ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    44ec:	2300      	movs	r3, #0
	node->prev = NULL;
    44ee:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    44f2:	4770      	bx	lr

000044f4 <unpend_thread_no_timeout>:
{
    44f4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    44f6:	f7ff fff5 	bl	44e4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    44fa:	7b43      	ldrb	r3, [r0, #13]
    44fc:	f023 0302 	bic.w	r3, r3, #2
    4500:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    4502:	2300      	movs	r3, #0
    4504:	6083      	str	r3, [r0, #8]
}
    4506:	bd08      	pop	{r3, pc}

00004508 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4508:	4603      	mov	r3, r0
    450a:	b920      	cbnz	r0, 4516 <z_reschedule_irqlock+0xe>
    450c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    4510:	b90a      	cbnz	r2, 4516 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    4512:	f7fc bf35 	b.w	1380 <arch_swap>
    4516:	f383 8811 	msr	BASEPRI, r3
    451a:	f3bf 8f6f 	isb	sy
}
    451e:	4770      	bx	lr

00004520 <z_reschedule_unlocked>:
	__asm__ volatile(
    4520:	f04f 0320 	mov.w	r3, #32
    4524:	f3ef 8011 	mrs	r0, BASEPRI
    4528:	f383 8811 	msr	BASEPRI, r3
    452c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4530:	f7ff bfea 	b.w	4508 <z_reschedule_irqlock>

00004534 <z_priq_dumb_best>:
{
    4534:	4603      	mov	r3, r0
	return list->head == list;
    4536:	6800      	ldr	r0, [r0, #0]
}
    4538:	4283      	cmp	r3, r0
    453a:	bf08      	it	eq
    453c:	2000      	moveq	r0, #0
    453e:	4770      	bx	lr

00004540 <add_to_waitq_locked>:
{
    4540:	b538      	push	{r3, r4, r5, lr}
    4542:	4604      	mov	r4, r0
    4544:	460d      	mov	r5, r1
	unready_thread(thread);
    4546:	f7fe ffb9 	bl	34bc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    454a:	7b63      	ldrb	r3, [r4, #13]
    454c:	f043 0302 	orr.w	r3, r3, #2
    4550:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4552:	b195      	cbz	r5, 457a <add_to_waitq_locked+0x3a>
    4554:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4556:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4558:	429d      	cmp	r5, r3
    455a:	d015      	beq.n	4588 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    455c:	b1a3      	cbz	r3, 4588 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    455e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4562:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4566:	4291      	cmp	r1, r2
    4568:	d008      	beq.n	457c <add_to_waitq_locked+0x3c>
		return b2 - b1;
    456a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    456c:	2a00      	cmp	r2, #0
    456e:	dd05      	ble.n	457c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    4570:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4572:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4576:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4578:	605c      	str	r4, [r3, #4]
}
    457a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    457c:	686a      	ldr	r2, [r5, #4]
    457e:	4293      	cmp	r3, r2
    4580:	d002      	beq.n	4588 <add_to_waitq_locked+0x48>
    4582:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4584:	2b00      	cmp	r3, #0
    4586:	d1ec      	bne.n	4562 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    4588:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    458a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    458e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4590:	606c      	str	r4, [r5, #4]
}
    4592:	e7f2      	b.n	457a <add_to_waitq_locked+0x3a>

00004594 <z_ready_thread>:
{
    4594:	b510      	push	{r4, lr}
    4596:	f04f 0320 	mov.w	r3, #32
    459a:	f3ef 8411 	mrs	r4, BASEPRI
    459e:	f383 8811 	msr	BASEPRI, r3
    45a2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    45a6:	f7ff f8a3 	bl	36f0 <ready_thread>
	__asm__ volatile(
    45aa:	f384 8811 	msr	BASEPRI, r4
    45ae:	f3bf 8f6f 	isb	sy
}
    45b2:	bd10      	pop	{r4, pc}

000045b4 <z_thread_timeout>:
{
    45b4:	b510      	push	{r4, lr}
    45b6:	4601      	mov	r1, r0
	__asm__ volatile(
    45b8:	f04f 0320 	mov.w	r3, #32
    45bc:	f3ef 8411 	mrs	r4, BASEPRI
    45c0:	f383 8811 	msr	BASEPRI, r3
    45c4:	f3bf 8f6f 	isb	sy
		if (!killed) {
    45c8:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    45cc:	f013 0f28 	tst.w	r3, #40	; 0x28
    45d0:	d10d      	bne.n	45ee <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    45d2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    45d6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    45d8:	b10b      	cbz	r3, 45de <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    45da:	f7ff ff8b 	bl	44f4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    45de:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    45e2:	f023 0314 	bic.w	r3, r3, #20
    45e6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    45ea:	f7ff f881 	bl	36f0 <ready_thread>
	__asm__ volatile(
    45ee:	f384 8811 	msr	BASEPRI, r4
    45f2:	f3bf 8f6f 	isb	sy
}
    45f6:	bd10      	pop	{r4, pc}

000045f8 <z_unpend_first_thread>:
{
    45f8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    45fa:	f04f 0320 	mov.w	r3, #32
    45fe:	f3ef 8511 	mrs	r5, BASEPRI
    4602:	f383 8811 	msr	BASEPRI, r3
    4606:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    460a:	f7ff ff93 	bl	4534 <z_priq_dumb_best>
		if (thread != NULL) {
    460e:	4604      	mov	r4, r0
    4610:	b120      	cbz	r0, 461c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    4612:	f7ff ff6f 	bl	44f4 <unpend_thread_no_timeout>
    4616:	3018      	adds	r0, #24
    4618:	f000 f806 	bl	4628 <z_abort_timeout>
	__asm__ volatile(
    461c:	f385 8811 	msr	BASEPRI, r5
    4620:	f3bf 8f6f 	isb	sy
}
    4624:	4620      	mov	r0, r4
    4626:	bd38      	pop	{r3, r4, r5, pc}

00004628 <z_abort_timeout>:
{
    4628:	b510      	push	{r4, lr}
	__asm__ volatile(
    462a:	f04f 0220 	mov.w	r2, #32
    462e:	f3ef 8411 	mrs	r4, BASEPRI
    4632:	f382 8811 	msr	BASEPRI, r2
    4636:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    463a:	6803      	ldr	r3, [r0, #0]
    463c:	b13b      	cbz	r3, 464e <z_abort_timeout+0x26>
			remove_timeout(to);
    463e:	f7ff f9fd 	bl	3a3c <remove_timeout>
			ret = 0;
    4642:	2000      	movs	r0, #0
	__asm__ volatile(
    4644:	f384 8811 	msr	BASEPRI, r4
    4648:	f3bf 8f6f 	isb	sy
}
    464c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    464e:	f06f 0015 	mvn.w	r0, #21
    4652:	e7f7      	b.n	4644 <z_abort_timeout+0x1c>

00004654 <z_get_next_timeout_expiry>:
{
    4654:	b510      	push	{r4, lr}
	__asm__ volatile(
    4656:	f04f 0320 	mov.w	r3, #32
    465a:	f3ef 8411 	mrs	r4, BASEPRI
    465e:	f383 8811 	msr	BASEPRI, r3
    4662:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4666:	f7ff f9c1 	bl	39ec <next_timeout>
	__asm__ volatile(
    466a:	f384 8811 	msr	BASEPRI, r4
    466e:	f3bf 8f6f 	isb	sy
}
    4672:	bd10      	pop	{r4, pc}

00004674 <z_set_timeout_expiry>:
{
    4674:	b570      	push	{r4, r5, r6, lr}
    4676:	4604      	mov	r4, r0
    4678:	460d      	mov	r5, r1
	__asm__ volatile(
    467a:	f04f 0320 	mov.w	r3, #32
    467e:	f3ef 8611 	mrs	r6, BASEPRI
    4682:	f383 8811 	msr	BASEPRI, r3
    4686:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    468a:	f7ff f9af 	bl	39ec <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    468e:	2801      	cmp	r0, #1
    4690:	dd05      	ble.n	469e <z_set_timeout_expiry+0x2a>
    4692:	42a0      	cmp	r0, r4
    4694:	db03      	blt.n	469e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4696:	4629      	mov	r1, r5
    4698:	4620      	mov	r0, r4
    469a:	f7fc fe31 	bl	1300 <sys_clock_set_timeout>
	__asm__ volatile(
    469e:	f386 8811 	msr	BASEPRI, r6
    46a2:	f3bf 8f6f 	isb	sy
}
    46a6:	bd70      	pop	{r4, r5, r6, pc}

000046a8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    46a8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    46aa:	f7ff fab7 	bl	3c1c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    46ae:	bd08      	pop	{r3, pc}

000046b0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    46b0:	b108      	cbz	r0, 46b6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    46b2:	f7fd b951 	b.w	1958 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    46b6:	4770      	bx	lr

000046b8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    46b8:	4770      	bx	lr
